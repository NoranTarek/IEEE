
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002de2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000156  00800060  00002de2  00002e56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002418  00000000  00000000  00002fac  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e53  00000000  00000000  000053c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  00006217  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d3  00000000  00000000  00006397  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000200f  00000000  00000000  0000656a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001170  00000000  00000000  00008579  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001001  00000000  00000000  000096e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  0000a6ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c1  00000000  00000000  0000a88c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ae  00000000  00000000  0000ab4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b3fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ee       	ldi	r30, 0xE2	; 226
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3b       	cpi	r26, 0xB6	; 182
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 40 11 	call	0x2280	; 0x2280 <main>
      7a:	0c 94 ef 16 	jmp	0x2dde	; 0x2dde <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a9 e9       	ldi	r26, 0x99	; 153
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 d4 16 	jmp	0x2da8	; 0x2da8 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	89 e9       	ldi	r24, 0x99	; 153
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 d4 16 	jmp	0x2da8	; 0x2da8 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 c8 16 	jmp	0x2d90	; 0x2d90 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 e4 16 	jmp	0x2dc8	; 0x2dc8 <__epilogue_restores__+0x20>

000007ea <__floatunsisf>:
     7ea:	a8 e0       	ldi	r26, 0x08	; 8
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__prologue_saves__+0x10>
     7f6:	7b 01       	movw	r14, r22
     7f8:	8c 01       	movw	r16, r24
     7fa:	61 15       	cp	r22, r1
     7fc:	71 05       	cpc	r23, r1
     7fe:	81 05       	cpc	r24, r1
     800:	91 05       	cpc	r25, r1
     802:	19 f4       	brne	.+6      	; 0x80a <__floatunsisf+0x20>
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	60 c0       	rjmp	.+192    	; 0x8ca <__stack+0x6b>
     80a:	83 e0       	ldi	r24, 0x03	; 3
     80c:	89 83       	std	Y+1, r24	; 0x01
     80e:	8e e1       	ldi	r24, 0x1E	; 30
     810:	c8 2e       	mov	r12, r24
     812:	d1 2c       	mov	r13, r1
     814:	dc 82       	std	Y+4, r13	; 0x04
     816:	cb 82       	std	Y+3, r12	; 0x03
     818:	ed 82       	std	Y+5, r14	; 0x05
     81a:	fe 82       	std	Y+6, r15	; 0x06
     81c:	0f 83       	std	Y+7, r16	; 0x07
     81e:	18 87       	std	Y+8, r17	; 0x08
     820:	c8 01       	movw	r24, r16
     822:	b7 01       	movw	r22, r14
     824:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__clzsi2>
     828:	fc 01       	movw	r30, r24
     82a:	31 97       	sbiw	r30, 0x01	; 1
     82c:	f7 ff       	sbrs	r31, 7
     82e:	3b c0       	rjmp	.+118    	; 0x8a6 <__stack+0x47>
     830:	22 27       	eor	r18, r18
     832:	33 27       	eor	r19, r19
     834:	2e 1b       	sub	r18, r30
     836:	3f 0b       	sbc	r19, r31
     838:	57 01       	movw	r10, r14
     83a:	68 01       	movw	r12, r16
     83c:	02 2e       	mov	r0, r18
     83e:	04 c0       	rjmp	.+8      	; 0x848 <__floatunsisf+0x5e>
     840:	d6 94       	lsr	r13
     842:	c7 94       	ror	r12
     844:	b7 94       	ror	r11
     846:	a7 94       	ror	r10
     848:	0a 94       	dec	r0
     84a:	d2 f7       	brpl	.-12     	; 0x840 <__floatunsisf+0x56>
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	a0 e0       	ldi	r26, 0x00	; 0
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	aa 1f       	adc	r26, r26
     864:	bb 1f       	adc	r27, r27
     866:	2a 95       	dec	r18
     868:	d2 f7       	brpl	.-12     	; 0x85e <__floatunsisf+0x74>
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	a1 09       	sbc	r26, r1
     86e:	b1 09       	sbc	r27, r1
     870:	8e 21       	and	r24, r14
     872:	9f 21       	and	r25, r15
     874:	a0 23       	and	r26, r16
     876:	b1 23       	and	r27, r17
     878:	00 97       	sbiw	r24, 0x00	; 0
     87a:	a1 05       	cpc	r26, r1
     87c:	b1 05       	cpc	r27, r1
     87e:	21 f0       	breq	.+8      	; 0x888 <__stack+0x29>
     880:	41 e0       	ldi	r20, 0x01	; 1
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	4a 29       	or	r20, r10
     88a:	5b 29       	or	r21, r11
     88c:	6c 29       	or	r22, r12
     88e:	7d 29       	or	r23, r13
     890:	4d 83       	std	Y+5, r20	; 0x05
     892:	5e 83       	std	Y+6, r21	; 0x06
     894:	6f 83       	std	Y+7, r22	; 0x07
     896:	78 87       	std	Y+8, r23	; 0x08
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	8e 1b       	sub	r24, r30
     89e:	9f 0b       	sbc	r25, r31
     8a0:	9c 83       	std	Y+4, r25	; 0x04
     8a2:	8b 83       	std	Y+3, r24	; 0x03
     8a4:	12 c0       	rjmp	.+36     	; 0x8ca <__stack+0x6b>
     8a6:	30 97       	sbiw	r30, 0x00	; 0
     8a8:	81 f0       	breq	.+32     	; 0x8ca <__stack+0x6b>
     8aa:	0e 2e       	mov	r0, r30
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__stack+0x57>
     8ae:	ee 0c       	add	r14, r14
     8b0:	ff 1c       	adc	r15, r15
     8b2:	00 1f       	adc	r16, r16
     8b4:	11 1f       	adc	r17, r17
     8b6:	0a 94       	dec	r0
     8b8:	d2 f7       	brpl	.-12     	; 0x8ae <__stack+0x4f>
     8ba:	ed 82       	std	Y+5, r14	; 0x05
     8bc:	fe 82       	std	Y+6, r15	; 0x06
     8be:	0f 83       	std	Y+7, r16	; 0x07
     8c0:	18 87       	std	Y+8, r17	; 0x08
     8c2:	ce 1a       	sub	r12, r30
     8c4:	df 0a       	sbc	r13, r31
     8c6:	dc 82       	std	Y+4, r13	; 0x04
     8c8:	cb 82       	std	Y+3, r12	; 0x03
     8ca:	1a 82       	std	Y+2, r1	; 0x02
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     8d4:	28 96       	adiw	r28, 0x08	; 8
     8d6:	ea e0       	ldi	r30, 0x0A	; 10
     8d8:	0c 94 dc 16 	jmp	0x2db8	; 0x2db8 <__epilogue_restores__+0x10>

000008dc <__clzsi2>:
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	7b 01       	movw	r14, r22
     8e6:	8c 01       	movw	r16, r24
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	e8 16       	cp	r14, r24
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	f8 06       	cpc	r15, r24
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	08 07       	cpc	r16, r24
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	18 07       	cpc	r17, r24
     8f8:	88 f4       	brcc	.+34     	; 0x91c <__clzsi2+0x40>
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	e8 16       	cp	r14, r24
     8fe:	f1 04       	cpc	r15, r1
     900:	01 05       	cpc	r16, r1
     902:	11 05       	cpc	r17, r1
     904:	31 f0       	breq	.+12     	; 0x912 <__clzsi2+0x36>
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x36>
     908:	88 e0       	ldi	r24, 0x08	; 8
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	17 c0       	rjmp	.+46     	; 0x940 <__clzsi2+0x64>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	12 c0       	rjmp	.+36     	; 0x940 <__clzsi2+0x64>
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	e8 16       	cp	r14, r24
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	f8 06       	cpc	r15, r24
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	08 07       	cpc	r16, r24
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	18 07       	cpc	r17, r24
     92c:	28 f0       	brcs	.+10     	; 0x938 <__clzsi2+0x5c>
     92e:	88 e1       	ldi	r24, 0x18	; 24
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	04 c0       	rjmp	.+8      	; 0x940 <__clzsi2+0x64>
     938:	80 e1       	ldi	r24, 0x10	; 16
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	20 e2       	ldi	r18, 0x20	; 32
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	28 1b       	sub	r18, r24
     94a:	39 0b       	sbc	r19, r25
     94c:	4a 0b       	sbc	r20, r26
     94e:	5b 0b       	sbc	r21, r27
     950:	04 c0       	rjmp	.+8      	; 0x95a <__clzsi2+0x7e>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	8a 95       	dec	r24
     95c:	d2 f7       	brpl	.-12     	; 0x952 <__clzsi2+0x76>
     95e:	f7 01       	movw	r30, r14
     960:	ef 55       	subi	r30, 0x5F	; 95
     962:	ff 4f       	sbci	r31, 0xFF	; 255
     964:	80 81       	ld	r24, Z
     966:	28 1b       	sub	r18, r24
     968:	31 09       	sbc	r19, r1
     96a:	41 09       	sbc	r20, r1
     96c:	51 09       	sbc	r21, r1
     96e:	c9 01       	movw	r24, r18
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	08 95       	ret

0000097a <__pack_f>:
     97a:	df 92       	push	r13
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	fc 01       	movw	r30, r24
     986:	e4 80       	ldd	r14, Z+4	; 0x04
     988:	f5 80       	ldd	r15, Z+5	; 0x05
     98a:	06 81       	ldd	r16, Z+6	; 0x06
     98c:	17 81       	ldd	r17, Z+7	; 0x07
     98e:	d1 80       	ldd	r13, Z+1	; 0x01
     990:	80 81       	ld	r24, Z
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	48 f4       	brcc	.+18     	; 0x9a8 <__pack_f+0x2e>
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	a0 e1       	ldi	r26, 0x10	; 16
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	e8 2a       	or	r14, r24
     9a0:	f9 2a       	or	r15, r25
     9a2:	0a 2b       	or	r16, r26
     9a4:	1b 2b       	or	r17, r27
     9a6:	a5 c0       	rjmp	.+330    	; 0xaf2 <__pack_f+0x178>
     9a8:	84 30       	cpi	r24, 0x04	; 4
     9aa:	09 f4       	brne	.+2      	; 0x9ae <__pack_f+0x34>
     9ac:	9f c0       	rjmp	.+318    	; 0xaec <__pack_f+0x172>
     9ae:	82 30       	cpi	r24, 0x02	; 2
     9b0:	21 f4       	brne	.+8      	; 0x9ba <__pack_f+0x40>
     9b2:	ee 24       	eor	r14, r14
     9b4:	ff 24       	eor	r15, r15
     9b6:	87 01       	movw	r16, r14
     9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <__pack_f+0x4a>
     9ba:	e1 14       	cp	r14, r1
     9bc:	f1 04       	cpc	r15, r1
     9be:	01 05       	cpc	r16, r1
     9c0:	11 05       	cpc	r17, r1
     9c2:	19 f4       	brne	.+6      	; 0x9ca <__pack_f+0x50>
     9c4:	e0 e0       	ldi	r30, 0x00	; 0
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	96 c0       	rjmp	.+300    	; 0xaf6 <__pack_f+0x17c>
     9ca:	62 81       	ldd	r22, Z+2	; 0x02
     9cc:	73 81       	ldd	r23, Z+3	; 0x03
     9ce:	9f ef       	ldi	r25, 0xFF	; 255
     9d0:	62 38       	cpi	r22, 0x82	; 130
     9d2:	79 07       	cpc	r23, r25
     9d4:	0c f0       	brlt	.+2      	; 0x9d8 <__pack_f+0x5e>
     9d6:	5b c0       	rjmp	.+182    	; 0xa8e <__pack_f+0x114>
     9d8:	22 e8       	ldi	r18, 0x82	; 130
     9da:	3f ef       	ldi	r19, 0xFF	; 255
     9dc:	26 1b       	sub	r18, r22
     9de:	37 0b       	sbc	r19, r23
     9e0:	2a 31       	cpi	r18, 0x1A	; 26
     9e2:	31 05       	cpc	r19, r1
     9e4:	2c f0       	brlt	.+10     	; 0x9f0 <__pack_f+0x76>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	2a c0       	rjmp	.+84     	; 0xa44 <__pack_f+0xca>
     9f0:	b8 01       	movw	r22, r16
     9f2:	a7 01       	movw	r20, r14
     9f4:	02 2e       	mov	r0, r18
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__pack_f+0x86>
     9f8:	76 95       	lsr	r23
     9fa:	67 95       	ror	r22
     9fc:	57 95       	ror	r21
     9fe:	47 95       	ror	r20
     a00:	0a 94       	dec	r0
     a02:	d2 f7       	brpl	.-12     	; 0x9f8 <__pack_f+0x7e>
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__pack_f+0x9c>
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	aa 1f       	adc	r26, r26
     a14:	bb 1f       	adc	r27, r27
     a16:	2a 95       	dec	r18
     a18:	d2 f7       	brpl	.-12     	; 0xa0e <__pack_f+0x94>
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	a1 09       	sbc	r26, r1
     a1e:	b1 09       	sbc	r27, r1
     a20:	8e 21       	and	r24, r14
     a22:	9f 21       	and	r25, r15
     a24:	a0 23       	and	r26, r16
     a26:	b1 23       	and	r27, r17
     a28:	00 97       	sbiw	r24, 0x00	; 0
     a2a:	a1 05       	cpc	r26, r1
     a2c:	b1 05       	cpc	r27, r1
     a2e:	21 f0       	breq	.+8      	; 0xa38 <__pack_f+0xbe>
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	9a 01       	movw	r18, r20
     a3a:	ab 01       	movw	r20, r22
     a3c:	28 2b       	or	r18, r24
     a3e:	39 2b       	or	r19, r25
     a40:	4a 2b       	or	r20, r26
     a42:	5b 2b       	or	r21, r27
     a44:	da 01       	movw	r26, r20
     a46:	c9 01       	movw	r24, r18
     a48:	8f 77       	andi	r24, 0x7F	; 127
     a4a:	90 70       	andi	r25, 0x00	; 0
     a4c:	a0 70       	andi	r26, 0x00	; 0
     a4e:	b0 70       	andi	r27, 0x00	; 0
     a50:	80 34       	cpi	r24, 0x40	; 64
     a52:	91 05       	cpc	r25, r1
     a54:	a1 05       	cpc	r26, r1
     a56:	b1 05       	cpc	r27, r1
     a58:	39 f4       	brne	.+14     	; 0xa68 <__pack_f+0xee>
     a5a:	27 ff       	sbrs	r18, 7
     a5c:	09 c0       	rjmp	.+18     	; 0xa70 <__pack_f+0xf6>
     a5e:	20 5c       	subi	r18, 0xC0	; 192
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	4f 4f       	sbci	r20, 0xFF	; 255
     a64:	5f 4f       	sbci	r21, 0xFF	; 255
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__pack_f+0xf6>
     a68:	21 5c       	subi	r18, 0xC1	; 193
     a6a:	3f 4f       	sbci	r19, 0xFF	; 255
     a6c:	4f 4f       	sbci	r20, 0xFF	; 255
     a6e:	5f 4f       	sbci	r21, 0xFF	; 255
     a70:	e0 e0       	ldi	r30, 0x00	; 0
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	20 30       	cpi	r18, 0x00	; 0
     a76:	a0 e0       	ldi	r26, 0x00	; 0
     a78:	3a 07       	cpc	r19, r26
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	4a 07       	cpc	r20, r26
     a7e:	a0 e4       	ldi	r26, 0x40	; 64
     a80:	5a 07       	cpc	r21, r26
     a82:	10 f0       	brcs	.+4      	; 0xa88 <__pack_f+0x10e>
     a84:	e1 e0       	ldi	r30, 0x01	; 1
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	79 01       	movw	r14, r18
     a8a:	8a 01       	movw	r16, r20
     a8c:	27 c0       	rjmp	.+78     	; 0xadc <__pack_f+0x162>
     a8e:	60 38       	cpi	r22, 0x80	; 128
     a90:	71 05       	cpc	r23, r1
     a92:	64 f5       	brge	.+88     	; 0xaec <__pack_f+0x172>
     a94:	fb 01       	movw	r30, r22
     a96:	e1 58       	subi	r30, 0x81	; 129
     a98:	ff 4f       	sbci	r31, 0xFF	; 255
     a9a:	d8 01       	movw	r26, r16
     a9c:	c7 01       	movw	r24, r14
     a9e:	8f 77       	andi	r24, 0x7F	; 127
     aa0:	90 70       	andi	r25, 0x00	; 0
     aa2:	a0 70       	andi	r26, 0x00	; 0
     aa4:	b0 70       	andi	r27, 0x00	; 0
     aa6:	80 34       	cpi	r24, 0x40	; 64
     aa8:	91 05       	cpc	r25, r1
     aaa:	a1 05       	cpc	r26, r1
     aac:	b1 05       	cpc	r27, r1
     aae:	39 f4       	brne	.+14     	; 0xabe <__pack_f+0x144>
     ab0:	e7 fe       	sbrs	r14, 7
     ab2:	0d c0       	rjmp	.+26     	; 0xace <__pack_f+0x154>
     ab4:	80 e4       	ldi	r24, 0x40	; 64
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	a0 e0       	ldi	r26, 0x00	; 0
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	04 c0       	rjmp	.+8      	; 0xac6 <__pack_f+0x14c>
     abe:	8f e3       	ldi	r24, 0x3F	; 63
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	a0 e0       	ldi	r26, 0x00	; 0
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	e8 0e       	add	r14, r24
     ac8:	f9 1e       	adc	r15, r25
     aca:	0a 1f       	adc	r16, r26
     acc:	1b 1f       	adc	r17, r27
     ace:	17 ff       	sbrs	r17, 7
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <__pack_f+0x162>
     ad2:	16 95       	lsr	r17
     ad4:	07 95       	ror	r16
     ad6:	f7 94       	ror	r15
     ad8:	e7 94       	ror	r14
     ada:	31 96       	adiw	r30, 0x01	; 1
     adc:	87 e0       	ldi	r24, 0x07	; 7
     ade:	16 95       	lsr	r17
     ae0:	07 95       	ror	r16
     ae2:	f7 94       	ror	r15
     ae4:	e7 94       	ror	r14
     ae6:	8a 95       	dec	r24
     ae8:	d1 f7       	brne	.-12     	; 0xade <__pack_f+0x164>
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x17c>
     aec:	ee 24       	eor	r14, r14
     aee:	ff 24       	eor	r15, r15
     af0:	87 01       	movw	r16, r14
     af2:	ef ef       	ldi	r30, 0xFF	; 255
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	6e 2f       	mov	r22, r30
     af8:	67 95       	ror	r22
     afa:	66 27       	eor	r22, r22
     afc:	67 95       	ror	r22
     afe:	90 2f       	mov	r25, r16
     b00:	9f 77       	andi	r25, 0x7F	; 127
     b02:	d7 94       	ror	r13
     b04:	dd 24       	eor	r13, r13
     b06:	d7 94       	ror	r13
     b08:	8e 2f       	mov	r24, r30
     b0a:	86 95       	lsr	r24
     b0c:	49 2f       	mov	r20, r25
     b0e:	46 2b       	or	r20, r22
     b10:	58 2f       	mov	r21, r24
     b12:	5d 29       	or	r21, r13
     b14:	b7 01       	movw	r22, r14
     b16:	ca 01       	movw	r24, r20
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	df 90       	pop	r13
     b22:	08 95       	ret

00000b24 <__unpack_f>:
     b24:	fc 01       	movw	r30, r24
     b26:	db 01       	movw	r26, r22
     b28:	40 81       	ld	r20, Z
     b2a:	51 81       	ldd	r21, Z+1	; 0x01
     b2c:	22 81       	ldd	r18, Z+2	; 0x02
     b2e:	62 2f       	mov	r22, r18
     b30:	6f 77       	andi	r22, 0x7F	; 127
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	22 1f       	adc	r18, r18
     b36:	22 27       	eor	r18, r18
     b38:	22 1f       	adc	r18, r18
     b3a:	93 81       	ldd	r25, Z+3	; 0x03
     b3c:	89 2f       	mov	r24, r25
     b3e:	88 0f       	add	r24, r24
     b40:	82 2b       	or	r24, r18
     b42:	28 2f       	mov	r18, r24
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	99 1f       	adc	r25, r25
     b48:	99 27       	eor	r25, r25
     b4a:	99 1f       	adc	r25, r25
     b4c:	11 96       	adiw	r26, 0x01	; 1
     b4e:	9c 93       	st	X, r25
     b50:	11 97       	sbiw	r26, 0x01	; 1
     b52:	21 15       	cp	r18, r1
     b54:	31 05       	cpc	r19, r1
     b56:	a9 f5       	brne	.+106    	; 0xbc2 <__unpack_f+0x9e>
     b58:	41 15       	cp	r20, r1
     b5a:	51 05       	cpc	r21, r1
     b5c:	61 05       	cpc	r22, r1
     b5e:	71 05       	cpc	r23, r1
     b60:	11 f4       	brne	.+4      	; 0xb66 <__unpack_f+0x42>
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	37 c0       	rjmp	.+110    	; 0xbd4 <__unpack_f+0xb0>
     b66:	82 e8       	ldi	r24, 0x82	; 130
     b68:	9f ef       	ldi	r25, 0xFF	; 255
     b6a:	13 96       	adiw	r26, 0x03	; 3
     b6c:	9c 93       	st	X, r25
     b6e:	8e 93       	st	-X, r24
     b70:	12 97       	sbiw	r26, 0x02	; 2
     b72:	9a 01       	movw	r18, r20
     b74:	ab 01       	movw	r20, r22
     b76:	67 e0       	ldi	r22, 0x07	; 7
     b78:	22 0f       	add	r18, r18
     b7a:	33 1f       	adc	r19, r19
     b7c:	44 1f       	adc	r20, r20
     b7e:	55 1f       	adc	r21, r21
     b80:	6a 95       	dec	r22
     b82:	d1 f7       	brne	.-12     	; 0xb78 <__unpack_f+0x54>
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	8c 93       	st	X, r24
     b88:	0d c0       	rjmp	.+26     	; 0xba4 <__unpack_f+0x80>
     b8a:	22 0f       	add	r18, r18
     b8c:	33 1f       	adc	r19, r19
     b8e:	44 1f       	adc	r20, r20
     b90:	55 1f       	adc	r21, r21
     b92:	12 96       	adiw	r26, 0x02	; 2
     b94:	8d 91       	ld	r24, X+
     b96:	9c 91       	ld	r25, X
     b98:	13 97       	sbiw	r26, 0x03	; 3
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	13 96       	adiw	r26, 0x03	; 3
     b9e:	9c 93       	st	X, r25
     ba0:	8e 93       	st	-X, r24
     ba2:	12 97       	sbiw	r26, 0x02	; 2
     ba4:	20 30       	cpi	r18, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	38 07       	cpc	r19, r24
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	48 07       	cpc	r20, r24
     bae:	80 e4       	ldi	r24, 0x40	; 64
     bb0:	58 07       	cpc	r21, r24
     bb2:	58 f3       	brcs	.-42     	; 0xb8a <__unpack_f+0x66>
     bb4:	14 96       	adiw	r26, 0x04	; 4
     bb6:	2d 93       	st	X+, r18
     bb8:	3d 93       	st	X+, r19
     bba:	4d 93       	st	X+, r20
     bbc:	5c 93       	st	X, r21
     bbe:	17 97       	sbiw	r26, 0x07	; 7
     bc0:	08 95       	ret
     bc2:	2f 3f       	cpi	r18, 0xFF	; 255
     bc4:	31 05       	cpc	r19, r1
     bc6:	79 f4       	brne	.+30     	; 0xbe6 <__unpack_f+0xc2>
     bc8:	41 15       	cp	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	61 05       	cpc	r22, r1
     bce:	71 05       	cpc	r23, r1
     bd0:	19 f4       	brne	.+6      	; 0xbd8 <__unpack_f+0xb4>
     bd2:	84 e0       	ldi	r24, 0x04	; 4
     bd4:	8c 93       	st	X, r24
     bd6:	08 95       	ret
     bd8:	64 ff       	sbrs	r22, 4
     bda:	03 c0       	rjmp	.+6      	; 0xbe2 <__unpack_f+0xbe>
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	8c 93       	st	X, r24
     be0:	12 c0       	rjmp	.+36     	; 0xc06 <__unpack_f+0xe2>
     be2:	1c 92       	st	X, r1
     be4:	10 c0       	rjmp	.+32     	; 0xc06 <__unpack_f+0xe2>
     be6:	2f 57       	subi	r18, 0x7F	; 127
     be8:	30 40       	sbci	r19, 0x00	; 0
     bea:	13 96       	adiw	r26, 0x03	; 3
     bec:	3c 93       	st	X, r19
     bee:	2e 93       	st	-X, r18
     bf0:	12 97       	sbiw	r26, 0x02	; 2
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	8c 93       	st	X, r24
     bf6:	87 e0       	ldi	r24, 0x07	; 7
     bf8:	44 0f       	add	r20, r20
     bfa:	55 1f       	adc	r21, r21
     bfc:	66 1f       	adc	r22, r22
     bfe:	77 1f       	adc	r23, r23
     c00:	8a 95       	dec	r24
     c02:	d1 f7       	brne	.-12     	; 0xbf8 <__unpack_f+0xd4>
     c04:	70 64       	ori	r23, 0x40	; 64
     c06:	14 96       	adiw	r26, 0x04	; 4
     c08:	4d 93       	st	X+, r20
     c0a:	5d 93       	st	X+, r21
     c0c:	6d 93       	st	X+, r22
     c0e:	7c 93       	st	X, r23
     c10:	17 97       	sbiw	r26, 0x07	; 7
     c12:	08 95       	ret

00000c14 <__fpcmp_parts_f>:
     c14:	1f 93       	push	r17
     c16:	dc 01       	movw	r26, r24
     c18:	fb 01       	movw	r30, r22
     c1a:	9c 91       	ld	r25, X
     c1c:	92 30       	cpi	r25, 0x02	; 2
     c1e:	08 f4       	brcc	.+2      	; 0xc22 <__fpcmp_parts_f+0xe>
     c20:	47 c0       	rjmp	.+142    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c22:	80 81       	ld	r24, Z
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	08 f4       	brcc	.+2      	; 0xc2a <__fpcmp_parts_f+0x16>
     c28:	43 c0       	rjmp	.+134    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c2a:	94 30       	cpi	r25, 0x04	; 4
     c2c:	51 f4       	brne	.+20     	; 0xc42 <__fpcmp_parts_f+0x2e>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	84 30       	cpi	r24, 0x04	; 4
     c34:	99 f5       	brne	.+102    	; 0xc9c <__fpcmp_parts_f+0x88>
     c36:	81 81       	ldd	r24, Z+1	; 0x01
     c38:	68 2f       	mov	r22, r24
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	61 1b       	sub	r22, r17
     c3e:	71 09       	sbc	r23, r1
     c40:	3f c0       	rjmp	.+126    	; 0xcc0 <__fpcmp_parts_f+0xac>
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	21 f0       	breq	.+8      	; 0xc4e <__fpcmp_parts_f+0x3a>
     c46:	92 30       	cpi	r25, 0x02	; 2
     c48:	31 f4       	brne	.+12     	; 0xc56 <__fpcmp_parts_f+0x42>
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	b9 f1       	breq	.+110    	; 0xcbc <__fpcmp_parts_f+0xa8>
     c4e:	81 81       	ldd	r24, Z+1	; 0x01
     c50:	88 23       	and	r24, r24
     c52:	89 f1       	breq	.+98     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     c54:	2d c0       	rjmp	.+90     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c56:	11 96       	adiw	r26, 0x01	; 1
     c58:	1c 91       	ld	r17, X
     c5a:	11 97       	sbiw	r26, 0x01	; 1
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	f1 f0       	breq	.+60     	; 0xc9c <__fpcmp_parts_f+0x88>
     c60:	81 81       	ldd	r24, Z+1	; 0x01
     c62:	18 17       	cp	r17, r24
     c64:	d9 f4       	brne	.+54     	; 0xc9c <__fpcmp_parts_f+0x88>
     c66:	12 96       	adiw	r26, 0x02	; 2
     c68:	2d 91       	ld	r18, X+
     c6a:	3c 91       	ld	r19, X
     c6c:	13 97       	sbiw	r26, 0x03	; 3
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	93 81       	ldd	r25, Z+3	; 0x03
     c72:	82 17       	cp	r24, r18
     c74:	93 07       	cpc	r25, r19
     c76:	94 f0       	brlt	.+36     	; 0xc9c <__fpcmp_parts_f+0x88>
     c78:	28 17       	cp	r18, r24
     c7a:	39 07       	cpc	r19, r25
     c7c:	bc f0       	brlt	.+46     	; 0xcac <__fpcmp_parts_f+0x98>
     c7e:	14 96       	adiw	r26, 0x04	; 4
     c80:	8d 91       	ld	r24, X+
     c82:	9d 91       	ld	r25, X+
     c84:	0d 90       	ld	r0, X+
     c86:	bc 91       	ld	r27, X
     c88:	a0 2d       	mov	r26, r0
     c8a:	24 81       	ldd	r18, Z+4	; 0x04
     c8c:	35 81       	ldd	r19, Z+5	; 0x05
     c8e:	46 81       	ldd	r20, Z+6	; 0x06
     c90:	57 81       	ldd	r21, Z+7	; 0x07
     c92:	28 17       	cp	r18, r24
     c94:	39 07       	cpc	r19, r25
     c96:	4a 07       	cpc	r20, r26
     c98:	5b 07       	cpc	r21, r27
     c9a:	18 f4       	brcc	.+6      	; 0xca2 <__fpcmp_parts_f+0x8e>
     c9c:	11 23       	and	r17, r17
     c9e:	41 f0       	breq	.+16     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     ca0:	0a c0       	rjmp	.+20     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     ca2:	82 17       	cp	r24, r18
     ca4:	93 07       	cpc	r25, r19
     ca6:	a4 07       	cpc	r26, r20
     ca8:	b5 07       	cpc	r27, r21
     caa:	40 f4       	brcc	.+16     	; 0xcbc <__fpcmp_parts_f+0xa8>
     cac:	11 23       	and	r17, r17
     cae:	19 f0       	breq	.+6      	; 0xcb6 <__fpcmp_parts_f+0xa2>
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <__fpcmp_parts_f+0xac>
     cb6:	6f ef       	ldi	r22, 0xFF	; 255
     cb8:	7f ef       	ldi	r23, 0xFF	; 255
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <__fpcmp_parts_f+0xac>
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	cb 01       	movw	r24, r22
     cc2:	1f 91       	pop	r17
     cc4:	08 95       	ret

00000cc6 <DIO_enuSetPortDirection>:
#include "DIO_Register.h"
#include "DIO_Interface.h"
#include "DIO_Private.h"

ES_t DIO_enuSetPortDirection(u8 port_name,u8 port_direction)
{
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	00 d0       	rcall	.+0      	; 0xccc <DIO_enuSetPortDirection+0x6>
     ccc:	00 d0       	rcall	.+0      	; 0xcce <DIO_enuSetPortDirection+0x8>
     cce:	0f 92       	push	r0
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
     cd4:	8a 83       	std	Y+2, r24	; 0x02
     cd6:	6b 83       	std	Y+3, r22	; 0x03
	ES_t ErrorState = ES_OK;
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	89 83       	std	Y+1, r24	; 0x01
	if((port_name <= DIO_u8PORTD))
     cdc:	8a 81       	ldd	r24, Y+2	; 0x02
     cde:	84 30       	cpi	r24, 0x04	; 4
     ce0:	98 f5       	brcc	.+102    	; 0xd48 <DIO_enuSetPortDirection+0x82>
	{
		switch(port_name)
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	3d 83       	std	Y+5, r19	; 0x05
     cea:	2c 83       	std	Y+4, r18	; 0x04
     cec:	8c 81       	ldd	r24, Y+4	; 0x04
     cee:	9d 81       	ldd	r25, Y+5	; 0x05
     cf0:	81 30       	cpi	r24, 0x01	; 1
     cf2:	91 05       	cpc	r25, r1
     cf4:	d1 f0       	breq	.+52     	; 0xd2a <DIO_enuSetPortDirection+0x64>
     cf6:	2c 81       	ldd	r18, Y+4	; 0x04
     cf8:	3d 81       	ldd	r19, Y+5	; 0x05
     cfa:	22 30       	cpi	r18, 0x02	; 2
     cfc:	31 05       	cpc	r19, r1
     cfe:	2c f4       	brge	.+10     	; 0xd0a <DIO_enuSetPortDirection+0x44>
     d00:	8c 81       	ldd	r24, Y+4	; 0x04
     d02:	9d 81       	ldd	r25, Y+5	; 0x05
     d04:	00 97       	sbiw	r24, 0x00	; 0
     d06:	61 f0       	breq	.+24     	; 0xd20 <DIO_enuSetPortDirection+0x5a>
     d08:	20 c0       	rjmp	.+64     	; 0xd4a <DIO_enuSetPortDirection+0x84>
     d0a:	2c 81       	ldd	r18, Y+4	; 0x04
     d0c:	3d 81       	ldd	r19, Y+5	; 0x05
     d0e:	22 30       	cpi	r18, 0x02	; 2
     d10:	31 05       	cpc	r19, r1
     d12:	81 f0       	breq	.+32     	; 0xd34 <DIO_enuSetPortDirection+0x6e>
     d14:	8c 81       	ldd	r24, Y+4	; 0x04
     d16:	9d 81       	ldd	r25, Y+5	; 0x05
     d18:	83 30       	cpi	r24, 0x03	; 3
     d1a:	91 05       	cpc	r25, r1
     d1c:	81 f0       	breq	.+32     	; 0xd3e <DIO_enuSetPortDirection+0x78>
     d1e:	15 c0       	rjmp	.+42     	; 0xd4a <DIO_enuSetPortDirection+0x84>
		{
			case DIO_u8PORTA: DDRA = port_direction; break;
     d20:	ea e3       	ldi	r30, 0x3A	; 58
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	8b 81       	ldd	r24, Y+3	; 0x03
     d26:	80 83       	st	Z, r24
     d28:	10 c0       	rjmp	.+32     	; 0xd4a <DIO_enuSetPortDirection+0x84>
			case DIO_u8PORTB: DDRB = port_direction; break;
     d2a:	e7 e3       	ldi	r30, 0x37	; 55
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	8b 81       	ldd	r24, Y+3	; 0x03
     d30:	80 83       	st	Z, r24
     d32:	0b c0       	rjmp	.+22     	; 0xd4a <DIO_enuSetPortDirection+0x84>
			case DIO_u8PORTC: DDRC = port_direction; break;
     d34:	e4 e3       	ldi	r30, 0x34	; 52
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
     d3a:	80 83       	st	Z, r24
     d3c:	06 c0       	rjmp	.+12     	; 0xd4a <DIO_enuSetPortDirection+0x84>
			case DIO_u8PORTD: DDRD = port_direction; break;
     d3e:	e1 e3       	ldi	r30, 0x31	; 49
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	80 83       	st	Z, r24
     d46:	01 c0       	rjmp	.+2      	; 0xd4a <DIO_enuSetPortDirection+0x84>
		}
	}
	else
	{
		ErrorState = ES_NOK;
     d48:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrorState;
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d4c:	0f 90       	pop	r0
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	cf 91       	pop	r28
     d58:	df 91       	pop	r29
     d5a:	08 95       	ret

00000d5c <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 port_name,u8 port_value)
{
     d5c:	df 93       	push	r29
     d5e:	cf 93       	push	r28
     d60:	00 d0       	rcall	.+0      	; 0xd62 <DIO_enuSetPortValue+0x6>
     d62:	00 d0       	rcall	.+0      	; 0xd64 <DIO_enuSetPortValue+0x8>
     d64:	0f 92       	push	r0
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
     d6a:	8a 83       	std	Y+2, r24	; 0x02
     d6c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t ErrorState = ES_OK;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	89 83       	std	Y+1, r24	; 0x01
	if((port_name <= DIO_u8PORTD))
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	98 f5       	brcc	.+102    	; 0xdde <DIO_enuSetPortValue+0x82>
	{
		switch(port_name)
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	28 2f       	mov	r18, r24
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	3d 83       	std	Y+5, r19	; 0x05
     d80:	2c 83       	std	Y+4, r18	; 0x04
     d82:	8c 81       	ldd	r24, Y+4	; 0x04
     d84:	9d 81       	ldd	r25, Y+5	; 0x05
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	91 05       	cpc	r25, r1
     d8a:	d1 f0       	breq	.+52     	; 0xdc0 <DIO_enuSetPortValue+0x64>
     d8c:	2c 81       	ldd	r18, Y+4	; 0x04
     d8e:	3d 81       	ldd	r19, Y+5	; 0x05
     d90:	22 30       	cpi	r18, 0x02	; 2
     d92:	31 05       	cpc	r19, r1
     d94:	2c f4       	brge	.+10     	; 0xda0 <DIO_enuSetPortValue+0x44>
     d96:	8c 81       	ldd	r24, Y+4	; 0x04
     d98:	9d 81       	ldd	r25, Y+5	; 0x05
     d9a:	00 97       	sbiw	r24, 0x00	; 0
     d9c:	61 f0       	breq	.+24     	; 0xdb6 <DIO_enuSetPortValue+0x5a>
     d9e:	20 c0       	rjmp	.+64     	; 0xde0 <DIO_enuSetPortValue+0x84>
     da0:	2c 81       	ldd	r18, Y+4	; 0x04
     da2:	3d 81       	ldd	r19, Y+5	; 0x05
     da4:	22 30       	cpi	r18, 0x02	; 2
     da6:	31 05       	cpc	r19, r1
     da8:	81 f0       	breq	.+32     	; 0xdca <DIO_enuSetPortValue+0x6e>
     daa:	8c 81       	ldd	r24, Y+4	; 0x04
     dac:	9d 81       	ldd	r25, Y+5	; 0x05
     dae:	83 30       	cpi	r24, 0x03	; 3
     db0:	91 05       	cpc	r25, r1
     db2:	81 f0       	breq	.+32     	; 0xdd4 <DIO_enuSetPortValue+0x78>
     db4:	15 c0       	rjmp	.+42     	; 0xde0 <DIO_enuSetPortValue+0x84>
		{
			case DIO_u8PORTA: PORTA = port_value; break;
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	80 83       	st	Z, r24
     dbe:	10 c0       	rjmp	.+32     	; 0xde0 <DIO_enuSetPortValue+0x84>
			case DIO_u8PORTB: PORTB = port_value; break;
     dc0:	e8 e3       	ldi	r30, 0x38	; 56
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	80 83       	st	Z, r24
     dc8:	0b c0       	rjmp	.+22     	; 0xde0 <DIO_enuSetPortValue+0x84>
			case DIO_u8PORTC: PORTC = port_value; break;
     dca:	e5 e3       	ldi	r30, 0x35	; 53
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	80 83       	st	Z, r24
     dd2:	06 c0       	rjmp	.+12     	; 0xde0 <DIO_enuSetPortValue+0x84>
			case DIO_u8PORTD: PORTD = port_value; break;
     dd4:	e2 e3       	ldi	r30, 0x32	; 50
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	8b 81       	ldd	r24, Y+3	; 0x03
     dda:	80 83       	st	Z, r24
     ddc:	01 c0       	rjmp	.+2      	; 0xde0 <DIO_enuSetPortValue+0x84>
		}
	}
	else
	{
		ErrorState = ES_NOK;
     dde:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrorState;
     de0:	89 81       	ldd	r24, Y+1	; 0x01
}
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	0f 90       	pop	r0
     dec:	cf 91       	pop	r28
     dee:	df 91       	pop	r29
     df0:	08 95       	ret

00000df2 <DIO_enuTogPort>:

ES_t DIO_enuTogPort(u8 port_name)
{
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	00 d0       	rcall	.+0      	; 0xdf8 <DIO_enuTogPort+0x6>
     df8:	00 d0       	rcall	.+0      	; 0xdfa <DIO_enuTogPort+0x8>
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	8a 83       	std	Y+2, r24	; 0x02
	ES_t ErrorState = ES_OK;
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	89 83       	std	Y+1, r24	; 0x01
	if((port_name <= DIO_u8PORTD))
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	84 30       	cpi	r24, 0x04	; 4
     e08:	08 f0       	brcs	.+2      	; 0xe0c <DIO_enuTogPort+0x1a>
     e0a:	3f c0       	rjmp	.+126    	; 0xe8a <DIO_enuTogPort+0x98>
	{
		switch(port_name)
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	3c 83       	std	Y+4, r19	; 0x04
     e14:	2b 83       	std	Y+3, r18	; 0x03
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	9c 81       	ldd	r25, Y+4	; 0x04
     e1a:	81 30       	cpi	r24, 0x01	; 1
     e1c:	91 05       	cpc	r25, r1
     e1e:	e9 f0       	breq	.+58     	; 0xe5a <DIO_enuTogPort+0x68>
     e20:	2b 81       	ldd	r18, Y+3	; 0x03
     e22:	3c 81       	ldd	r19, Y+4	; 0x04
     e24:	22 30       	cpi	r18, 0x02	; 2
     e26:	31 05       	cpc	r19, r1
     e28:	2c f4       	brge	.+10     	; 0xe34 <DIO_enuTogPort+0x42>
     e2a:	8b 81       	ldd	r24, Y+3	; 0x03
     e2c:	9c 81       	ldd	r25, Y+4	; 0x04
     e2e:	00 97       	sbiw	r24, 0x00	; 0
     e30:	61 f0       	breq	.+24     	; 0xe4a <DIO_enuTogPort+0x58>
     e32:	2c c0       	rjmp	.+88     	; 0xe8c <DIO_enuTogPort+0x9a>
     e34:	2b 81       	ldd	r18, Y+3	; 0x03
     e36:	3c 81       	ldd	r19, Y+4	; 0x04
     e38:	22 30       	cpi	r18, 0x02	; 2
     e3a:	31 05       	cpc	r19, r1
     e3c:	b1 f0       	breq	.+44     	; 0xe6a <DIO_enuTogPort+0x78>
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	9c 81       	ldd	r25, Y+4	; 0x04
     e42:	83 30       	cpi	r24, 0x03	; 3
     e44:	91 05       	cpc	r25, r1
     e46:	c9 f0       	breq	.+50     	; 0xe7a <DIO_enuTogPort+0x88>
     e48:	21 c0       	rjmp	.+66     	; 0xe8c <DIO_enuTogPort+0x9a>
		{
			case DIO_u8PORTA: PORTA = ~PORTA; break;
     e4a:	ab e3       	ldi	r26, 0x3B	; 59
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	eb e3       	ldi	r30, 0x3B	; 59
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	80 95       	com	r24
     e56:	8c 93       	st	X, r24
     e58:	19 c0       	rjmp	.+50     	; 0xe8c <DIO_enuTogPort+0x9a>
			case DIO_u8PORTB: PORTB = ~PORTB; break;
     e5a:	a8 e3       	ldi	r26, 0x38	; 56
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e8 e3       	ldi	r30, 0x38	; 56
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	80 95       	com	r24
     e66:	8c 93       	st	X, r24
     e68:	11 c0       	rjmp	.+34     	; 0xe8c <DIO_enuTogPort+0x9a>
			case DIO_u8PORTC: PORTC = ~PORTC; break;
     e6a:	a5 e3       	ldi	r26, 0x35	; 53
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e5 e3       	ldi	r30, 0x35	; 53
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	80 95       	com	r24
     e76:	8c 93       	st	X, r24
     e78:	09 c0       	rjmp	.+18     	; 0xe8c <DIO_enuTogPort+0x9a>
			case DIO_u8PORTD: PORTD = ~PORTD; break;
     e7a:	a2 e3       	ldi	r26, 0x32	; 50
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e2 e3       	ldi	r30, 0x32	; 50
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	80 95       	com	r24
     e86:	8c 93       	st	X, r24
     e88:	01 c0       	rjmp	.+2      	; 0xe8c <DIO_enuTogPort+0x9a>
		}
	}
	else
	{
		ErrorState = ES_NOK;
     e8a:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrorState;
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
}
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	cf 91       	pop	r28
     e98:	df 91       	pop	r29
     e9a:	08 95       	ret

00000e9c <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 port_name , u8 *port_value)
{
     e9c:	df 93       	push	r29
     e9e:	cf 93       	push	r28
     ea0:	00 d0       	rcall	.+0      	; 0xea2 <DIO_enuGetPortValue+0x6>
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <DIO_enuGetPortValue+0x8>
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <DIO_enuGetPortValue+0xa>
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	8a 83       	std	Y+2, r24	; 0x02
     eac:	7c 83       	std	Y+4, r23	; 0x04
     eae:	6b 83       	std	Y+3, r22	; 0x03
	ES_t ErrorState = ES_OK;
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	89 83       	std	Y+1, r24	; 0x01
	if((port_name <= DIO_u8PORTD) && (port_value != NULL))
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	08 f0       	brcs	.+2      	; 0xebc <DIO_enuGetPortValue+0x20>
     eba:	3f c0       	rjmp	.+126    	; 0xf3a <DIO_enuGetPortValue+0x9e>
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	9c 81       	ldd	r25, Y+4	; 0x04
     ec0:	00 97       	sbiw	r24, 0x00	; 0
     ec2:	d9 f1       	breq	.+118    	; 0xf3a <DIO_enuGetPortValue+0x9e>
	{
		switch(port_name)
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	3e 83       	std	Y+6, r19	; 0x06
     ecc:	2d 83       	std	Y+5, r18	; 0x05
     ece:	8d 81       	ldd	r24, Y+5	; 0x05
     ed0:	9e 81       	ldd	r25, Y+6	; 0x06
     ed2:	81 30       	cpi	r24, 0x01	; 1
     ed4:	91 05       	cpc	r25, r1
     ed6:	e1 f0       	breq	.+56     	; 0xf10 <DIO_enuGetPortValue+0x74>
     ed8:	2d 81       	ldd	r18, Y+5	; 0x05
     eda:	3e 81       	ldd	r19, Y+6	; 0x06
     edc:	22 30       	cpi	r18, 0x02	; 2
     ede:	31 05       	cpc	r19, r1
     ee0:	2c f4       	brge	.+10     	; 0xeec <DIO_enuGetPortValue+0x50>
     ee2:	8d 81       	ldd	r24, Y+5	; 0x05
     ee4:	9e 81       	ldd	r25, Y+6	; 0x06
     ee6:	00 97       	sbiw	r24, 0x00	; 0
     ee8:	61 f0       	breq	.+24     	; 0xf02 <DIO_enuGetPortValue+0x66>
     eea:	28 c0       	rjmp	.+80     	; 0xf3c <DIO_enuGetPortValue+0xa0>
     eec:	2d 81       	ldd	r18, Y+5	; 0x05
     eee:	3e 81       	ldd	r19, Y+6	; 0x06
     ef0:	22 30       	cpi	r18, 0x02	; 2
     ef2:	31 05       	cpc	r19, r1
     ef4:	a1 f0       	breq	.+40     	; 0xf1e <DIO_enuGetPortValue+0x82>
     ef6:	8d 81       	ldd	r24, Y+5	; 0x05
     ef8:	9e 81       	ldd	r25, Y+6	; 0x06
     efa:	83 30       	cpi	r24, 0x03	; 3
     efc:	91 05       	cpc	r25, r1
     efe:	b1 f0       	breq	.+44     	; 0xf2c <DIO_enuGetPortValue+0x90>
     f00:	1d c0       	rjmp	.+58     	; 0xf3c <DIO_enuGetPortValue+0xa0>
		{
			case DIO_u8PORTA: *port_value = PINA; break;
     f02:	e9 e3       	ldi	r30, 0x39	; 57
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	eb 81       	ldd	r30, Y+3	; 0x03
     f0a:	fc 81       	ldd	r31, Y+4	; 0x04
     f0c:	80 83       	st	Z, r24
     f0e:	16 c0       	rjmp	.+44     	; 0xf3c <DIO_enuGetPortValue+0xa0>
			case DIO_u8PORTB: *port_value = PINB; break;
     f10:	e6 e3       	ldi	r30, 0x36	; 54
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	eb 81       	ldd	r30, Y+3	; 0x03
     f18:	fc 81       	ldd	r31, Y+4	; 0x04
     f1a:	80 83       	st	Z, r24
     f1c:	0f c0       	rjmp	.+30     	; 0xf3c <DIO_enuGetPortValue+0xa0>
			case DIO_u8PORTC: *port_value = PINC; break;
     f1e:	e3 e3       	ldi	r30, 0x33	; 51
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	eb 81       	ldd	r30, Y+3	; 0x03
     f26:	fc 81       	ldd	r31, Y+4	; 0x04
     f28:	80 83       	st	Z, r24
     f2a:	08 c0       	rjmp	.+16     	; 0xf3c <DIO_enuGetPortValue+0xa0>
			case DIO_u8PORTD: *port_value = PIND; break;
     f2c:	e0 e3       	ldi	r30, 0x30	; 48
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	eb 81       	ldd	r30, Y+3	; 0x03
     f34:	fc 81       	ldd	r31, Y+4	; 0x04
     f36:	80 83       	st	Z, r24
     f38:	01 c0       	rjmp	.+2      	; 0xf3c <DIO_enuGetPortValue+0xa0>
		}
	}
	else
	{
		ErrorState = ES_NOK;
     f3a:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrorState;
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f3e:	26 96       	adiw	r28, 0x06	; 6
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	f8 94       	cli
     f44:	de bf       	out	0x3e, r29	; 62
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	cd bf       	out	0x3d, r28	; 61
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	08 95       	ret

00000f50 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 port_name,u8 pin_number,u8 pin_direction)
{
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	28 97       	sbiw	r28, 0x08	; 8
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	f8 94       	cli
     f5e:	de bf       	out	0x3e, r29	; 62
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	cd bf       	out	0x3d, r28	; 61
     f64:	8a 83       	std	Y+2, r24	; 0x02
     f66:	6b 83       	std	Y+3, r22	; 0x03
     f68:	4c 83       	std	Y+4, r20	; 0x04
	ES_t ErrorState = ES_OK;
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	89 83       	std	Y+1, r24	; 0x01
	if((port_name <= DIO_u8PORTD) && (pin_number <= DIO_u8PIN7) && (pin_direction <= DIO_u8OUTPUT))
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	84 30       	cpi	r24, 0x04	; 4
     f72:	08 f0       	brcs	.+2      	; 0xf76 <DIO_enuSetPinDirection+0x26>
     f74:	f3 c0       	rjmp	.+486    	; 0x115c <DIO_enuSetPinDirection+0x20c>
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	88 30       	cpi	r24, 0x08	; 8
     f7a:	08 f0       	brcs	.+2      	; 0xf7e <DIO_enuSetPinDirection+0x2e>
     f7c:	ef c0       	rjmp	.+478    	; 0x115c <DIO_enuSetPinDirection+0x20c>
     f7e:	8c 81       	ldd	r24, Y+4	; 0x04
     f80:	82 30       	cpi	r24, 0x02	; 2
     f82:	08 f0       	brcs	.+2      	; 0xf86 <DIO_enuSetPinDirection+0x36>
     f84:	eb c0       	rjmp	.+470    	; 0x115c <DIO_enuSetPinDirection+0x20c>
	{
		if(pin_direction == DIO_u8INPUT)
     f86:	8c 81       	ldd	r24, Y+4	; 0x04
     f88:	88 23       	and	r24, r24
     f8a:	09 f0       	breq	.+2      	; 0xf8e <DIO_enuSetPinDirection+0x3e>
     f8c:	74 c0       	rjmp	.+232    	; 0x1076 <DIO_enuSetPinDirection+0x126>
		{
			switch(port_name)
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	38 87       	std	Y+8, r19	; 0x08
     f96:	2f 83       	std	Y+7, r18	; 0x07
     f98:	8f 81       	ldd	r24, Y+7	; 0x07
     f9a:	98 85       	ldd	r25, Y+8	; 0x08
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	91 05       	cpc	r25, r1
     fa0:	59 f1       	breq	.+86     	; 0xff8 <DIO_enuSetPinDirection+0xa8>
     fa2:	2f 81       	ldd	r18, Y+7	; 0x07
     fa4:	38 85       	ldd	r19, Y+8	; 0x08
     fa6:	22 30       	cpi	r18, 0x02	; 2
     fa8:	31 05       	cpc	r19, r1
     faa:	2c f4       	brge	.+10     	; 0xfb6 <DIO_enuSetPinDirection+0x66>
     fac:	8f 81       	ldd	r24, Y+7	; 0x07
     fae:	98 85       	ldd	r25, Y+8	; 0x08
     fb0:	00 97       	sbiw	r24, 0x00	; 0
     fb2:	69 f0       	breq	.+26     	; 0xfce <DIO_enuSetPinDirection+0x7e>
     fb4:	d4 c0       	rjmp	.+424    	; 0x115e <DIO_enuSetPinDirection+0x20e>
     fb6:	2f 81       	ldd	r18, Y+7	; 0x07
     fb8:	38 85       	ldd	r19, Y+8	; 0x08
     fba:	22 30       	cpi	r18, 0x02	; 2
     fbc:	31 05       	cpc	r19, r1
     fbe:	89 f1       	breq	.+98     	; 0x1022 <DIO_enuSetPinDirection+0xd2>
     fc0:	8f 81       	ldd	r24, Y+7	; 0x07
     fc2:	98 85       	ldd	r25, Y+8	; 0x08
     fc4:	83 30       	cpi	r24, 0x03	; 3
     fc6:	91 05       	cpc	r25, r1
     fc8:	09 f4       	brne	.+2      	; 0xfcc <DIO_enuSetPinDirection+0x7c>
     fca:	40 c0       	rjmp	.+128    	; 0x104c <DIO_enuSetPinDirection+0xfc>
     fcc:	c8 c0       	rjmp	.+400    	; 0x115e <DIO_enuSetPinDirection+0x20e>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA , pin_number); break;
     fce:	aa e3       	ldi	r26, 0x3A	; 58
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	ea e3       	ldi	r30, 0x3A	; 58
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <DIO_enuSetPinDirection+0x9c>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <DIO_enuSetPinDirection+0x98>
     ff0:	80 95       	com	r24
     ff2:	84 23       	and	r24, r20
     ff4:	8c 93       	st	X, r24
     ff6:	b3 c0       	rjmp	.+358    	; 0x115e <DIO_enuSetPinDirection+0x20e>
			case DIO_u8PORTB: CLR_BIT(DDRB , pin_number); break;
     ff8:	a7 e3       	ldi	r26, 0x37	; 55
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e7 e3       	ldi	r30, 0x37	; 55
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	48 2f       	mov	r20, r24
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 2e       	mov	r0, r18
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <DIO_enuSetPinDirection+0xc6>
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	0a 94       	dec	r0
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <DIO_enuSetPinDirection+0xc2>
    101a:	80 95       	com	r24
    101c:	84 23       	and	r24, r20
    101e:	8c 93       	st	X, r24
    1020:	9e c0       	rjmp	.+316    	; 0x115e <DIO_enuSetPinDirection+0x20e>
			case DIO_u8PORTC: CLR_BIT(DDRC , pin_number); break;
    1022:	a4 e3       	ldi	r26, 0x34	; 52
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e4 e3       	ldi	r30, 0x34	; 52
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	48 2f       	mov	r20, r24
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 2e       	mov	r0, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <DIO_enuSetPinDirection+0xf0>
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	0a 94       	dec	r0
    1042:	e2 f7       	brpl	.-8      	; 0x103c <DIO_enuSetPinDirection+0xec>
    1044:	80 95       	com	r24
    1046:	84 23       	and	r24, r20
    1048:	8c 93       	st	X, r24
    104a:	89 c0       	rjmp	.+274    	; 0x115e <DIO_enuSetPinDirection+0x20e>
			case DIO_u8PORTD: CLR_BIT(DDRD , pin_number); break;
    104c:	a1 e3       	ldi	r26, 0x31	; 49
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e1 e3       	ldi	r30, 0x31	; 49
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	48 2f       	mov	r20, r24
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 2e       	mov	r0, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DIO_enuSetPinDirection+0x11a>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	0a 94       	dec	r0
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <DIO_enuSetPinDirection+0x116>
    106e:	80 95       	com	r24
    1070:	84 23       	and	r24, r20
    1072:	8c 93       	st	X, r24
    1074:	74 c0       	rjmp	.+232    	; 0x115e <DIO_enuSetPinDirection+0x20e>
			}
		}
		else if(pin_direction == DIO_u8OUTPUT)
    1076:	8c 81       	ldd	r24, Y+4	; 0x04
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	09 f0       	breq	.+2      	; 0x107e <DIO_enuSetPinDirection+0x12e>
    107c:	70 c0       	rjmp	.+224    	; 0x115e <DIO_enuSetPinDirection+0x20e>
		{
			switch(port_name)
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	3e 83       	std	Y+6, r19	; 0x06
    1086:	2d 83       	std	Y+5, r18	; 0x05
    1088:	8d 81       	ldd	r24, Y+5	; 0x05
    108a:	9e 81       	ldd	r25, Y+6	; 0x06
    108c:	81 30       	cpi	r24, 0x01	; 1
    108e:	91 05       	cpc	r25, r1
    1090:	49 f1       	breq	.+82     	; 0x10e4 <DIO_enuSetPinDirection+0x194>
    1092:	2d 81       	ldd	r18, Y+5	; 0x05
    1094:	3e 81       	ldd	r19, Y+6	; 0x06
    1096:	22 30       	cpi	r18, 0x02	; 2
    1098:	31 05       	cpc	r19, r1
    109a:	2c f4       	brge	.+10     	; 0x10a6 <DIO_enuSetPinDirection+0x156>
    109c:	8d 81       	ldd	r24, Y+5	; 0x05
    109e:	9e 81       	ldd	r25, Y+6	; 0x06
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	61 f0       	breq	.+24     	; 0x10bc <DIO_enuSetPinDirection+0x16c>
    10a4:	5c c0       	rjmp	.+184    	; 0x115e <DIO_enuSetPinDirection+0x20e>
    10a6:	2d 81       	ldd	r18, Y+5	; 0x05
    10a8:	3e 81       	ldd	r19, Y+6	; 0x06
    10aa:	22 30       	cpi	r18, 0x02	; 2
    10ac:	31 05       	cpc	r19, r1
    10ae:	71 f1       	breq	.+92     	; 0x110c <DIO_enuSetPinDirection+0x1bc>
    10b0:	8d 81       	ldd	r24, Y+5	; 0x05
    10b2:	9e 81       	ldd	r25, Y+6	; 0x06
    10b4:	83 30       	cpi	r24, 0x03	; 3
    10b6:	91 05       	cpc	r25, r1
    10b8:	e9 f1       	breq	.+122    	; 0x1134 <DIO_enuSetPinDirection+0x1e4>
    10ba:	51 c0       	rjmp	.+162    	; 0x115e <DIO_enuSetPinDirection+0x20e>
			{
			case DIO_u8PORTA: SET_BIT(DDRA , pin_number); break;
    10bc:	aa e3       	ldi	r26, 0x3A	; 58
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	ea e3       	ldi	r30, 0x3A	; 58
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <DIO_enuSetPinDirection+0x18a>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <DIO_enuSetPinDirection+0x186>
    10de:	84 2b       	or	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	3d c0       	rjmp	.+122    	; 0x115e <DIO_enuSetPinDirection+0x20e>
			case DIO_u8PORTB: SET_BIT(DDRB , pin_number); break;
    10e4:	a7 e3       	ldi	r26, 0x37	; 55
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e7 e3       	ldi	r30, 0x37	; 55
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_enuSetPinDirection+0x1b2>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_enuSetPinDirection+0x1ae>
    1106:	84 2b       	or	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	29 c0       	rjmp	.+82     	; 0x115e <DIO_enuSetPinDirection+0x20e>
			case DIO_u8PORTC: SET_BIT(DDRC , pin_number); break;
    110c:	a4 e3       	ldi	r26, 0x34	; 52
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e4 e3       	ldi	r30, 0x34	; 52
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_enuSetPinDirection+0x1da>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <DIO_enuSetPinDirection+0x1d6>
    112e:	84 2b       	or	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	15 c0       	rjmp	.+42     	; 0x115e <DIO_enuSetPinDirection+0x20e>
			case DIO_u8PORTD: SET_BIT(DDRD , pin_number); break;
    1134:	a1 e3       	ldi	r26, 0x31	; 49
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e1 e3       	ldi	r30, 0x31	; 49
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 2e       	mov	r0, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <DIO_enuSetPinDirection+0x202>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <DIO_enuSetPinDirection+0x1fe>
    1156:	84 2b       	or	r24, r20
    1158:	8c 93       	st	X, r24
    115a:	01 c0       	rjmp	.+2      	; 0x115e <DIO_enuSetPinDirection+0x20e>
			}
		}
	}
	else
	{
		ErrorState = ES_NOK;
    115c:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrorState;
    115e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1160:	28 96       	adiw	r28, 0x08	; 8
    1162:	0f b6       	in	r0, 0x3f	; 63
    1164:	f8 94       	cli
    1166:	de bf       	out	0x3e, r29	; 62
    1168:	0f be       	out	0x3f, r0	; 63
    116a:	cd bf       	out	0x3d, r28	; 61
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 port_name,u8 pin_number, u8 pin_value)
{
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	28 97       	sbiw	r28, 0x08	; 8
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	cd bf       	out	0x3d, r28	; 61
    1186:	8a 83       	std	Y+2, r24	; 0x02
    1188:	6b 83       	std	Y+3, r22	; 0x03
    118a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t ErrorState = ES_OK;
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	89 83       	std	Y+1, r24	; 0x01
	if((port_name <= DIO_u8PORTD) && (pin_number <= DIO_u8PIN7) && (pin_value <= DIO_u8HIGH))
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	84 30       	cpi	r24, 0x04	; 4
    1194:	08 f0       	brcs	.+2      	; 0x1198 <DIO_enuSetPinValue+0x26>
    1196:	ef c0       	rjmp	.+478    	; 0x1376 <DIO_enuSetPinValue+0x204>
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	88 30       	cpi	r24, 0x08	; 8
    119c:	08 f0       	brcs	.+2      	; 0x11a0 <DIO_enuSetPinValue+0x2e>
    119e:	eb c0       	rjmp	.+470    	; 0x1376 <DIO_enuSetPinValue+0x204>
    11a0:	8c 81       	ldd	r24, Y+4	; 0x04
    11a2:	82 30       	cpi	r24, 0x02	; 2
    11a4:	08 f0       	brcs	.+2      	; 0x11a8 <DIO_enuSetPinValue+0x36>
    11a6:	e7 c0       	rjmp	.+462    	; 0x1376 <DIO_enuSetPinValue+0x204>
	{
		if(pin_value == DIO_u8LOW)
    11a8:	8c 81       	ldd	r24, Y+4	; 0x04
    11aa:	88 23       	and	r24, r24
    11ac:	09 f0       	breq	.+2      	; 0x11b0 <DIO_enuSetPinValue+0x3e>
    11ae:	74 c0       	rjmp	.+232    	; 0x1298 <DIO_enuSetPinValue+0x126>
		{
			switch(port_name)
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	38 87       	std	Y+8, r19	; 0x08
    11b8:	2f 83       	std	Y+7, r18	; 0x07
    11ba:	8f 81       	ldd	r24, Y+7	; 0x07
    11bc:	98 85       	ldd	r25, Y+8	; 0x08
    11be:	81 30       	cpi	r24, 0x01	; 1
    11c0:	91 05       	cpc	r25, r1
    11c2:	59 f1       	breq	.+86     	; 0x121a <DIO_enuSetPinValue+0xa8>
    11c4:	2f 81       	ldd	r18, Y+7	; 0x07
    11c6:	38 85       	ldd	r19, Y+8	; 0x08
    11c8:	22 30       	cpi	r18, 0x02	; 2
    11ca:	31 05       	cpc	r19, r1
    11cc:	2c f4       	brge	.+10     	; 0x11d8 <DIO_enuSetPinValue+0x66>
    11ce:	8f 81       	ldd	r24, Y+7	; 0x07
    11d0:	98 85       	ldd	r25, Y+8	; 0x08
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	69 f0       	breq	.+26     	; 0x11f0 <DIO_enuSetPinValue+0x7e>
    11d6:	d0 c0       	rjmp	.+416    	; 0x1378 <DIO_enuSetPinValue+0x206>
    11d8:	2f 81       	ldd	r18, Y+7	; 0x07
    11da:	38 85       	ldd	r19, Y+8	; 0x08
    11dc:	22 30       	cpi	r18, 0x02	; 2
    11de:	31 05       	cpc	r19, r1
    11e0:	89 f1       	breq	.+98     	; 0x1244 <DIO_enuSetPinValue+0xd2>
    11e2:	8f 81       	ldd	r24, Y+7	; 0x07
    11e4:	98 85       	ldd	r25, Y+8	; 0x08
    11e6:	83 30       	cpi	r24, 0x03	; 3
    11e8:	91 05       	cpc	r25, r1
    11ea:	09 f4       	brne	.+2      	; 0x11ee <DIO_enuSetPinValue+0x7c>
    11ec:	40 c0       	rjmp	.+128    	; 0x126e <DIO_enuSetPinValue+0xfc>
    11ee:	c4 c0       	rjmp	.+392    	; 0x1378 <DIO_enuSetPinValue+0x206>
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,pin_number); break;
    11f0:	ab e3       	ldi	r26, 0x3B	; 59
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	eb e3       	ldi	r30, 0x3B	; 59
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	48 2f       	mov	r20, r24
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	02 2e       	mov	r0, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <DIO_enuSetPinValue+0x9c>
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	0a 94       	dec	r0
    1210:	e2 f7       	brpl	.-8      	; 0x120a <DIO_enuSetPinValue+0x98>
    1212:	80 95       	com	r24
    1214:	84 23       	and	r24, r20
    1216:	8c 93       	st	X, r24
    1218:	af c0       	rjmp	.+350    	; 0x1378 <DIO_enuSetPinValue+0x206>
				case DIO_u8PORTB: CLR_BIT(PORTB,pin_number); break;
    121a:	a8 e3       	ldi	r26, 0x38	; 56
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e8 e3       	ldi	r30, 0x38	; 56
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	48 2f       	mov	r20, r24
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 2e       	mov	r0, r18
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <DIO_enuSetPinValue+0xc6>
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	0a 94       	dec	r0
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <DIO_enuSetPinValue+0xc2>
    123c:	80 95       	com	r24
    123e:	84 23       	and	r24, r20
    1240:	8c 93       	st	X, r24
    1242:	9a c0       	rjmp	.+308    	; 0x1378 <DIO_enuSetPinValue+0x206>
				case DIO_u8PORTC: CLR_BIT(PORTC,pin_number); break;
    1244:	a5 e3       	ldi	r26, 0x35	; 53
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e5 e3       	ldi	r30, 0x35	; 53
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	48 2f       	mov	r20, r24
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 2e       	mov	r0, r18
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <DIO_enuSetPinValue+0xf0>
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	0a 94       	dec	r0
    1264:	e2 f7       	brpl	.-8      	; 0x125e <DIO_enuSetPinValue+0xec>
    1266:	80 95       	com	r24
    1268:	84 23       	and	r24, r20
    126a:	8c 93       	st	X, r24
    126c:	85 c0       	rjmp	.+266    	; 0x1378 <DIO_enuSetPinValue+0x206>
				case DIO_u8PORTD: CLR_BIT(PORTD,pin_number); break;
    126e:	a2 e3       	ldi	r26, 0x32	; 50
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e2 e3       	ldi	r30, 0x32	; 50
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	48 2f       	mov	r20, r24
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	02 2e       	mov	r0, r18
    1286:	02 c0       	rjmp	.+4      	; 0x128c <DIO_enuSetPinValue+0x11a>
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	0a 94       	dec	r0
    128e:	e2 f7       	brpl	.-8      	; 0x1288 <DIO_enuSetPinValue+0x116>
    1290:	80 95       	com	r24
    1292:	84 23       	and	r24, r20
    1294:	8c 93       	st	X, r24
    1296:	70 c0       	rjmp	.+224    	; 0x1378 <DIO_enuSetPinValue+0x206>
			}
		}
		else
		{
			switch(port_name)
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	3e 83       	std	Y+6, r19	; 0x06
    12a0:	2d 83       	std	Y+5, r18	; 0x05
    12a2:	8d 81       	ldd	r24, Y+5	; 0x05
    12a4:	9e 81       	ldd	r25, Y+6	; 0x06
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	91 05       	cpc	r25, r1
    12aa:	49 f1       	breq	.+82     	; 0x12fe <DIO_enuSetPinValue+0x18c>
    12ac:	2d 81       	ldd	r18, Y+5	; 0x05
    12ae:	3e 81       	ldd	r19, Y+6	; 0x06
    12b0:	22 30       	cpi	r18, 0x02	; 2
    12b2:	31 05       	cpc	r19, r1
    12b4:	2c f4       	brge	.+10     	; 0x12c0 <DIO_enuSetPinValue+0x14e>
    12b6:	8d 81       	ldd	r24, Y+5	; 0x05
    12b8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ba:	00 97       	sbiw	r24, 0x00	; 0
    12bc:	61 f0       	breq	.+24     	; 0x12d6 <DIO_enuSetPinValue+0x164>
    12be:	5c c0       	rjmp	.+184    	; 0x1378 <DIO_enuSetPinValue+0x206>
    12c0:	2d 81       	ldd	r18, Y+5	; 0x05
    12c2:	3e 81       	ldd	r19, Y+6	; 0x06
    12c4:	22 30       	cpi	r18, 0x02	; 2
    12c6:	31 05       	cpc	r19, r1
    12c8:	71 f1       	breq	.+92     	; 0x1326 <DIO_enuSetPinValue+0x1b4>
    12ca:	8d 81       	ldd	r24, Y+5	; 0x05
    12cc:	9e 81       	ldd	r25, Y+6	; 0x06
    12ce:	83 30       	cpi	r24, 0x03	; 3
    12d0:	91 05       	cpc	r25, r1
    12d2:	e9 f1       	breq	.+122    	; 0x134e <DIO_enuSetPinValue+0x1dc>
    12d4:	51 c0       	rjmp	.+162    	; 0x1378 <DIO_enuSetPinValue+0x206>
			{
				case DIO_u8PORTA: SET_BIT(PORTA,pin_number); break;
    12d6:	ab e3       	ldi	r26, 0x3B	; 59
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	eb e3       	ldi	r30, 0x3B	; 59
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	48 2f       	mov	r20, r24
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	02 2e       	mov	r0, r18
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <DIO_enuSetPinValue+0x182>
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	0a 94       	dec	r0
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <DIO_enuSetPinValue+0x17e>
    12f8:	84 2b       	or	r24, r20
    12fa:	8c 93       	st	X, r24
    12fc:	3d c0       	rjmp	.+122    	; 0x1378 <DIO_enuSetPinValue+0x206>
				case DIO_u8PORTB: SET_BIT(PORTB,pin_number); break;
    12fe:	a8 e3       	ldi	r26, 0x38	; 56
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e8 e3       	ldi	r30, 0x38	; 56
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	48 2f       	mov	r20, r24
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	02 2e       	mov	r0, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <DIO_enuSetPinValue+0x1aa>
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	0a 94       	dec	r0
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <DIO_enuSetPinValue+0x1a6>
    1320:	84 2b       	or	r24, r20
    1322:	8c 93       	st	X, r24
    1324:	29 c0       	rjmp	.+82     	; 0x1378 <DIO_enuSetPinValue+0x206>
				case DIO_u8PORTC: SET_BIT(PORTC,pin_number); break;
    1326:	a5 e3       	ldi	r26, 0x35	; 53
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e5 e3       	ldi	r30, 0x35	; 53
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	48 2f       	mov	r20, r24
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	02 2e       	mov	r0, r18
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <DIO_enuSetPinValue+0x1d2>
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	0a 94       	dec	r0
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <DIO_enuSetPinValue+0x1ce>
    1348:	84 2b       	or	r24, r20
    134a:	8c 93       	st	X, r24
    134c:	15 c0       	rjmp	.+42     	; 0x1378 <DIO_enuSetPinValue+0x206>
				case DIO_u8PORTD: SET_BIT(PORTD,pin_number); break;
    134e:	a2 e3       	ldi	r26, 0x32	; 50
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e2 e3       	ldi	r30, 0x32	; 50
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	48 2f       	mov	r20, r24
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	02 2e       	mov	r0, r18
    1366:	02 c0       	rjmp	.+4      	; 0x136c <DIO_enuSetPinValue+0x1fa>
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	0a 94       	dec	r0
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <DIO_enuSetPinValue+0x1f6>
    1370:	84 2b       	or	r24, r20
    1372:	8c 93       	st	X, r24
    1374:	01 c0       	rjmp	.+2      	; 0x1378 <DIO_enuSetPinValue+0x206>
			}
		}
	}
	else
	{
		ErrorState = ES_NOK;
    1376:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrorState;
    1378:	89 81       	ldd	r24, Y+1	; 0x01
}
    137a:	28 96       	adiw	r28, 0x08	; 8
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	f8 94       	cli
    1380:	de bf       	out	0x3e, r29	; 62
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	cd bf       	out	0x3d, r28	; 61
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <DIO_enuTogPin>:

ES_t DIO_enuTogPin(u8 port_name , u8 pin_number)
{
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	00 d0       	rcall	.+0      	; 0x1392 <DIO_enuTogPin+0x6>
    1392:	00 d0       	rcall	.+0      	; 0x1394 <DIO_enuTogPin+0x8>
    1394:	0f 92       	push	r0
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	8a 83       	std	Y+2, r24	; 0x02
    139c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t ErrorState = ES_OK;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	89 83       	std	Y+1, r24	; 0x01
	if((port_name <= DIO_u8PORTD) && (pin_number <= DIO_u8PIN7))
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	84 30       	cpi	r24, 0x04	; 4
    13a6:	08 f0       	brcs	.+2      	; 0x13aa <DIO_enuTogPin+0x1e>
    13a8:	73 c0       	rjmp	.+230    	; 0x1490 <DIO_enuTogPin+0x104>
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	88 30       	cpi	r24, 0x08	; 8
    13ae:	08 f0       	brcs	.+2      	; 0x13b2 <DIO_enuTogPin+0x26>
    13b0:	6f c0       	rjmp	.+222    	; 0x1490 <DIO_enuTogPin+0x104>
	{
		switch(port_name)
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	3d 83       	std	Y+5, r19	; 0x05
    13ba:	2c 83       	std	Y+4, r18	; 0x04
    13bc:	8c 81       	ldd	r24, Y+4	; 0x04
    13be:	9d 81       	ldd	r25, Y+5	; 0x05
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	91 05       	cpc	r25, r1
    13c4:	49 f1       	breq	.+82     	; 0x1418 <DIO_enuTogPin+0x8c>
    13c6:	2c 81       	ldd	r18, Y+4	; 0x04
    13c8:	3d 81       	ldd	r19, Y+5	; 0x05
    13ca:	22 30       	cpi	r18, 0x02	; 2
    13cc:	31 05       	cpc	r19, r1
    13ce:	2c f4       	brge	.+10     	; 0x13da <DIO_enuTogPin+0x4e>
    13d0:	8c 81       	ldd	r24, Y+4	; 0x04
    13d2:	9d 81       	ldd	r25, Y+5	; 0x05
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	61 f0       	breq	.+24     	; 0x13f0 <DIO_enuTogPin+0x64>
    13d8:	5c c0       	rjmp	.+184    	; 0x1492 <DIO_enuTogPin+0x106>
    13da:	2c 81       	ldd	r18, Y+4	; 0x04
    13dc:	3d 81       	ldd	r19, Y+5	; 0x05
    13de:	22 30       	cpi	r18, 0x02	; 2
    13e0:	31 05       	cpc	r19, r1
    13e2:	71 f1       	breq	.+92     	; 0x1440 <DIO_enuTogPin+0xb4>
    13e4:	8c 81       	ldd	r24, Y+4	; 0x04
    13e6:	9d 81       	ldd	r25, Y+5	; 0x05
    13e8:	83 30       	cpi	r24, 0x03	; 3
    13ea:	91 05       	cpc	r25, r1
    13ec:	e9 f1       	breq	.+122    	; 0x1468 <DIO_enuTogPin+0xdc>
    13ee:	51 c0       	rjmp	.+162    	; 0x1492 <DIO_enuTogPin+0x106>
		{
			case DIO_u8PORTA: TOG_BIT(PORTA,pin_number); break;
    13f0:	ab e3       	ldi	r26, 0x3B	; 59
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	eb e3       	ldi	r30, 0x3B	; 59
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	48 2f       	mov	r20, r24
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	02 2e       	mov	r0, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <DIO_enuTogPin+0x82>
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	0a 94       	dec	r0
    1410:	e2 f7       	brpl	.-8      	; 0x140a <DIO_enuTogPin+0x7e>
    1412:	84 27       	eor	r24, r20
    1414:	8c 93       	st	X, r24
    1416:	3d c0       	rjmp	.+122    	; 0x1492 <DIO_enuTogPin+0x106>
			case DIO_u8PORTB: TOG_BIT(PORTB,pin_number); break;
    1418:	a8 e3       	ldi	r26, 0x38	; 56
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e8 e3       	ldi	r30, 0x38	; 56
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	48 2f       	mov	r20, r24
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 2e       	mov	r0, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <DIO_enuTogPin+0xaa>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <DIO_enuTogPin+0xa6>
    143a:	84 27       	eor	r24, r20
    143c:	8c 93       	st	X, r24
    143e:	29 c0       	rjmp	.+82     	; 0x1492 <DIO_enuTogPin+0x106>
			case DIO_u8PORTC: TOG_BIT(PORTC,pin_number); break;
    1440:	a5 e3       	ldi	r26, 0x35	; 53
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e5 e3       	ldi	r30, 0x35	; 53
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	48 2f       	mov	r20, r24
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	02 2e       	mov	r0, r18
    1458:	02 c0       	rjmp	.+4      	; 0x145e <DIO_enuTogPin+0xd2>
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	0a 94       	dec	r0
    1460:	e2 f7       	brpl	.-8      	; 0x145a <DIO_enuTogPin+0xce>
    1462:	84 27       	eor	r24, r20
    1464:	8c 93       	st	X, r24
    1466:	15 c0       	rjmp	.+42     	; 0x1492 <DIO_enuTogPin+0x106>
			case DIO_u8PORTD: TOG_BIT(PORTD,pin_number); break;
    1468:	a2 e3       	ldi	r26, 0x32	; 50
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e2 e3       	ldi	r30, 0x32	; 50
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	48 2f       	mov	r20, r24
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 2e       	mov	r0, r18
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <DIO_enuTogPin+0xfa>
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	0a 94       	dec	r0
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <DIO_enuTogPin+0xf6>
    148a:	84 27       	eor	r24, r20
    148c:	8c 93       	st	X, r24
    148e:	01 c0       	rjmp	.+2      	; 0x1492 <DIO_enuTogPin+0x106>
		}
	}
	else
	{
		ErrorState = ES_NOK;
    1490:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrorState;
    1492:	89 81       	ldd	r24, Y+1	; 0x01
}
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 port_name , u8 pin_number , u8 *pin_value)
{
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	27 97       	sbiw	r28, 0x07	; 7
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	de bf       	out	0x3e, r29	; 62
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	cd bf       	out	0x3d, r28	; 61
    14b8:	8a 83       	std	Y+2, r24	; 0x02
    14ba:	6b 83       	std	Y+3, r22	; 0x03
    14bc:	5d 83       	std	Y+5, r21	; 0x05
    14be:	4c 83       	std	Y+4, r20	; 0x04
	ES_t ErrorState = ES_OK;
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	89 83       	std	Y+1, r24	; 0x01
	if((port_name <= DIO_u8PORTD) && (pin_number <= DIO_u8PIN7))
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	84 30       	cpi	r24, 0x04	; 4
    14c8:	08 f0       	brcs	.+2      	; 0x14cc <DIO_enuGetPinValue+0x28>
    14ca:	75 c0       	rjmp	.+234    	; 0x15b6 <DIO_enuGetPinValue+0x112>
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	88 30       	cpi	r24, 0x08	; 8
    14d0:	08 f0       	brcs	.+2      	; 0x14d4 <DIO_enuGetPinValue+0x30>
    14d2:	71 c0       	rjmp	.+226    	; 0x15b6 <DIO_enuGetPinValue+0x112>
	{
		switch(port_name)
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	3f 83       	std	Y+7, r19	; 0x07
    14dc:	2e 83       	std	Y+6, r18	; 0x06
    14de:	4e 81       	ldd	r20, Y+6	; 0x06
    14e0:	5f 81       	ldd	r21, Y+7	; 0x07
    14e2:	41 30       	cpi	r20, 0x01	; 1
    14e4:	51 05       	cpc	r21, r1
    14e6:	59 f1       	breq	.+86     	; 0x153e <DIO_enuGetPinValue+0x9a>
    14e8:	8e 81       	ldd	r24, Y+6	; 0x06
    14ea:	9f 81       	ldd	r25, Y+7	; 0x07
    14ec:	82 30       	cpi	r24, 0x02	; 2
    14ee:	91 05       	cpc	r25, r1
    14f0:	34 f4       	brge	.+12     	; 0x14fe <DIO_enuGetPinValue+0x5a>
    14f2:	2e 81       	ldd	r18, Y+6	; 0x06
    14f4:	3f 81       	ldd	r19, Y+7	; 0x07
    14f6:	21 15       	cp	r18, r1
    14f8:	31 05       	cpc	r19, r1
    14fa:	69 f0       	breq	.+26     	; 0x1516 <DIO_enuGetPinValue+0x72>
    14fc:	5d c0       	rjmp	.+186    	; 0x15b8 <DIO_enuGetPinValue+0x114>
    14fe:	4e 81       	ldd	r20, Y+6	; 0x06
    1500:	5f 81       	ldd	r21, Y+7	; 0x07
    1502:	42 30       	cpi	r20, 0x02	; 2
    1504:	51 05       	cpc	r21, r1
    1506:	79 f1       	breq	.+94     	; 0x1566 <DIO_enuGetPinValue+0xc2>
    1508:	8e 81       	ldd	r24, Y+6	; 0x06
    150a:	9f 81       	ldd	r25, Y+7	; 0x07
    150c:	83 30       	cpi	r24, 0x03	; 3
    150e:	91 05       	cpc	r25, r1
    1510:	09 f4       	brne	.+2      	; 0x1514 <DIO_enuGetPinValue+0x70>
    1512:	3d c0       	rjmp	.+122    	; 0x158e <DIO_enuGetPinValue+0xea>
    1514:	51 c0       	rjmp	.+162    	; 0x15b8 <DIO_enuGetPinValue+0x114>
		{
			case DIO_u8PORTA: *pin_value = GET_BIT(PINA,pin_number); break;
    1516:	e9 e3       	ldi	r30, 0x39	; 57
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	88 2f       	mov	r24, r24
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	a9 01       	movw	r20, r18
    1528:	02 c0       	rjmp	.+4      	; 0x152e <DIO_enuGetPinValue+0x8a>
    152a:	55 95       	asr	r21
    152c:	47 95       	ror	r20
    152e:	8a 95       	dec	r24
    1530:	e2 f7       	brpl	.-8      	; 0x152a <DIO_enuGetPinValue+0x86>
    1532:	ca 01       	movw	r24, r20
    1534:	81 70       	andi	r24, 0x01	; 1
    1536:	ec 81       	ldd	r30, Y+4	; 0x04
    1538:	fd 81       	ldd	r31, Y+5	; 0x05
    153a:	80 83       	st	Z, r24
    153c:	3d c0       	rjmp	.+122    	; 0x15b8 <DIO_enuGetPinValue+0x114>
			case DIO_u8PORTB: *pin_value = GET_BIT(PINB,pin_number); break;
    153e:	e6 e3       	ldi	r30, 0x36	; 54
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	88 2f       	mov	r24, r24
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	a9 01       	movw	r20, r18
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <DIO_enuGetPinValue+0xb2>
    1552:	55 95       	asr	r21
    1554:	47 95       	ror	r20
    1556:	8a 95       	dec	r24
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <DIO_enuGetPinValue+0xae>
    155a:	ca 01       	movw	r24, r20
    155c:	81 70       	andi	r24, 0x01	; 1
    155e:	ec 81       	ldd	r30, Y+4	; 0x04
    1560:	fd 81       	ldd	r31, Y+5	; 0x05
    1562:	80 83       	st	Z, r24
    1564:	29 c0       	rjmp	.+82     	; 0x15b8 <DIO_enuGetPinValue+0x114>
			case DIO_u8PORTC: *pin_value = GET_BIT(PINC,pin_number); break;
    1566:	e3 e3       	ldi	r30, 0x33	; 51
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	88 2f       	mov	r24, r24
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	a9 01       	movw	r20, r18
    1578:	02 c0       	rjmp	.+4      	; 0x157e <DIO_enuGetPinValue+0xda>
    157a:	55 95       	asr	r21
    157c:	47 95       	ror	r20
    157e:	8a 95       	dec	r24
    1580:	e2 f7       	brpl	.-8      	; 0x157a <DIO_enuGetPinValue+0xd6>
    1582:	ca 01       	movw	r24, r20
    1584:	81 70       	andi	r24, 0x01	; 1
    1586:	ec 81       	ldd	r30, Y+4	; 0x04
    1588:	fd 81       	ldd	r31, Y+5	; 0x05
    158a:	80 83       	st	Z, r24
    158c:	15 c0       	rjmp	.+42     	; 0x15b8 <DIO_enuGetPinValue+0x114>
			case DIO_u8PORTD: *pin_value = GET_BIT(PIND,pin_number); break;
    158e:	e0 e3       	ldi	r30, 0x30	; 48
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	88 2f       	mov	r24, r24
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	a9 01       	movw	r20, r18
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <DIO_enuGetPinValue+0x102>
    15a2:	55 95       	asr	r21
    15a4:	47 95       	ror	r20
    15a6:	8a 95       	dec	r24
    15a8:	e2 f7       	brpl	.-8      	; 0x15a2 <DIO_enuGetPinValue+0xfe>
    15aa:	ca 01       	movw	r24, r20
    15ac:	81 70       	andi	r24, 0x01	; 1
    15ae:	ec 81       	ldd	r30, Y+4	; 0x04
    15b0:	fd 81       	ldd	r31, Y+5	; 0x05
    15b2:	80 83       	st	Z, r24
    15b4:	01 c0       	rjmp	.+2      	; 0x15b8 <DIO_enuGetPinValue+0x114>
		}
	}
	else
	{
		ErrorState = ES_NOK;
    15b6:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrorState;
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ba:	27 96       	adiw	r28, 0x07	; 7
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	f8 94       	cli
    15c0:	de bf       	out	0x3e, r29	; 62
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	cd bf       	out	0x3d, r28	; 61
    15c6:	cf 91       	pop	r28
    15c8:	df 91       	pop	r29
    15ca:	08 95       	ret

000015cc <LCD_voidInit>:
#include "LCD_Interface.h"

#include "util/delay.h"

void LCD_voidInit(void)
{
    15cc:	df 93       	push	r29
    15ce:	cf 93       	push	r28
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	aa 97       	sbiw	r28, 0x2a	; 42
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	f8 94       	cli
    15da:	de bf       	out	0x3e, r29	; 62
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	cd bf       	out	0x3d, r28	; 61
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	a0 e2       	ldi	r26, 0x20	; 32
    15e6:	b2 e4       	ldi	r27, 0x42	; 66
    15e8:	8f a3       	std	Y+39, r24	; 0x27
    15ea:	98 a7       	std	Y+40, r25	; 0x28
    15ec:	a9 a7       	std	Y+41, r26	; 0x29
    15ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f0:	6f a1       	ldd	r22, Y+39	; 0x27
    15f2:	78 a5       	ldd	r23, Y+40	; 0x28
    15f4:	89 a5       	ldd	r24, Y+41	; 0x29
    15f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	4a ef       	ldi	r20, 0xFA	; 250
    15fe:	54 e4       	ldi	r21, 0x44	; 68
    1600:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	8b a3       	std	Y+35, r24	; 0x23
    160a:	9c a3       	std	Y+36, r25	; 0x24
    160c:	ad a3       	std	Y+37, r26	; 0x25
    160e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1610:	6b a1       	ldd	r22, Y+35	; 0x23
    1612:	7c a1       	ldd	r23, Y+36	; 0x24
    1614:	8d a1       	ldd	r24, Y+37	; 0x25
    1616:	9e a1       	ldd	r25, Y+38	; 0x26
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	40 e8       	ldi	r20, 0x80	; 128
    161e:	5f e3       	ldi	r21, 0x3F	; 63
    1620:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1624:	88 23       	and	r24, r24
    1626:	2c f4       	brge	.+10     	; 0x1632 <LCD_voidInit+0x66>
		__ticks = 1;
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	9a a3       	std	Y+34, r25	; 0x22
    162e:	89 a3       	std	Y+33, r24	; 0x21
    1630:	3f c0       	rjmp	.+126    	; 0x16b0 <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1632:	6b a1       	ldd	r22, Y+35	; 0x23
    1634:	7c a1       	ldd	r23, Y+36	; 0x24
    1636:	8d a1       	ldd	r24, Y+37	; 0x25
    1638:	9e a1       	ldd	r25, Y+38	; 0x26
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	3f ef       	ldi	r19, 0xFF	; 255
    163e:	4f e7       	ldi	r20, 0x7F	; 127
    1640:	57 e4       	ldi	r21, 0x47	; 71
    1642:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1646:	18 16       	cp	r1, r24
    1648:	4c f5       	brge	.+82     	; 0x169c <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    164a:	6f a1       	ldd	r22, Y+39	; 0x27
    164c:	78 a5       	ldd	r23, Y+40	; 0x28
    164e:	89 a5       	ldd	r24, Y+41	; 0x29
    1650:	9a a5       	ldd	r25, Y+42	; 0x2a
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	40 e2       	ldi	r20, 0x20	; 32
    1658:	51 e4       	ldi	r21, 0x41	; 65
    165a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	bc 01       	movw	r22, r24
    1664:	cd 01       	movw	r24, r26
    1666:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    166a:	dc 01       	movw	r26, r24
    166c:	cb 01       	movw	r24, r22
    166e:	9a a3       	std	Y+34, r25	; 0x22
    1670:	89 a3       	std	Y+33, r24	; 0x21
    1672:	0f c0       	rjmp	.+30     	; 0x1692 <LCD_voidInit+0xc6>
    1674:	88 ec       	ldi	r24, 0xC8	; 200
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	98 a3       	std	Y+32, r25	; 0x20
    167a:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    167c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    167e:	98 a1       	ldd	r25, Y+32	; 0x20
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	f1 f7       	brne	.-4      	; 0x1680 <LCD_voidInit+0xb4>
    1684:	98 a3       	std	Y+32, r25	; 0x20
    1686:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1688:	89 a1       	ldd	r24, Y+33	; 0x21
    168a:	9a a1       	ldd	r25, Y+34	; 0x22
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	9a a3       	std	Y+34, r25	; 0x22
    1690:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1692:	89 a1       	ldd	r24, Y+33	; 0x21
    1694:	9a a1       	ldd	r25, Y+34	; 0x22
    1696:	00 97       	sbiw	r24, 0x00	; 0
    1698:	69 f7       	brne	.-38     	; 0x1674 <LCD_voidInit+0xa8>
    169a:	14 c0       	rjmp	.+40     	; 0x16c4 <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    169c:	6b a1       	ldd	r22, Y+35	; 0x23
    169e:	7c a1       	ldd	r23, Y+36	; 0x24
    16a0:	8d a1       	ldd	r24, Y+37	; 0x25
    16a2:	9e a1       	ldd	r25, Y+38	; 0x26
    16a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	9a a3       	std	Y+34, r25	; 0x22
    16ae:	89 a3       	std	Y+33, r24	; 0x21
    16b0:	89 a1       	ldd	r24, Y+33	; 0x21
    16b2:	9a a1       	ldd	r25, Y+34	; 0x22
    16b4:	9e 8f       	std	Y+30, r25	; 0x1e
    16b6:	8d 8f       	std	Y+29, r24	; 0x1d
    16b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	f1 f7       	brne	.-4      	; 0x16bc <LCD_voidInit+0xf0>
    16c0:	9e 8f       	std	Y+30, r25	; 0x1e
    16c2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(40);
	LCD_voidSendCommand(FUNCTION_SET);
    16c4:	88 e3       	ldi	r24, 0x38	; 56
    16c6:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_voidSendCommand>
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	a0 e8       	ldi	r26, 0x80	; 128
    16d0:	bf e3       	ldi	r27, 0x3F	; 63
    16d2:	89 8f       	std	Y+25, r24	; 0x19
    16d4:	9a 8f       	std	Y+26, r25	; 0x1a
    16d6:	ab 8f       	std	Y+27, r26	; 0x1b
    16d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16da:	69 8d       	ldd	r22, Y+25	; 0x19
    16dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	4a ef       	ldi	r20, 0xFA	; 250
    16e8:	54 e4       	ldi	r21, 0x44	; 68
    16ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
    16f2:	8d 8b       	std	Y+21, r24	; 0x15
    16f4:	9e 8b       	std	Y+22, r25	; 0x16
    16f6:	af 8b       	std	Y+23, r26	; 0x17
    16f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16fa:	6d 89       	ldd	r22, Y+21	; 0x15
    16fc:	7e 89       	ldd	r23, Y+22	; 0x16
    16fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1700:	98 8d       	ldd	r25, Y+24	; 0x18
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	40 e8       	ldi	r20, 0x80	; 128
    1708:	5f e3       	ldi	r21, 0x3F	; 63
    170a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    170e:	88 23       	and	r24, r24
    1710:	2c f4       	brge	.+10     	; 0x171c <LCD_voidInit+0x150>
		__ticks = 1;
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	9c 8b       	std	Y+20, r25	; 0x14
    1718:	8b 8b       	std	Y+19, r24	; 0x13
    171a:	3f c0       	rjmp	.+126    	; 0x179a <LCD_voidInit+0x1ce>
	else if (__tmp > 65535)
    171c:	6d 89       	ldd	r22, Y+21	; 0x15
    171e:	7e 89       	ldd	r23, Y+22	; 0x16
    1720:	8f 89       	ldd	r24, Y+23	; 0x17
    1722:	98 8d       	ldd	r25, Y+24	; 0x18
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	3f ef       	ldi	r19, 0xFF	; 255
    1728:	4f e7       	ldi	r20, 0x7F	; 127
    172a:	57 e4       	ldi	r21, 0x47	; 71
    172c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1730:	18 16       	cp	r1, r24
    1732:	4c f5       	brge	.+82     	; 0x1786 <LCD_voidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1734:	69 8d       	ldd	r22, Y+25	; 0x19
    1736:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1738:	8b 8d       	ldd	r24, Y+27	; 0x1b
    173a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	40 e2       	ldi	r20, 0x20	; 32
    1742:	51 e4       	ldi	r21, 0x41	; 65
    1744:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	bc 01       	movw	r22, r24
    174e:	cd 01       	movw	r24, r26
    1750:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	9c 8b       	std	Y+20, r25	; 0x14
    175a:	8b 8b       	std	Y+19, r24	; 0x13
    175c:	0f c0       	rjmp	.+30     	; 0x177c <LCD_voidInit+0x1b0>
    175e:	88 ec       	ldi	r24, 0xC8	; 200
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	9a 8b       	std	Y+18, r25	; 0x12
    1764:	89 8b       	std	Y+17, r24	; 0x11
    1766:	89 89       	ldd	r24, Y+17	; 0x11
    1768:	9a 89       	ldd	r25, Y+18	; 0x12
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	f1 f7       	brne	.-4      	; 0x176a <LCD_voidInit+0x19e>
    176e:	9a 8b       	std	Y+18, r25	; 0x12
    1770:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1772:	8b 89       	ldd	r24, Y+19	; 0x13
    1774:	9c 89       	ldd	r25, Y+20	; 0x14
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	9c 8b       	std	Y+20, r25	; 0x14
    177a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    177c:	8b 89       	ldd	r24, Y+19	; 0x13
    177e:	9c 89       	ldd	r25, Y+20	; 0x14
    1780:	00 97       	sbiw	r24, 0x00	; 0
    1782:	69 f7       	brne	.-38     	; 0x175e <LCD_voidInit+0x192>
    1784:	14 c0       	rjmp	.+40     	; 0x17ae <LCD_voidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1786:	6d 89       	ldd	r22, Y+21	; 0x15
    1788:	7e 89       	ldd	r23, Y+22	; 0x16
    178a:	8f 89       	ldd	r24, Y+23	; 0x17
    178c:	98 8d       	ldd	r25, Y+24	; 0x18
    178e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	9c 8b       	std	Y+20, r25	; 0x14
    1798:	8b 8b       	std	Y+19, r24	; 0x13
    179a:	8b 89       	ldd	r24, Y+19	; 0x13
    179c:	9c 89       	ldd	r25, Y+20	; 0x14
    179e:	98 8b       	std	Y+16, r25	; 0x10
    17a0:	8f 87       	std	Y+15, r24	; 0x0f
    17a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    17a4:	98 89       	ldd	r25, Y+16	; 0x10
    17a6:	01 97       	sbiw	r24, 0x01	; 1
    17a8:	f1 f7       	brne	.-4      	; 0x17a6 <LCD_voidInit+0x1da>
    17aa:	98 8b       	std	Y+16, r25	; 0x10
    17ac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_voidSendCommand(DISPLAY_ON_OFF_CONTROL);
    17ae:	8c e0       	ldi	r24, 0x0C	; 12
    17b0:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_voidSendCommand>
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	a0 e8       	ldi	r26, 0x80	; 128
    17ba:	bf e3       	ldi	r27, 0x3F	; 63
    17bc:	8b 87       	std	Y+11, r24	; 0x0b
    17be:	9c 87       	std	Y+12, r25	; 0x0c
    17c0:	ad 87       	std	Y+13, r26	; 0x0d
    17c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	4a ef       	ldi	r20, 0xFA	; 250
    17d2:	54 e4       	ldi	r21, 0x44	; 68
    17d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	8f 83       	std	Y+7, r24	; 0x07
    17de:	98 87       	std	Y+8, r25	; 0x08
    17e0:	a9 87       	std	Y+9, r26	; 0x09
    17e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17e4:	6f 81       	ldd	r22, Y+7	; 0x07
    17e6:	78 85       	ldd	r23, Y+8	; 0x08
    17e8:	89 85       	ldd	r24, Y+9	; 0x09
    17ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 e8       	ldi	r20, 0x80	; 128
    17f2:	5f e3       	ldi	r21, 0x3F	; 63
    17f4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17f8:	88 23       	and	r24, r24
    17fa:	2c f4       	brge	.+10     	; 0x1806 <LCD_voidInit+0x23a>
		__ticks = 1;
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	9e 83       	std	Y+6, r25	; 0x06
    1802:	8d 83       	std	Y+5, r24	; 0x05
    1804:	3f c0       	rjmp	.+126    	; 0x1884 <LCD_voidInit+0x2b8>
	else if (__tmp > 65535)
    1806:	6f 81       	ldd	r22, Y+7	; 0x07
    1808:	78 85       	ldd	r23, Y+8	; 0x08
    180a:	89 85       	ldd	r24, Y+9	; 0x09
    180c:	9a 85       	ldd	r25, Y+10	; 0x0a
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	3f ef       	ldi	r19, 0xFF	; 255
    1812:	4f e7       	ldi	r20, 0x7F	; 127
    1814:	57 e4       	ldi	r21, 0x47	; 71
    1816:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    181a:	18 16       	cp	r1, r24
    181c:	4c f5       	brge	.+82     	; 0x1870 <LCD_voidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    181e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1820:	7c 85       	ldd	r23, Y+12	; 0x0c
    1822:	8d 85       	ldd	r24, Y+13	; 0x0d
    1824:	9e 85       	ldd	r25, Y+14	; 0x0e
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	40 e2       	ldi	r20, 0x20	; 32
    182c:	51 e4       	ldi	r21, 0x41	; 65
    182e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	bc 01       	movw	r22, r24
    1838:	cd 01       	movw	r24, r26
    183a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	9e 83       	std	Y+6, r25	; 0x06
    1844:	8d 83       	std	Y+5, r24	; 0x05
    1846:	0f c0       	rjmp	.+30     	; 0x1866 <LCD_voidInit+0x29a>
    1848:	88 ec       	ldi	r24, 0xC8	; 200
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	9c 83       	std	Y+4, r25	; 0x04
    184e:	8b 83       	std	Y+3, r24	; 0x03
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	9c 81       	ldd	r25, Y+4	; 0x04
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	f1 f7       	brne	.-4      	; 0x1854 <LCD_voidInit+0x288>
    1858:	9c 83       	std	Y+4, r25	; 0x04
    185a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    185c:	8d 81       	ldd	r24, Y+5	; 0x05
    185e:	9e 81       	ldd	r25, Y+6	; 0x06
    1860:	01 97       	sbiw	r24, 0x01	; 1
    1862:	9e 83       	std	Y+6, r25	; 0x06
    1864:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1866:	8d 81       	ldd	r24, Y+5	; 0x05
    1868:	9e 81       	ldd	r25, Y+6	; 0x06
    186a:	00 97       	sbiw	r24, 0x00	; 0
    186c:	69 f7       	brne	.-38     	; 0x1848 <LCD_voidInit+0x27c>
    186e:	14 c0       	rjmp	.+40     	; 0x1898 <LCD_voidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1870:	6f 81       	ldd	r22, Y+7	; 0x07
    1872:	78 85       	ldd	r23, Y+8	; 0x08
    1874:	89 85       	ldd	r24, Y+9	; 0x09
    1876:	9a 85       	ldd	r25, Y+10	; 0x0a
    1878:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	9e 83       	std	Y+6, r25	; 0x06
    1882:	8d 83       	std	Y+5, r24	; 0x05
    1884:	8d 81       	ldd	r24, Y+5	; 0x05
    1886:	9e 81       	ldd	r25, Y+6	; 0x06
    1888:	9a 83       	std	Y+2, r25	; 0x02
    188a:	89 83       	std	Y+1, r24	; 0x01
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	9a 81       	ldd	r25, Y+2	; 0x02
    1890:	01 97       	sbiw	r24, 0x01	; 1
    1892:	f1 f7       	brne	.-4      	; 0x1890 <LCD_voidInit+0x2c4>
    1894:	9a 83       	std	Y+2, r25	; 0x02
    1896:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCD_voidSendCommand(DISPLAY_CLEAR);
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_voidSendCommand>
	//_delay_ms(2);
	//LCD_SendCommand(ENTRY_MODE_SET);
}
    189e:	aa 96       	adiw	r28, 0x2a	; 42
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	f8 94       	cli
    18a4:	de bf       	out	0x3e, r29	; 62
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	cd bf       	out	0x3d, r28	; 61
    18aa:	cf 91       	pop	r28
    18ac:	df 91       	pop	r29
    18ae:	08 95       	ret

000018b0 <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 Copy_u8Command)
{
    18b0:	df 93       	push	r29
    18b2:	cf 93       	push	r28
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
    18b8:	6d 97       	sbiw	r28, 0x1d	; 29
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	f8 94       	cli
    18be:	de bf       	out	0x3e, r29	; 62
    18c0:	0f be       	out	0x3f, r0	; 63
    18c2:	cd bf       	out	0x3d, r28	; 61
    18c4:	8d 8f       	std	Y+29, r24	; 0x1d
	//Reset RS
	DIO_enuSetPinValue(LCD_PORT_INSTRUCTION , LCD_RS , DIO_u8LOW);
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	60 e0       	ldi	r22, 0x00	; 0
    18ca:	40 e0       	ldi	r20, 0x00	; 0
    18cc:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_enuSetPinValue>

	//Send Command
	DIO_enuSetPortValue(LCD_PORT_DATA , Copy_u8Command);
    18d0:	83 e0       	ldi	r24, 0x03	; 3
    18d2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    18d4:	0e 94 ae 06 	call	0xd5c	; 0xd5c <DIO_enuSetPortValue>

	//Latch
	DIO_enuSetPinValue(LCD_PORT_INSTRUCTION , LCD_EN , DIO_u8LOW);
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	61 e0       	ldi	r22, 0x01	; 1
    18dc:	40 e0       	ldi	r20, 0x00	; 0
    18de:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_enuSetPinValue>
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	a0 e0       	ldi	r26, 0x00	; 0
    18e8:	b0 e4       	ldi	r27, 0x40	; 64
    18ea:	89 8f       	std	Y+25, r24	; 0x19
    18ec:	9a 8f       	std	Y+26, r25	; 0x1a
    18ee:	ab 8f       	std	Y+27, r26	; 0x1b
    18f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f2:	69 8d       	ldd	r22, Y+25	; 0x19
    18f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	4a ef       	ldi	r20, 0xFA	; 250
    1900:	54 e4       	ldi	r21, 0x44	; 68
    1902:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1906:	dc 01       	movw	r26, r24
    1908:	cb 01       	movw	r24, r22
    190a:	8d 8b       	std	Y+21, r24	; 0x15
    190c:	9e 8b       	std	Y+22, r25	; 0x16
    190e:	af 8b       	std	Y+23, r26	; 0x17
    1910:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1912:	6d 89       	ldd	r22, Y+21	; 0x15
    1914:	7e 89       	ldd	r23, Y+22	; 0x16
    1916:	8f 89       	ldd	r24, Y+23	; 0x17
    1918:	98 8d       	ldd	r25, Y+24	; 0x18
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	40 e8       	ldi	r20, 0x80	; 128
    1920:	5f e3       	ldi	r21, 0x3F	; 63
    1922:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1926:	88 23       	and	r24, r24
    1928:	2c f4       	brge	.+10     	; 0x1934 <LCD_voidSendCommand+0x84>
		__ticks = 1;
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	9c 8b       	std	Y+20, r25	; 0x14
    1930:	8b 8b       	std	Y+19, r24	; 0x13
    1932:	3f c0       	rjmp	.+126    	; 0x19b2 <LCD_voidSendCommand+0x102>
	else if (__tmp > 65535)
    1934:	6d 89       	ldd	r22, Y+21	; 0x15
    1936:	7e 89       	ldd	r23, Y+22	; 0x16
    1938:	8f 89       	ldd	r24, Y+23	; 0x17
    193a:	98 8d       	ldd	r25, Y+24	; 0x18
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	3f ef       	ldi	r19, 0xFF	; 255
    1940:	4f e7       	ldi	r20, 0x7F	; 127
    1942:	57 e4       	ldi	r21, 0x47	; 71
    1944:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1948:	18 16       	cp	r1, r24
    194a:	4c f5       	brge	.+82     	; 0x199e <LCD_voidSendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    194c:	69 8d       	ldd	r22, Y+25	; 0x19
    194e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1950:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1952:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	40 e2       	ldi	r20, 0x20	; 32
    195a:	51 e4       	ldi	r21, 0x41	; 65
    195c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	bc 01       	movw	r22, r24
    1966:	cd 01       	movw	r24, r26
    1968:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	9c 8b       	std	Y+20, r25	; 0x14
    1972:	8b 8b       	std	Y+19, r24	; 0x13
    1974:	0f c0       	rjmp	.+30     	; 0x1994 <LCD_voidSendCommand+0xe4>
    1976:	88 ec       	ldi	r24, 0xC8	; 200
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	9a 8b       	std	Y+18, r25	; 0x12
    197c:	89 8b       	std	Y+17, r24	; 0x11
    197e:	89 89       	ldd	r24, Y+17	; 0x11
    1980:	9a 89       	ldd	r25, Y+18	; 0x12
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	f1 f7       	brne	.-4      	; 0x1982 <LCD_voidSendCommand+0xd2>
    1986:	9a 8b       	std	Y+18, r25	; 0x12
    1988:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    198a:	8b 89       	ldd	r24, Y+19	; 0x13
    198c:	9c 89       	ldd	r25, Y+20	; 0x14
    198e:	01 97       	sbiw	r24, 0x01	; 1
    1990:	9c 8b       	std	Y+20, r25	; 0x14
    1992:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1994:	8b 89       	ldd	r24, Y+19	; 0x13
    1996:	9c 89       	ldd	r25, Y+20	; 0x14
    1998:	00 97       	sbiw	r24, 0x00	; 0
    199a:	69 f7       	brne	.-38     	; 0x1976 <LCD_voidSendCommand+0xc6>
    199c:	14 c0       	rjmp	.+40     	; 0x19c6 <LCD_voidSendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    199e:	6d 89       	ldd	r22, Y+21	; 0x15
    19a0:	7e 89       	ldd	r23, Y+22	; 0x16
    19a2:	8f 89       	ldd	r24, Y+23	; 0x17
    19a4:	98 8d       	ldd	r25, Y+24	; 0x18
    19a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	9c 8b       	std	Y+20, r25	; 0x14
    19b0:	8b 8b       	std	Y+19, r24	; 0x13
    19b2:	8b 89       	ldd	r24, Y+19	; 0x13
    19b4:	9c 89       	ldd	r25, Y+20	; 0x14
    19b6:	98 8b       	std	Y+16, r25	; 0x10
    19b8:	8f 87       	std	Y+15, r24	; 0x0f
    19ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    19bc:	98 89       	ldd	r25, Y+16	; 0x10
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	f1 f7       	brne	.-4      	; 0x19be <LCD_voidSendCommand+0x10e>
    19c2:	98 8b       	std	Y+16, r25	; 0x10
    19c4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_enuSetPinValue(LCD_PORT_INSTRUCTION , LCD_EN , DIO_u8HIGH);
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	61 e0       	ldi	r22, 0x01	; 1
    19ca:	41 e0       	ldi	r20, 0x01	; 1
    19cc:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_enuSetPinValue>
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	a0 e0       	ldi	r26, 0x00	; 0
    19d6:	b0 e4       	ldi	r27, 0x40	; 64
    19d8:	8b 87       	std	Y+11, r24	; 0x0b
    19da:	9c 87       	std	Y+12, r25	; 0x0c
    19dc:	ad 87       	std	Y+13, r26	; 0x0d
    19de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	4a ef       	ldi	r20, 0xFA	; 250
    19ee:	54 e4       	ldi	r21, 0x44	; 68
    19f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	8f 83       	std	Y+7, r24	; 0x07
    19fa:	98 87       	std	Y+8, r25	; 0x08
    19fc:	a9 87       	std	Y+9, r26	; 0x09
    19fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a00:	6f 81       	ldd	r22, Y+7	; 0x07
    1a02:	78 85       	ldd	r23, Y+8	; 0x08
    1a04:	89 85       	ldd	r24, Y+9	; 0x09
    1a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	40 e8       	ldi	r20, 0x80	; 128
    1a0e:	5f e3       	ldi	r21, 0x3F	; 63
    1a10:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a14:	88 23       	and	r24, r24
    1a16:	2c f4       	brge	.+10     	; 0x1a22 <LCD_voidSendCommand+0x172>
		__ticks = 1;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	9e 83       	std	Y+6, r25	; 0x06
    1a1e:	8d 83       	std	Y+5, r24	; 0x05
    1a20:	3f c0       	rjmp	.+126    	; 0x1aa0 <LCD_voidSendCommand+0x1f0>
	else if (__tmp > 65535)
    1a22:	6f 81       	ldd	r22, Y+7	; 0x07
    1a24:	78 85       	ldd	r23, Y+8	; 0x08
    1a26:	89 85       	ldd	r24, Y+9	; 0x09
    1a28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	3f ef       	ldi	r19, 0xFF	; 255
    1a2e:	4f e7       	ldi	r20, 0x7F	; 127
    1a30:	57 e4       	ldi	r21, 0x47	; 71
    1a32:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a36:	18 16       	cp	r1, r24
    1a38:	4c f5       	brge	.+82     	; 0x1a8c <LCD_voidSendCommand+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	40 e2       	ldi	r20, 0x20	; 32
    1a48:	51 e4       	ldi	r21, 0x41	; 65
    1a4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	bc 01       	movw	r22, r24
    1a54:	cd 01       	movw	r24, r26
    1a56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	9e 83       	std	Y+6, r25	; 0x06
    1a60:	8d 83       	std	Y+5, r24	; 0x05
    1a62:	0f c0       	rjmp	.+30     	; 0x1a82 <LCD_voidSendCommand+0x1d2>
    1a64:	88 ec       	ldi	r24, 0xC8	; 200
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	9c 83       	std	Y+4, r25	; 0x04
    1a6a:	8b 83       	std	Y+3, r24	; 0x03
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a70:	01 97       	sbiw	r24, 0x01	; 1
    1a72:	f1 f7       	brne	.-4      	; 0x1a70 <LCD_voidSendCommand+0x1c0>
    1a74:	9c 83       	std	Y+4, r25	; 0x04
    1a76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a78:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	9e 83       	std	Y+6, r25	; 0x06
    1a80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a82:	8d 81       	ldd	r24, Y+5	; 0x05
    1a84:	9e 81       	ldd	r25, Y+6	; 0x06
    1a86:	00 97       	sbiw	r24, 0x00	; 0
    1a88:	69 f7       	brne	.-38     	; 0x1a64 <LCD_voidSendCommand+0x1b4>
    1a8a:	14 c0       	rjmp	.+40     	; 0x1ab4 <LCD_voidSendCommand+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a8e:	78 85       	ldd	r23, Y+8	; 0x08
    1a90:	89 85       	ldd	r24, Y+9	; 0x09
    1a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	9e 83       	std	Y+6, r25	; 0x06
    1a9e:	8d 83       	std	Y+5, r24	; 0x05
    1aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa4:	9a 83       	std	Y+2, r25	; 0x02
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    1aac:	01 97       	sbiw	r24, 0x01	; 1
    1aae:	f1 f7       	brne	.-4      	; 0x1aac <LCD_voidSendCommand+0x1fc>
    1ab0:	9a 83       	std	Y+2, r25	; 0x02
    1ab2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_enuSetPinValue(LCD_PORT_INSTRUCTION , LCD_EN , DIO_u8LOW);
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	61 e0       	ldi	r22, 0x01	; 1
    1ab8:	40 e0       	ldi	r20, 0x00	; 0
    1aba:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_enuSetPinValue>
}
    1abe:	6d 96       	adiw	r28, 0x1d	; 29
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	f8 94       	cli
    1ac4:	de bf       	out	0x3e, r29	; 62
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	cd bf       	out	0x3d, r28	; 61
    1aca:	cf 91       	pop	r28
    1acc:	df 91       	pop	r29
    1ace:	08 95       	ret

00001ad0 <LCD_voidSendData>:

void LCD_voidSendData(u8 Copy_u8Data)
{
    1ad0:	df 93       	push	r29
    1ad2:	cf 93       	push	r28
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
    1ad8:	6d 97       	sbiw	r28, 0x1d	; 29
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	de bf       	out	0x3e, r29	; 62
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	cd bf       	out	0x3d, r28	; 61
    1ae4:	8d 8f       	std	Y+29, r24	; 0x1d
	//Reset RS
	DIO_enuSetPinValue(LCD_PORT_INSTRUCTION , LCD_RS , DIO_u8HIGH);
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	60 e0       	ldi	r22, 0x00	; 0
    1aea:	41 e0       	ldi	r20, 0x01	; 1
    1aec:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_enuSetPinValue>

	//Send Data
	DIO_enuSetPortValue(LCD_PORT_DATA , Copy_u8Data);
    1af0:	83 e0       	ldi	r24, 0x03	; 3
    1af2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1af4:	0e 94 ae 06 	call	0xd5c	; 0xd5c <DIO_enuSetPortValue>

	//Latch
	DIO_enuSetPinValue(LCD_PORT_INSTRUCTION , LCD_EN , DIO_u8LOW);
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	61 e0       	ldi	r22, 0x01	; 1
    1afc:	40 e0       	ldi	r20, 0x00	; 0
    1afe:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_enuSetPinValue>
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	a0 e0       	ldi	r26, 0x00	; 0
    1b08:	b0 e4       	ldi	r27, 0x40	; 64
    1b0a:	89 8f       	std	Y+25, r24	; 0x19
    1b0c:	9a 8f       	std	Y+26, r25	; 0x1a
    1b0e:	ab 8f       	std	Y+27, r26	; 0x1b
    1b10:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b12:	69 8d       	ldd	r22, Y+25	; 0x19
    1b14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	4a ef       	ldi	r20, 0xFA	; 250
    1b20:	54 e4       	ldi	r21, 0x44	; 68
    1b22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	8d 8b       	std	Y+21, r24	; 0x15
    1b2c:	9e 8b       	std	Y+22, r25	; 0x16
    1b2e:	af 8b       	std	Y+23, r26	; 0x17
    1b30:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b32:	6d 89       	ldd	r22, Y+21	; 0x15
    1b34:	7e 89       	ldd	r23, Y+22	; 0x16
    1b36:	8f 89       	ldd	r24, Y+23	; 0x17
    1b38:	98 8d       	ldd	r25, Y+24	; 0x18
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	40 e8       	ldi	r20, 0x80	; 128
    1b40:	5f e3       	ldi	r21, 0x3F	; 63
    1b42:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b46:	88 23       	and	r24, r24
    1b48:	2c f4       	brge	.+10     	; 0x1b54 <LCD_voidSendData+0x84>
		__ticks = 1;
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	9c 8b       	std	Y+20, r25	; 0x14
    1b50:	8b 8b       	std	Y+19, r24	; 0x13
    1b52:	3f c0       	rjmp	.+126    	; 0x1bd2 <LCD_voidSendData+0x102>
	else if (__tmp > 65535)
    1b54:	6d 89       	ldd	r22, Y+21	; 0x15
    1b56:	7e 89       	ldd	r23, Y+22	; 0x16
    1b58:	8f 89       	ldd	r24, Y+23	; 0x17
    1b5a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	3f ef       	ldi	r19, 0xFF	; 255
    1b60:	4f e7       	ldi	r20, 0x7F	; 127
    1b62:	57 e4       	ldi	r21, 0x47	; 71
    1b64:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b68:	18 16       	cp	r1, r24
    1b6a:	4c f5       	brge	.+82     	; 0x1bbe <LCD_voidSendData+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b6c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	40 e2       	ldi	r20, 0x20	; 32
    1b7a:	51 e4       	ldi	r21, 0x41	; 65
    1b7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	bc 01       	movw	r22, r24
    1b86:	cd 01       	movw	r24, r26
    1b88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	9c 8b       	std	Y+20, r25	; 0x14
    1b92:	8b 8b       	std	Y+19, r24	; 0x13
    1b94:	0f c0       	rjmp	.+30     	; 0x1bb4 <LCD_voidSendData+0xe4>
    1b96:	88 ec       	ldi	r24, 0xC8	; 200
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	9a 8b       	std	Y+18, r25	; 0x12
    1b9c:	89 8b       	std	Y+17, r24	; 0x11
    1b9e:	89 89       	ldd	r24, Y+17	; 0x11
    1ba0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	f1 f7       	brne	.-4      	; 0x1ba2 <LCD_voidSendData+0xd2>
    1ba6:	9a 8b       	std	Y+18, r25	; 0x12
    1ba8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1baa:	8b 89       	ldd	r24, Y+19	; 0x13
    1bac:	9c 89       	ldd	r25, Y+20	; 0x14
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	9c 8b       	std	Y+20, r25	; 0x14
    1bb2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb4:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb6:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb8:	00 97       	sbiw	r24, 0x00	; 0
    1bba:	69 f7       	brne	.-38     	; 0x1b96 <LCD_voidSendData+0xc6>
    1bbc:	14 c0       	rjmp	.+40     	; 0x1be6 <LCD_voidSendData+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bbe:	6d 89       	ldd	r22, Y+21	; 0x15
    1bc0:	7e 89       	ldd	r23, Y+22	; 0x16
    1bc2:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc4:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	9c 8b       	std	Y+20, r25	; 0x14
    1bd0:	8b 8b       	std	Y+19, r24	; 0x13
    1bd2:	8b 89       	ldd	r24, Y+19	; 0x13
    1bd4:	9c 89       	ldd	r25, Y+20	; 0x14
    1bd6:	98 8b       	std	Y+16, r25	; 0x10
    1bd8:	8f 87       	std	Y+15, r24	; 0x0f
    1bda:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bdc:	98 89       	ldd	r25, Y+16	; 0x10
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	f1 f7       	brne	.-4      	; 0x1bde <LCD_voidSendData+0x10e>
    1be2:	98 8b       	std	Y+16, r25	; 0x10
    1be4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_enuSetPinValue(LCD_PORT_INSTRUCTION , LCD_EN , DIO_u8HIGH);
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	61 e0       	ldi	r22, 0x01	; 1
    1bea:	41 e0       	ldi	r20, 0x01	; 1
    1bec:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_enuSetPinValue>
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	a0 e0       	ldi	r26, 0x00	; 0
    1bf6:	b0 e4       	ldi	r27, 0x40	; 64
    1bf8:	8b 87       	std	Y+11, r24	; 0x0b
    1bfa:	9c 87       	std	Y+12, r25	; 0x0c
    1bfc:	ad 87       	std	Y+13, r26	; 0x0d
    1bfe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	4a ef       	ldi	r20, 0xFA	; 250
    1c0e:	54 e4       	ldi	r21, 0x44	; 68
    1c10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	8f 83       	std	Y+7, r24	; 0x07
    1c1a:	98 87       	std	Y+8, r25	; 0x08
    1c1c:	a9 87       	std	Y+9, r26	; 0x09
    1c1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c20:	6f 81       	ldd	r22, Y+7	; 0x07
    1c22:	78 85       	ldd	r23, Y+8	; 0x08
    1c24:	89 85       	ldd	r24, Y+9	; 0x09
    1c26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	40 e8       	ldi	r20, 0x80	; 128
    1c2e:	5f e3       	ldi	r21, 0x3F	; 63
    1c30:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c34:	88 23       	and	r24, r24
    1c36:	2c f4       	brge	.+10     	; 0x1c42 <LCD_voidSendData+0x172>
		__ticks = 1;
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	9e 83       	std	Y+6, r25	; 0x06
    1c3e:	8d 83       	std	Y+5, r24	; 0x05
    1c40:	3f c0       	rjmp	.+126    	; 0x1cc0 <LCD_voidSendData+0x1f0>
	else if (__tmp > 65535)
    1c42:	6f 81       	ldd	r22, Y+7	; 0x07
    1c44:	78 85       	ldd	r23, Y+8	; 0x08
    1c46:	89 85       	ldd	r24, Y+9	; 0x09
    1c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	3f ef       	ldi	r19, 0xFF	; 255
    1c4e:	4f e7       	ldi	r20, 0x7F	; 127
    1c50:	57 e4       	ldi	r21, 0x47	; 71
    1c52:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c56:	18 16       	cp	r1, r24
    1c58:	4c f5       	brge	.+82     	; 0x1cac <LCD_voidSendData+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	40 e2       	ldi	r20, 0x20	; 32
    1c68:	51 e4       	ldi	r21, 0x41	; 65
    1c6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	bc 01       	movw	r22, r24
    1c74:	cd 01       	movw	r24, r26
    1c76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	9e 83       	std	Y+6, r25	; 0x06
    1c80:	8d 83       	std	Y+5, r24	; 0x05
    1c82:	0f c0       	rjmp	.+30     	; 0x1ca2 <LCD_voidSendData+0x1d2>
    1c84:	88 ec       	ldi	r24, 0xC8	; 200
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	9c 83       	std	Y+4, r25	; 0x04
    1c8a:	8b 83       	std	Y+3, r24	; 0x03
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	f1 f7       	brne	.-4      	; 0x1c90 <LCD_voidSendData+0x1c0>
    1c94:	9c 83       	std	Y+4, r25	; 0x04
    1c96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c98:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	9e 83       	std	Y+6, r25	; 0x06
    1ca0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca6:	00 97       	sbiw	r24, 0x00	; 0
    1ca8:	69 f7       	brne	.-38     	; 0x1c84 <LCD_voidSendData+0x1b4>
    1caa:	14 c0       	rjmp	.+40     	; 0x1cd4 <LCD_voidSendData+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cac:	6f 81       	ldd	r22, Y+7	; 0x07
    1cae:	78 85       	ldd	r23, Y+8	; 0x08
    1cb0:	89 85       	ldd	r24, Y+9	; 0x09
    1cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	9e 83       	std	Y+6, r25	; 0x06
    1cbe:	8d 83       	std	Y+5, r24	; 0x05
    1cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc4:	9a 83       	std	Y+2, r25	; 0x02
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	9a 81       	ldd	r25, Y+2	; 0x02
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	f1 f7       	brne	.-4      	; 0x1ccc <LCD_voidSendData+0x1fc>
    1cd0:	9a 83       	std	Y+2, r25	; 0x02
    1cd2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_enuSetPinValue(LCD_PORT_INSTRUCTION , LCD_EN , DIO_u8LOW);
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	61 e0       	ldi	r22, 0x01	; 1
    1cd8:	40 e0       	ldi	r20, 0x00	; 0
    1cda:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_enuSetPinValue>
}
    1cde:	6d 96       	adiw	r28, 0x1d	; 29
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	f8 94       	cli
    1ce4:	de bf       	out	0x3e, r29	; 62
    1ce6:	0f be       	out	0x3f, r0	; 63
    1ce8:	cd bf       	out	0x3d, r28	; 61
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	08 95       	ret

00001cf0 <LCD_init_PortDirection>:

void LCD_init_PortDirection(void)
{
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
	// Pins -> Output
	DIO_enuSetPortDirection(LCD_PORT_DATA , DIO_u8PORTOUTPUT);
    1cf8:	83 e0       	ldi	r24, 0x03	; 3
    1cfa:	6f ef       	ldi	r22, 0xFF	; 255
    1cfc:	0e 94 63 06 	call	0xcc6	; 0xcc6 <DIO_enuSetPortDirection>
	// RS -> Output
	DIO_enuSetPinDirection(LCD_PORT_INSTRUCTION , LCD_RS , DIO_u8OUTPUT);
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	60 e0       	ldi	r22, 0x00	; 0
    1d04:	41 e0       	ldi	r20, 0x01	; 1
    1d06:	0e 94 a8 07 	call	0xf50	; 0xf50 <DIO_enuSetPinDirection>
	// EN -> Output
	DIO_enuSetPinDirection(LCD_PORT_INSTRUCTION , LCD_EN , DIO_u8OUTPUT);
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	61 e0       	ldi	r22, 0x01	; 1
    1d0e:	41 e0       	ldi	r20, 0x01	; 1
    1d10:	0e 94 a8 07 	call	0xf50	; 0xf50 <DIO_enuSetPinDirection>
}
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	08 95       	ret

00001d1a <LCD_voidSendString>:

void LCD_voidSendString(const u8 *str)
{
    1d1a:	df 93       	push	r29
    1d1c:	cf 93       	push	r28
    1d1e:	00 d0       	rcall	.+0      	; 0x1d20 <LCD_voidSendString+0x6>
    1d20:	0f 92       	push	r0
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
    1d26:	9b 83       	std	Y+3, r25	; 0x03
    1d28:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    1d2a:	19 82       	std	Y+1, r1	; 0x01
    1d2c:	0e c0       	rjmp	.+28     	; 0x1d4a <LCD_voidSendString+0x30>
	while(str[i] != '\0')
	{
		LCD_voidSendData(str[i]);
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	28 2f       	mov	r18, r24
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	9b 81       	ldd	r25, Y+3	; 0x03
    1d38:	fc 01       	movw	r30, r24
    1d3a:	e2 0f       	add	r30, r18
    1d3c:	f3 1f       	adc	r31, r19
    1d3e:	80 81       	ld	r24, Z
    1d40:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCD_voidSendData>
		i++;
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	8f 5f       	subi	r24, 0xFF	; 255
    1d48:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendString(const u8 *str)
{
	u8 i = 0;
	while(str[i] != '\0')
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
    1d4c:	28 2f       	mov	r18, r24
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	9b 81       	ldd	r25, Y+3	; 0x03
    1d54:	fc 01       	movw	r30, r24
    1d56:	e2 0f       	add	r30, r18
    1d58:	f3 1f       	adc	r31, r19
    1d5a:	80 81       	ld	r24, Z
    1d5c:	88 23       	and	r24, r24
    1d5e:	39 f7       	brne	.-50     	; 0x1d2e <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(str[i]);
		i++;
	}
}
    1d60:	0f 90       	pop	r0
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	cf 91       	pop	r28
    1d68:	df 91       	pop	r29
    1d6a:	08 95       	ret

00001d6c <LCD_voidSendNumber>:

void LCD_voidSendNumber(u32 value)
{
    1d6c:	0f 93       	push	r16
    1d6e:	1f 93       	push	r17
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	cb 56       	subi	r28, 0x6B	; 107
    1d7a:	d0 40       	sbci	r29, 0x00	; 0
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	f8 94       	cli
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	cd bf       	out	0x3d, r28	; 61
    1d86:	fe 01       	movw	r30, r28
    1d88:	e8 59       	subi	r30, 0x98	; 152
    1d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8c:	60 83       	st	Z, r22
    1d8e:	71 83       	std	Z+1, r23	; 0x01
    1d90:	82 83       	std	Z+2, r24	; 0x02
    1d92:	93 83       	std	Z+3, r25	; 0x03
	u8 counter = 0;
    1d94:	1b 82       	std	Y+3, r1	; 0x03
    1d96:	38 c0       	rjmp	.+112    	; 0x1e08 <LCD_voidSendNumber+0x9c>
	u8 arr[100];
	while(value != 0)
	{
		arr[counter] = ((value % 10) + '0');
    1d98:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9a:	08 2f       	mov	r16, r24
    1d9c:	10 e0       	ldi	r17, 0x00	; 0
    1d9e:	fe 01       	movw	r30, r28
    1da0:	e8 59       	subi	r30, 0x98	; 152
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	80 81       	ld	r24, Z
    1da6:	91 81       	ldd	r25, Z+1	; 0x01
    1da8:	a2 81       	ldd	r26, Z+2	; 0x02
    1daa:	b3 81       	ldd	r27, Z+3	; 0x03
    1dac:	2a e0       	ldi	r18, 0x0A	; 10
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	40 e0       	ldi	r20, 0x00	; 0
    1db2:	50 e0       	ldi	r21, 0x00	; 0
    1db4:	bc 01       	movw	r22, r24
    1db6:	cd 01       	movw	r24, r26
    1db8:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <__udivmodsi4>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	28 2f       	mov	r18, r24
    1dc2:	20 5d       	subi	r18, 0xD0	; 208
    1dc4:	ce 01       	movw	r24, r28
    1dc6:	04 96       	adiw	r24, 0x04	; 4
    1dc8:	fc 01       	movw	r30, r24
    1dca:	e0 0f       	add	r30, r16
    1dcc:	f1 1f       	adc	r31, r17
    1dce:	20 83       	st	Z, r18
		value /= 10;
    1dd0:	8e 01       	movw	r16, r28
    1dd2:	08 59       	subi	r16, 0x98	; 152
    1dd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd6:	fe 01       	movw	r30, r28
    1dd8:	e8 59       	subi	r30, 0x98	; 152
    1dda:	ff 4f       	sbci	r31, 0xFF	; 255
    1ddc:	80 81       	ld	r24, Z
    1dde:	91 81       	ldd	r25, Z+1	; 0x01
    1de0:	a2 81       	ldd	r26, Z+2	; 0x02
    1de2:	b3 81       	ldd	r27, Z+3	; 0x03
    1de4:	2a e0       	ldi	r18, 0x0A	; 10
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	40 e0       	ldi	r20, 0x00	; 0
    1dea:	50 e0       	ldi	r21, 0x00	; 0
    1dec:	bc 01       	movw	r22, r24
    1dee:	cd 01       	movw	r24, r26
    1df0:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <__udivmodsi4>
    1df4:	da 01       	movw	r26, r20
    1df6:	c9 01       	movw	r24, r18
    1df8:	f8 01       	movw	r30, r16
    1dfa:	80 83       	st	Z, r24
    1dfc:	91 83       	std	Z+1, r25	; 0x01
    1dfe:	a2 83       	std	Z+2, r26	; 0x02
    1e00:	b3 83       	std	Z+3, r27	; 0x03
		counter++;
    1e02:	8b 81       	ldd	r24, Y+3	; 0x03
    1e04:	8f 5f       	subi	r24, 0xFF	; 255
    1e06:	8b 83       	std	Y+3, r24	; 0x03

void LCD_voidSendNumber(u32 value)
{
	u8 counter = 0;
	u8 arr[100];
	while(value != 0)
    1e08:	fe 01       	movw	r30, r28
    1e0a:	e8 59       	subi	r30, 0x98	; 152
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	80 81       	ld	r24, Z
    1e10:	91 81       	ldd	r25, Z+1	; 0x01
    1e12:	a2 81       	ldd	r26, Z+2	; 0x02
    1e14:	b3 81       	ldd	r27, Z+3	; 0x03
    1e16:	00 97       	sbiw	r24, 0x00	; 0
    1e18:	a1 05       	cpc	r26, r1
    1e1a:	b1 05       	cpc	r27, r1
    1e1c:	09 f0       	breq	.+2      	; 0x1e20 <LCD_voidSendNumber+0xb4>
    1e1e:	bc cf       	rjmp	.-136    	; 0x1d98 <LCD_voidSendNumber+0x2c>
	{
		arr[counter] = ((value % 10) + '0');
		value /= 10;
		counter++;
	}
	for(int i = counter-1; i >= 0; i--)
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
    1e22:	88 2f       	mov	r24, r24
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	9a 83       	std	Y+2, r25	; 0x02
    1e2a:	89 83       	std	Y+1, r24	; 0x01
    1e2c:	0f c0       	rjmp	.+30     	; 0x1e4c <LCD_voidSendNumber+0xe0>
	{
		LCD_voidSendData(arr[i]);
    1e2e:	29 81       	ldd	r18, Y+1	; 0x01
    1e30:	3a 81       	ldd	r19, Y+2	; 0x02
    1e32:	ce 01       	movw	r24, r28
    1e34:	04 96       	adiw	r24, 0x04	; 4
    1e36:	fc 01       	movw	r30, r24
    1e38:	e2 0f       	add	r30, r18
    1e3a:	f3 1f       	adc	r31, r19
    1e3c:	80 81       	ld	r24, Z
    1e3e:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCD_voidSendData>
	{
		arr[counter] = ((value % 10) + '0');
		value /= 10;
		counter++;
	}
	for(int i = counter-1; i >= 0; i--)
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	9a 81       	ldd	r25, Y+2	; 0x02
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	9a 83       	std	Y+2, r25	; 0x02
    1e4a:	89 83       	std	Y+1, r24	; 0x01
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e50:	99 23       	and	r25, r25
    1e52:	6c f7       	brge	.-38     	; 0x1e2e <LCD_voidSendNumber+0xc2>
	{
		LCD_voidSendData(arr[i]);
	}
}
    1e54:	c5 59       	subi	r28, 0x95	; 149
    1e56:	df 4f       	sbci	r29, 0xFF	; 255
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	1f 91       	pop	r17
    1e68:	0f 91       	pop	r16
    1e6a:	08 95       	ret

00001e6c <LCD_voidSendFloatingNumber>:

void LCD_voidSendFloatingNumber(f32 value)
{
    1e6c:	df 93       	push	r29
    1e6e:	cf 93       	push	r28
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <LCD_voidSendFloatingNumber+0x6>
    1e72:	00 d0       	rcall	.+0      	; 0x1e74 <LCD_voidSendFloatingNumber+0x8>
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
    1e78:	69 83       	std	Y+1, r22	; 0x01
    1e7a:	7a 83       	std	Y+2, r23	; 0x02
    1e7c:	8b 83       	std	Y+3, r24	; 0x03
    1e7e:	9c 83       	std	Y+4, r25	; 0x04
	LCD_voidSendNumber((u32)value);
    1e80:	69 81       	ldd	r22, Y+1	; 0x01
    1e82:	7a 81       	ldd	r23, Y+2	; 0x02
    1e84:	8b 81       	ldd	r24, Y+3	; 0x03
    1e86:	9c 81       	ldd	r25, Y+4	; 0x04
    1e88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	bc 01       	movw	r22, r24
    1e92:	cd 01       	movw	r24, r26
    1e94:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <LCD_voidSendNumber>
	LCD_voidSendData('.');
    1e98:	8e e2       	ldi	r24, 0x2E	; 46
    1e9a:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCD_voidSendData>
	LCD_voidSendNumber((u32)((value-((u32)value))*1000000));
    1e9e:	69 81       	ldd	r22, Y+1	; 0x01
    1ea0:	7a 81       	ldd	r23, Y+2	; 0x02
    1ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	bc 01       	movw	r22, r24
    1eb0:	cd 01       	movw	r24, r26
    1eb2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    1eb6:	9b 01       	movw	r18, r22
    1eb8:	ac 01       	movw	r20, r24
    1eba:	69 81       	ldd	r22, Y+1	; 0x01
    1ebc:	7a 81       	ldd	r23, Y+2	; 0x02
    1ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec2:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	bc 01       	movw	r22, r24
    1ecc:	cd 01       	movw	r24, r26
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	34 e2       	ldi	r19, 0x24	; 36
    1ed2:	44 e7       	ldi	r20, 0x74	; 116
    1ed4:	59 e4       	ldi	r21, 0x49	; 73
    1ed6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	bc 01       	movw	r22, r24
    1ee0:	cd 01       	movw	r24, r26
    1ee2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	bc 01       	movw	r22, r24
    1eec:	cd 01       	movw	r24, r26
    1eee:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <LCD_voidSendNumber>
}
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	08 95       	ret

00001f00 <LCD_u8GoToXY>:

u8 LCD_u8GoToXY(u8 col , u8 row)
{
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	00 d0       	rcall	.+0      	; 0x1f06 <LCD_u8GoToXY+0x6>
    1f06:	0f 92       	push	r0
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	8a 83       	std	Y+2, r24	; 0x02
    1f0e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8PinState=0;
    1f10:	19 82       	std	Y+1, r1	; 0x01
	if((row == 0) && (col < 16))
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	88 23       	and	r24, r24
    1f16:	41 f4       	brne	.+16     	; 0x1f28 <LCD_u8GoToXY+0x28>
    1f18:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1a:	80 31       	cpi	r24, 0x10	; 16
    1f1c:	28 f4       	brcc	.+10     	; 0x1f28 <LCD_u8GoToXY+0x28>
	{
		LCD_voidSendCommand((0x00) + col + 128);
    1f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f20:	80 58       	subi	r24, 0x80	; 128
    1f22:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_voidSendCommand>
    1f26:	0d c0       	rjmp	.+26     	; 0x1f42 <LCD_u8GoToXY+0x42>
	}
	else if((row == 1) && (col < 16))
    1f28:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2a:	81 30       	cpi	r24, 0x01	; 1
    1f2c:	41 f4       	brne	.+16     	; 0x1f3e <LCD_u8GoToXY+0x3e>
    1f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f30:	80 31       	cpi	r24, 0x10	; 16
    1f32:	28 f4       	brcc	.+10     	; 0x1f3e <LCD_u8GoToXY+0x3e>
	{
		LCD_voidSendCommand((0x40) + col + 128);
    1f34:	8a 81       	ldd	r24, Y+2	; 0x02
    1f36:	80 54       	subi	r24, 0x40	; 64
    1f38:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_voidSendCommand>
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <LCD_u8GoToXY+0x42>
	}
	else
	{
		Local_u8PinState = 1;
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8PinState;
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	cf 91       	pop	r28
    1f4c:	df 91       	pop	r29
    1f4e:	08 95       	ret

00001f50 <LCD_voidClearDisplay>:

void LCD_voidClearDisplay()
{
    1f50:	df 93       	push	r29
    1f52:	cf 93       	push	r28
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
    1f58:	2e 97       	sbiw	r28, 0x0e	; 14
    1f5a:	0f b6       	in	r0, 0x3f	; 63
    1f5c:	f8 94       	cli
    1f5e:	de bf       	out	0x3e, r29	; 62
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCommand(1);
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_voidSendCommand>
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	a0 e0       	ldi	r26, 0x00	; 0
    1f70:	b0 e4       	ldi	r27, 0x40	; 64
    1f72:	8b 87       	std	Y+11, r24	; 0x0b
    1f74:	9c 87       	std	Y+12, r25	; 0x0c
    1f76:	ad 87       	std	Y+13, r26	; 0x0d
    1f78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	4a ef       	ldi	r20, 0xFA	; 250
    1f88:	54 e4       	ldi	r21, 0x44	; 68
    1f8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	8f 83       	std	Y+7, r24	; 0x07
    1f94:	98 87       	std	Y+8, r25	; 0x08
    1f96:	a9 87       	std	Y+9, r26	; 0x09
    1f98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f9c:	78 85       	ldd	r23, Y+8	; 0x08
    1f9e:	89 85       	ldd	r24, Y+9	; 0x09
    1fa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	40 e8       	ldi	r20, 0x80	; 128
    1fa8:	5f e3       	ldi	r21, 0x3F	; 63
    1faa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fae:	88 23       	and	r24, r24
    1fb0:	2c f4       	brge	.+10     	; 0x1fbc <LCD_voidClearDisplay+0x6c>
		__ticks = 1;
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	9e 83       	std	Y+6, r25	; 0x06
    1fb8:	8d 83       	std	Y+5, r24	; 0x05
    1fba:	3f c0       	rjmp	.+126    	; 0x203a <LCD_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    1fbc:	6f 81       	ldd	r22, Y+7	; 0x07
    1fbe:	78 85       	ldd	r23, Y+8	; 0x08
    1fc0:	89 85       	ldd	r24, Y+9	; 0x09
    1fc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	3f ef       	ldi	r19, 0xFF	; 255
    1fc8:	4f e7       	ldi	r20, 0x7F	; 127
    1fca:	57 e4       	ldi	r21, 0x47	; 71
    1fcc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fd0:	18 16       	cp	r1, r24
    1fd2:	4c f5       	brge	.+82     	; 0x2026 <LCD_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fda:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e2       	ldi	r20, 0x20	; 32
    1fe2:	51 e4       	ldi	r21, 0x41	; 65
    1fe4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	bc 01       	movw	r22, r24
    1fee:	cd 01       	movw	r24, r26
    1ff0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	9e 83       	std	Y+6, r25	; 0x06
    1ffa:	8d 83       	std	Y+5, r24	; 0x05
    1ffc:	0f c0       	rjmp	.+30     	; 0x201c <LCD_voidClearDisplay+0xcc>
    1ffe:	88 ec       	ldi	r24, 0xC8	; 200
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	9c 83       	std	Y+4, r25	; 0x04
    2004:	8b 83       	std	Y+3, r24	; 0x03
    2006:	8b 81       	ldd	r24, Y+3	; 0x03
    2008:	9c 81       	ldd	r25, Y+4	; 0x04
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <LCD_voidClearDisplay+0xba>
    200e:	9c 83       	std	Y+4, r25	; 0x04
    2010:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2012:	8d 81       	ldd	r24, Y+5	; 0x05
    2014:	9e 81       	ldd	r25, Y+6	; 0x06
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	9e 83       	std	Y+6, r25	; 0x06
    201a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201c:	8d 81       	ldd	r24, Y+5	; 0x05
    201e:	9e 81       	ldd	r25, Y+6	; 0x06
    2020:	00 97       	sbiw	r24, 0x00	; 0
    2022:	69 f7       	brne	.-38     	; 0x1ffe <LCD_voidClearDisplay+0xae>
    2024:	14 c0       	rjmp	.+40     	; 0x204e <LCD_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2026:	6f 81       	ldd	r22, Y+7	; 0x07
    2028:	78 85       	ldd	r23, Y+8	; 0x08
    202a:	89 85       	ldd	r24, Y+9	; 0x09
    202c:	9a 85       	ldd	r25, Y+10	; 0x0a
    202e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	9e 83       	std	Y+6, r25	; 0x06
    2038:	8d 83       	std	Y+5, r24	; 0x05
    203a:	8d 81       	ldd	r24, Y+5	; 0x05
    203c:	9e 81       	ldd	r25, Y+6	; 0x06
    203e:	9a 83       	std	Y+2, r25	; 0x02
    2040:	89 83       	std	Y+1, r24	; 0x01
    2042:	89 81       	ldd	r24, Y+1	; 0x01
    2044:	9a 81       	ldd	r25, Y+2	; 0x02
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	f1 f7       	brne	.-4      	; 0x2046 <LCD_voidClearDisplay+0xf6>
    204a:	9a 83       	std	Y+2, r25	; 0x02
    204c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    204e:	2e 96       	adiw	r28, 0x0e	; 14
    2050:	0f b6       	in	r0, 0x3f	; 63
    2052:	f8 94       	cli
    2054:	de bf       	out	0x3e, r29	; 62
    2056:	0f be       	out	0x3f, r0	; 63
    2058:	cd bf       	out	0x3d, r28	; 61
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	08 95       	ret

00002060 <LED_u8Init>:
#include "LED_Configuration.h"
#include "LED_Interface.h"
#include "LED_Private.h"

u8 LED_u8Init(LED_t Copy_pstrLed)
{
    2060:	df 93       	push	r29
    2062:	cf 93       	push	r28
    2064:	00 d0       	rcall	.+0      	; 0x2066 <LED_u8Init+0x6>
    2066:	00 d0       	rcall	.+0      	; 0x2068 <LED_u8Init+0x8>
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	6a 83       	std	Y+2, r22	; 0x02
    206e:	7b 83       	std	Y+3, r23	; 0x03
    2070:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8ErrorState = ES_OK;
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	89 83       	std	Y+1, r24	; 0x01
	Local_u8ErrorState = DIO_enuSetPinDirection(Copy_pstrLed.Port , Copy_pstrLed.Pin , DIO_u8OUTPUT);
    2076:	8a 81       	ldd	r24, Y+2	; 0x02
    2078:	9b 81       	ldd	r25, Y+3	; 0x03
    207a:	69 2f       	mov	r22, r25
    207c:	41 e0       	ldi	r20, 0x01	; 1
    207e:	0e 94 a8 07 	call	0xf50	; 0xf50 <DIO_enuSetPinDirection>
    2082:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2084:	89 81       	ldd	r24, Y+1	; 0x01
}
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	08 95       	ret

00002094 <LED_u8TurnON>:

u8 LED_u8TurnON(LED_t Copy_pstrLedID)
{
    2094:	df 93       	push	r29
    2096:	cf 93       	push	r28
    2098:	00 d0       	rcall	.+0      	; 0x209a <LED_u8TurnON+0x6>
    209a:	00 d0       	rcall	.+0      	; 0x209c <LED_u8TurnON+0x8>
    209c:	cd b7       	in	r28, 0x3d	; 61
    209e:	de b7       	in	r29, 0x3e	; 62
    20a0:	6a 83       	std	Y+2, r22	; 0x02
    20a2:	7b 83       	std	Y+3, r23	; 0x03
    20a4:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8ErrorState = ES_OK;
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pstrLedID.Active_State == ACTIVE_HIGH)
    20aa:	8c 81       	ldd	r24, Y+4	; 0x04
    20ac:	81 30       	cpi	r24, 0x01	; 1
    20ae:	41 f4       	brne	.+16     	; 0x20c0 <LED_u8TurnON+0x2c>
	{
		Local_u8ErrorState = DIO_enuSetPinValue(Copy_pstrLedID.Port , Copy_pstrLedID.Pin , DIO_u8LOW);
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
    20b2:	9b 81       	ldd	r25, Y+3	; 0x03
    20b4:	69 2f       	mov	r22, r25
    20b6:	40 e0       	ldi	r20, 0x00	; 0
    20b8:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_enuSetPinValue>
    20bc:	89 83       	std	Y+1, r24	; 0x01
    20be:	0a c0       	rjmp	.+20     	; 0x20d4 <LED_u8TurnON+0x40>
	}
	else if(Copy_pstrLedID.Active_State == ACTIVE_LOW)
    20c0:	8c 81       	ldd	r24, Y+4	; 0x04
    20c2:	88 23       	and	r24, r24
    20c4:	39 f4       	brne	.+14     	; 0x20d4 <LED_u8TurnON+0x40>
	{
		Local_u8ErrorState = DIO_enuSetPinValue(Copy_pstrLedID.Port , Copy_pstrLedID.Pin , DIO_u8HIGH);
    20c6:	8a 81       	ldd	r24, Y+2	; 0x02
    20c8:	9b 81       	ldd	r25, Y+3	; 0x03
    20ca:	69 2f       	mov	r22, r25
    20cc:	41 e0       	ldi	r20, 0x01	; 1
    20ce:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_enuSetPinValue>
    20d2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	08 95       	ret

000020e4 <LED_u8TurnOFF>:

u8 LED_u8TurnOFF(LED_t Copy_pstrLedID)
{
    20e4:	df 93       	push	r29
    20e6:	cf 93       	push	r28
    20e8:	00 d0       	rcall	.+0      	; 0x20ea <LED_u8TurnOFF+0x6>
    20ea:	00 d0       	rcall	.+0      	; 0x20ec <LED_u8TurnOFF+0x8>
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
    20f0:	6a 83       	std	Y+2, r22	; 0x02
    20f2:	7b 83       	std	Y+3, r23	; 0x03
    20f4:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8ErrorState = ES_OK;
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pstrLedID.Active_State == ACTIVE_HIGH)
    20fa:	8c 81       	ldd	r24, Y+4	; 0x04
    20fc:	81 30       	cpi	r24, 0x01	; 1
    20fe:	41 f4       	brne	.+16     	; 0x2110 <LED_u8TurnOFF+0x2c>
	{
		Local_u8ErrorState = DIO_enuSetPinValue(Copy_pstrLedID.Port , Copy_pstrLedID.Pin , DIO_u8HIGH);
    2100:	8a 81       	ldd	r24, Y+2	; 0x02
    2102:	9b 81       	ldd	r25, Y+3	; 0x03
    2104:	69 2f       	mov	r22, r25
    2106:	41 e0       	ldi	r20, 0x01	; 1
    2108:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_enuSetPinValue>
    210c:	89 83       	std	Y+1, r24	; 0x01
    210e:	0a c0       	rjmp	.+20     	; 0x2124 <LED_u8TurnOFF+0x40>
	}
	else if(Copy_pstrLedID.Active_State == ACTIVE_LOW)
    2110:	8c 81       	ldd	r24, Y+4	; 0x04
    2112:	88 23       	and	r24, r24
    2114:	39 f4       	brne	.+14     	; 0x2124 <LED_u8TurnOFF+0x40>
	{
		Local_u8ErrorState = DIO_enuSetPinValue(Copy_pstrLedID.Port , Copy_pstrLedID.Pin , DIO_u8LOW);
    2116:	8a 81       	ldd	r24, Y+2	; 0x02
    2118:	9b 81       	ldd	r25, Y+3	; 0x03
    211a:	69 2f       	mov	r22, r25
    211c:	40 e0       	ldi	r20, 0x00	; 0
    211e:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_enuSetPinValue>
    2122:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2124:	89 81       	ldd	r24, Y+1	; 0x01
}
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	08 95       	ret

00002134 <LED_u8Toggle>:

u8 LED_u8Toggle(LED_t Copy_pstrLedID)
{
    2134:	df 93       	push	r29
    2136:	cf 93       	push	r28
    2138:	00 d0       	rcall	.+0      	; 0x213a <LED_u8Toggle+0x6>
    213a:	00 d0       	rcall	.+0      	; 0x213c <LED_u8Toggle+0x8>
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
    2140:	6a 83       	std	Y+2, r22	; 0x02
    2142:	7b 83       	std	Y+3, r23	; 0x03
    2144:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8ErrorState = ES_OK;
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	89 83       	std	Y+1, r24	; 0x01
	Local_u8ErrorState = DIO_enuTogPin(Copy_pstrLedID.Port , Copy_pstrLedID.Pin);
    214a:	8a 81       	ldd	r24, Y+2	; 0x02
    214c:	9b 81       	ldd	r25, Y+3	; 0x03
    214e:	69 2f       	mov	r22, r25
    2150:	0e 94 c6 09 	call	0x138c	; 0x138c <DIO_enuTogPin>
    2154:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2156:	89 81       	ldd	r24, Y+1	; 0x01
}
    2158:	0f 90       	pop	r0
    215a:	0f 90       	pop	r0
    215c:	0f 90       	pop	r0
    215e:	0f 90       	pop	r0
    2160:	cf 91       	pop	r28
    2162:	df 91       	pop	r29
    2164:	08 95       	ret

00002166 <Switch_u8Init>:
#include "SWITCH_Interface.h"
#include "SWITCH_Private.h"


u8 Switch_u8Init(SW_t copy_SWAstr)
{
    2166:	df 93       	push	r29
    2168:	cf 93       	push	r28
    216a:	00 d0       	rcall	.+0      	; 0x216c <Switch_u8Init+0x6>
    216c:	00 d0       	rcall	.+0      	; 0x216e <Switch_u8Init+0x8>
    216e:	cd b7       	in	r28, 0x3d	; 61
    2170:	de b7       	in	r29, 0x3e	; 62
    2172:	6a 83       	std	Y+2, r22	; 0x02
    2174:	7b 83       	std	Y+3, r23	; 0x03
    2176:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8ErrorState = ES_OK;
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	89 83       	std	Y+1, r24	; 0x01
	Local_u8ErrorState = DIO_enuSetPinDirection(copy_SWAstr.Switch_PortID , copy_SWAstr.Switch_PinID , DIO_u8INPUT);
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	9b 81       	ldd	r25, Y+3	; 0x03
    2180:	69 2f       	mov	r22, r25
    2182:	40 e0       	ldi	r20, 0x00	; 0
    2184:	0e 94 a8 07 	call	0xf50	; 0xf50 <DIO_enuSetPinDirection>
    2188:	89 83       	std	Y+1, r24	; 0x01
	Local_u8ErrorState = DIO_enuSetPinValue(copy_SWAstr.Switch_PortID , copy_SWAstr.Switch_PinID , copy_SWAstr.Switch_status);
    218a:	8a 81       	ldd	r24, Y+2	; 0x02
    218c:	9b 81       	ldd	r25, Y+3	; 0x03
    218e:	2c 81       	ldd	r18, Y+4	; 0x04
    2190:	69 2f       	mov	r22, r25
    2192:	42 2f       	mov	r20, r18
    2194:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_enuSetPinValue>
    2198:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    219a:	89 81       	ldd	r24, Y+1	; 0x01
}
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	08 95       	ret

000021aa <Switch_u8GetState>:

u8 Switch_u8GetState(SW_t copy_SWAstr, u8 *copy_SWState)
{
    21aa:	df 93       	push	r29
    21ac:	cf 93       	push	r28
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
    21b2:	27 97       	sbiw	r28, 0x07	; 7
    21b4:	0f b6       	in	r0, 0x3f	; 63
    21b6:	f8 94       	cli
    21b8:	de bf       	out	0x3e, r29	; 62
    21ba:	0f be       	out	0x3f, r0	; 63
    21bc:	cd bf       	out	0x3d, r28	; 61
    21be:	6b 83       	std	Y+3, r22	; 0x03
    21c0:	7c 83       	std	Y+4, r23	; 0x04
    21c2:	8d 83       	std	Y+5, r24	; 0x05
    21c4:	5f 83       	std	Y+7, r21	; 0x07
    21c6:	4e 83       	std	Y+6, r20	; 0x06
	u8 Local_u8ErrorState = ES_OK;
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	89 83       	std	Y+1, r24	; 0x01
	if(copy_SWState == NULL)
    21cc:	8e 81       	ldd	r24, Y+6	; 0x06
    21ce:	9f 81       	ldd	r25, Y+7	; 0x07
    21d0:	00 97       	sbiw	r24, 0x00	; 0
    21d2:	19 f4       	brne	.+6      	; 0x21da <Switch_u8GetState+0x30>
	{
		Local_u8ErrorState = ES_NULL_POINTER;
    21d4:	82 e0       	ldi	r24, 0x02	; 2
    21d6:	89 83       	std	Y+1, r24	; 0x01
    21d8:	49 c0       	rjmp	.+146    	; 0x226c <Switch_u8GetState+0xc2>
	}
	else
	{
		u8 Local_u8PinValue;
		Local_u8ErrorState = DIO_enuGetPinValue(copy_SWAstr.Switch_PortID , copy_SWAstr.Switch_PinID , &Local_u8PinValue);
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	9c 81       	ldd	r25, Y+4	; 0x04
    21de:	9e 01       	movw	r18, r28
    21e0:	2e 5f       	subi	r18, 0xFE	; 254
    21e2:	3f 4f       	sbci	r19, 0xFF	; 255
    21e4:	69 2f       	mov	r22, r25
    21e6:	a9 01       	movw	r20, r18
    21e8:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <DIO_enuGetPinValue>
    21ec:	89 83       	std	Y+1, r24	; 0x01
		if(copy_SWAstr.Switch_status == DIO_u8HIGH)
    21ee:	8d 81       	ldd	r24, Y+5	; 0x05
    21f0:	81 30       	cpi	r24, 0x01	; 1
    21f2:	e9 f4       	brne	.+58     	; 0x222e <Switch_u8GetState+0x84>
		{
			if(Local_u8PinValue == 0)
    21f4:	8a 81       	ldd	r24, Y+2	; 0x02
    21f6:	88 23       	and	r24, r24
    21f8:	99 f4       	brne	.+38     	; 0x2220 <Switch_u8GetState+0x76>
			{
				*copy_SWState = SW_PRESSED;
    21fa:	ee 81       	ldd	r30, Y+6	; 0x06
    21fc:	ff 81       	ldd	r31, Y+7	; 0x07
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	80 83       	st	Z, r24
    2202:	0a c0       	rjmp	.+20     	; 0x2218 <Switch_u8GetState+0x6e>
				while(Local_u8PinValue == 0)
				{
					Local_u8ErrorState = DIO_enuGetPinValue(copy_SWAstr.Switch_PortID , copy_SWAstr.Switch_PinID , &Local_u8PinValue);
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	9c 81       	ldd	r25, Y+4	; 0x04
    2208:	9e 01       	movw	r18, r28
    220a:	2e 5f       	subi	r18, 0xFE	; 254
    220c:	3f 4f       	sbci	r19, 0xFF	; 255
    220e:	69 2f       	mov	r22, r25
    2210:	a9 01       	movw	r20, r18
    2212:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <DIO_enuGetPinValue>
    2216:	89 83       	std	Y+1, r24	; 0x01
		if(copy_SWAstr.Switch_status == DIO_u8HIGH)
		{
			if(Local_u8PinValue == 0)
			{
				*copy_SWState = SW_PRESSED;
				while(Local_u8PinValue == 0)
    2218:	8a 81       	ldd	r24, Y+2	; 0x02
    221a:	88 23       	and	r24, r24
    221c:	99 f3       	breq	.-26     	; 0x2204 <Switch_u8GetState+0x5a>
    221e:	26 c0       	rjmp	.+76     	; 0x226c <Switch_u8GetState+0xc2>
				{
					Local_u8ErrorState = DIO_enuGetPinValue(copy_SWAstr.Switch_PortID , copy_SWAstr.Switch_PinID , &Local_u8PinValue);
				}
			}
			else if(Local_u8PinValue == 1)
    2220:	8a 81       	ldd	r24, Y+2	; 0x02
    2222:	81 30       	cpi	r24, 0x01	; 1
    2224:	19 f5       	brne	.+70     	; 0x226c <Switch_u8GetState+0xc2>
			{
				*copy_SWState = SW_NOTPRESSED;
    2226:	ee 81       	ldd	r30, Y+6	; 0x06
    2228:	ff 81       	ldd	r31, Y+7	; 0x07
    222a:	10 82       	st	Z, r1
    222c:	1f c0       	rjmp	.+62     	; 0x226c <Switch_u8GetState+0xc2>
			}
		}
		else if(copy_SWAstr.Switch_status == DIO_u8LOW)
    222e:	8d 81       	ldd	r24, Y+5	; 0x05
    2230:	88 23       	and	r24, r24
    2232:	e1 f4       	brne	.+56     	; 0x226c <Switch_u8GetState+0xc2>
		{
			if(Local_u8PinValue == 1)
    2234:	8a 81       	ldd	r24, Y+2	; 0x02
    2236:	81 30       	cpi	r24, 0x01	; 1
    2238:	99 f4       	brne	.+38     	; 0x2260 <Switch_u8GetState+0xb6>
			{
				*copy_SWState = SW_PRESSED;
    223a:	ee 81       	ldd	r30, Y+6	; 0x06
    223c:	ff 81       	ldd	r31, Y+7	; 0x07
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	80 83       	st	Z, r24
    2242:	0a c0       	rjmp	.+20     	; 0x2258 <Switch_u8GetState+0xae>
				while(Local_u8PinValue == 1)
				{
					Local_u8ErrorState = DIO_enuGetPinValue(copy_SWAstr.Switch_PortID , copy_SWAstr.Switch_PinID , &Local_u8PinValue);
    2244:	8b 81       	ldd	r24, Y+3	; 0x03
    2246:	9c 81       	ldd	r25, Y+4	; 0x04
    2248:	9e 01       	movw	r18, r28
    224a:	2e 5f       	subi	r18, 0xFE	; 254
    224c:	3f 4f       	sbci	r19, 0xFF	; 255
    224e:	69 2f       	mov	r22, r25
    2250:	a9 01       	movw	r20, r18
    2252:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <DIO_enuGetPinValue>
    2256:	89 83       	std	Y+1, r24	; 0x01
		else if(copy_SWAstr.Switch_status == DIO_u8LOW)
		{
			if(Local_u8PinValue == 1)
			{
				*copy_SWState = SW_PRESSED;
				while(Local_u8PinValue == 1)
    2258:	8a 81       	ldd	r24, Y+2	; 0x02
    225a:	81 30       	cpi	r24, 0x01	; 1
    225c:	99 f3       	breq	.-26     	; 0x2244 <Switch_u8GetState+0x9a>
    225e:	06 c0       	rjmp	.+12     	; 0x226c <Switch_u8GetState+0xc2>
				{
					Local_u8ErrorState = DIO_enuGetPinValue(copy_SWAstr.Switch_PortID , copy_SWAstr.Switch_PinID , &Local_u8PinValue);
				}
			}
			else if(Local_u8PinValue == 0)
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	88 23       	and	r24, r24
    2264:	19 f4       	brne	.+6      	; 0x226c <Switch_u8GetState+0xc2>
			{
				*copy_SWState = SW_NOTPRESSED;
    2266:	ee 81       	ldd	r30, Y+6	; 0x06
    2268:	ff 81       	ldd	r31, Y+7	; 0x07
    226a:	10 82       	st	Z, r1
			}
		}
	}
	return Local_u8ErrorState;
    226c:	89 81       	ldd	r24, Y+1	; 0x01
}
    226e:	27 96       	adiw	r28, 0x07	; 7
    2270:	0f b6       	in	r0, 0x3f	; 63
    2272:	f8 94       	cli
    2274:	de bf       	out	0x3e, r29	; 62
    2276:	0f be       	out	0x3f, r0	; 63
    2278:	cd bf       	out	0x3d, r28	; 61
    227a:	cf 91       	pop	r28
    227c:	df 91       	pop	r29
    227e:	08 95       	ret

00002280 <main>:
#include "LCD_Interface.h"

#include <util/delay.h>

void main()
{
    2280:	df 93       	push	r29
    2282:	cf 93       	push	r28
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
    2288:	c1 58       	subi	r28, 0x81	; 129
    228a:	d0 40       	sbci	r29, 0x00	; 0
    228c:	0f b6       	in	r0, 0x3f	; 63
    228e:	f8 94       	cli
    2290:	de bf       	out	0x3e, r29	; 62
    2292:	0f be       	out	0x3f, r0	; 63
    2294:	cd bf       	out	0x3d, r28	; 61
	u8 Lives = 3;
    2296:	fe 01       	movw	r30, r28
    2298:	ed 5b       	subi	r30, 0xBD	; 189
    229a:	ff 4f       	sbci	r31, 0xFF	; 255
    229c:	83 e0       	ldi	r24, 0x03	; 3
    229e:	80 83       	st	Z, r24
	u8 Score = 0;
    22a0:	fe 01       	movw	r30, r28
    22a2:	ee 5b       	subi	r30, 0xBE	; 190
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	10 82       	st	Z, r1
	u8 Position = 0;
    22a8:	fe 01       	movw	r30, r28
    22aa:	ef 5b       	subi	r30, 0xBF	; 191
    22ac:	ff 4f       	sbci	r31, 0xFF	; 255
    22ae:	10 82       	st	Z, r1
	u8 Step = 2;
    22b0:	82 e0       	ldi	r24, 0x02	; 2
    22b2:	fe 01       	movw	r30, r28
    22b4:	e0 5c       	subi	r30, 0xC0	; 192
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	80 83       	st	Z, r24
	u16 Time = 250;
    22ba:	8a ef       	ldi	r24, 0xFA	; 250
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	9f af       	std	Y+63, r25	; 0x3f
    22c0:	8e af       	std	Y+62, r24	; 0x3e
	u16 Time_Step = 20;
    22c2:	84 e1       	ldi	r24, 0x14	; 20
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	9d af       	std	Y+61, r25	; 0x3d
    22c8:	8c af       	std	Y+60, r24	; 0x3c
	u8 Time_Sstep = 1;
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	8b af       	std	Y+59, r24	; 0x3b

	u8 State , State_1 , State_2 , State_3 , State_4 , State_5;
	u8 Flag = 0;
    22ce:	19 ae       	std	Y+57, r1	; 0x39

	LED_t LED_1 = {DIO_u8PORTC , DIO_u8PIN0 , DIO_u8LOW};
    22d0:	ce 01       	movw	r24, r28
    22d2:	87 5b       	subi	r24, 0xB7	; 183
    22d4:	9f 4f       	sbci	r25, 0xFF	; 255
    22d6:	a1 96       	adiw	r28, 0x21	; 33
    22d8:	9f af       	std	Y+63, r25	; 0x3f
    22da:	8e af       	std	Y+62, r24	; 0x3e
    22dc:	a1 97       	sbiw	r28, 0x21	; 33
    22de:	43 eb       	ldi	r20, 0xB3	; 179
    22e0:	51 e0       	ldi	r21, 0x01	; 1
    22e2:	a3 96       	adiw	r28, 0x23	; 35
    22e4:	5f af       	std	Y+63, r21	; 0x3f
    22e6:	4e af       	std	Y+62, r20	; 0x3e
    22e8:	a3 97       	sbiw	r28, 0x23	; 35
    22ea:	53 e0       	ldi	r21, 0x03	; 3
    22ec:	a4 96       	adiw	r28, 0x24	; 36
    22ee:	5f af       	std	Y+63, r21	; 0x3f
    22f0:	a4 97       	sbiw	r28, 0x24	; 36
    22f2:	a3 96       	adiw	r28, 0x23	; 35
    22f4:	ee ad       	ldd	r30, Y+62	; 0x3e
    22f6:	ff ad       	ldd	r31, Y+63	; 0x3f
    22f8:	a3 97       	sbiw	r28, 0x23	; 35
    22fa:	00 80       	ld	r0, Z
    22fc:	a3 96       	adiw	r28, 0x23	; 35
    22fe:	4e ad       	ldd	r20, Y+62	; 0x3e
    2300:	5f ad       	ldd	r21, Y+63	; 0x3f
    2302:	a3 97       	sbiw	r28, 0x23	; 35
    2304:	4f 5f       	subi	r20, 0xFF	; 255
    2306:	5f 4f       	sbci	r21, 0xFF	; 255
    2308:	a3 96       	adiw	r28, 0x23	; 35
    230a:	5f af       	std	Y+63, r21	; 0x3f
    230c:	4e af       	std	Y+62, r20	; 0x3e
    230e:	a3 97       	sbiw	r28, 0x23	; 35
    2310:	a1 96       	adiw	r28, 0x21	; 33
    2312:	ee ad       	ldd	r30, Y+62	; 0x3e
    2314:	ff ad       	ldd	r31, Y+63	; 0x3f
    2316:	a1 97       	sbiw	r28, 0x21	; 33
    2318:	00 82       	st	Z, r0
    231a:	a1 96       	adiw	r28, 0x21	; 33
    231c:	4e ad       	ldd	r20, Y+62	; 0x3e
    231e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2320:	a1 97       	sbiw	r28, 0x21	; 33
    2322:	4f 5f       	subi	r20, 0xFF	; 255
    2324:	5f 4f       	sbci	r21, 0xFF	; 255
    2326:	a1 96       	adiw	r28, 0x21	; 33
    2328:	5f af       	std	Y+63, r21	; 0x3f
    232a:	4e af       	std	Y+62, r20	; 0x3e
    232c:	a1 97       	sbiw	r28, 0x21	; 33
    232e:	a4 96       	adiw	r28, 0x24	; 36
    2330:	5f ad       	ldd	r21, Y+63	; 0x3f
    2332:	a4 97       	sbiw	r28, 0x24	; 36
    2334:	51 50       	subi	r21, 0x01	; 1
    2336:	a4 96       	adiw	r28, 0x24	; 36
    2338:	5f af       	std	Y+63, r21	; 0x3f
    233a:	a4 97       	sbiw	r28, 0x24	; 36
    233c:	a4 96       	adiw	r28, 0x24	; 36
    233e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2340:	a4 97       	sbiw	r28, 0x24	; 36
    2342:	88 23       	and	r24, r24
    2344:	b1 f6       	brne	.-84     	; 0x22f2 <main+0x72>
	LED_u8Init(LED_1);
    2346:	fe 01       	movw	r30, r28
    2348:	e7 5b       	subi	r30, 0xB7	; 183
    234a:	ff 4f       	sbci	r31, 0xFF	; 255
    234c:	60 81       	ld	r22, Z
    234e:	71 81       	ldd	r23, Z+1	; 0x01
    2350:	82 81       	ldd	r24, Z+2	; 0x02
    2352:	0e 94 30 10 	call	0x2060	; 0x2060 <LED_u8Init>
	LED_t LED_2 = {DIO_u8PORTC , DIO_u8PIN1 , DIO_u8LOW};
    2356:	ce 01       	movw	r24, r28
    2358:	84 5b       	subi	r24, 0xB4	; 180
    235a:	9f 4f       	sbci	r25, 0xFF	; 255
    235c:	a6 96       	adiw	r28, 0x26	; 38
    235e:	9f af       	std	Y+63, r25	; 0x3f
    2360:	8e af       	std	Y+62, r24	; 0x3e
    2362:	a6 97       	sbiw	r28, 0x26	; 38
    2364:	e0 eb       	ldi	r30, 0xB0	; 176
    2366:	f1 e0       	ldi	r31, 0x01	; 1
    2368:	a8 96       	adiw	r28, 0x28	; 40
    236a:	ff af       	std	Y+63, r31	; 0x3f
    236c:	ee af       	std	Y+62, r30	; 0x3e
    236e:	a8 97       	sbiw	r28, 0x28	; 40
    2370:	f3 e0       	ldi	r31, 0x03	; 3
    2372:	a9 96       	adiw	r28, 0x29	; 41
    2374:	ff af       	std	Y+63, r31	; 0x3f
    2376:	a9 97       	sbiw	r28, 0x29	; 41
    2378:	a8 96       	adiw	r28, 0x28	; 40
    237a:	ee ad       	ldd	r30, Y+62	; 0x3e
    237c:	ff ad       	ldd	r31, Y+63	; 0x3f
    237e:	a8 97       	sbiw	r28, 0x28	; 40
    2380:	00 80       	ld	r0, Z
    2382:	a8 96       	adiw	r28, 0x28	; 40
    2384:	4e ad       	ldd	r20, Y+62	; 0x3e
    2386:	5f ad       	ldd	r21, Y+63	; 0x3f
    2388:	a8 97       	sbiw	r28, 0x28	; 40
    238a:	4f 5f       	subi	r20, 0xFF	; 255
    238c:	5f 4f       	sbci	r21, 0xFF	; 255
    238e:	a8 96       	adiw	r28, 0x28	; 40
    2390:	5f af       	std	Y+63, r21	; 0x3f
    2392:	4e af       	std	Y+62, r20	; 0x3e
    2394:	a8 97       	sbiw	r28, 0x28	; 40
    2396:	a6 96       	adiw	r28, 0x26	; 38
    2398:	ee ad       	ldd	r30, Y+62	; 0x3e
    239a:	ff ad       	ldd	r31, Y+63	; 0x3f
    239c:	a6 97       	sbiw	r28, 0x26	; 38
    239e:	00 82       	st	Z, r0
    23a0:	a6 96       	adiw	r28, 0x26	; 38
    23a2:	4e ad       	ldd	r20, Y+62	; 0x3e
    23a4:	5f ad       	ldd	r21, Y+63	; 0x3f
    23a6:	a6 97       	sbiw	r28, 0x26	; 38
    23a8:	4f 5f       	subi	r20, 0xFF	; 255
    23aa:	5f 4f       	sbci	r21, 0xFF	; 255
    23ac:	a6 96       	adiw	r28, 0x26	; 38
    23ae:	5f af       	std	Y+63, r21	; 0x3f
    23b0:	4e af       	std	Y+62, r20	; 0x3e
    23b2:	a6 97       	sbiw	r28, 0x26	; 38
    23b4:	a9 96       	adiw	r28, 0x29	; 41
    23b6:	5f ad       	ldd	r21, Y+63	; 0x3f
    23b8:	a9 97       	sbiw	r28, 0x29	; 41
    23ba:	51 50       	subi	r21, 0x01	; 1
    23bc:	a9 96       	adiw	r28, 0x29	; 41
    23be:	5f af       	std	Y+63, r21	; 0x3f
    23c0:	a9 97       	sbiw	r28, 0x29	; 41
    23c2:	a9 96       	adiw	r28, 0x29	; 41
    23c4:	8f ad       	ldd	r24, Y+63	; 0x3f
    23c6:	a9 97       	sbiw	r28, 0x29	; 41
    23c8:	88 23       	and	r24, r24
    23ca:	b1 f6       	brne	.-84     	; 0x2378 <main+0xf8>
	LED_u8Init(LED_2);
    23cc:	fe 01       	movw	r30, r28
    23ce:	e4 5b       	subi	r30, 0xB4	; 180
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	60 81       	ld	r22, Z
    23d4:	71 81       	ldd	r23, Z+1	; 0x01
    23d6:	82 81       	ldd	r24, Z+2	; 0x02
    23d8:	0e 94 30 10 	call	0x2060	; 0x2060 <LED_u8Init>

	SW_t Switch_1 = {DIO_u8PORTA , DIO_u8PIN0 , DIO_u8HIGH};
    23dc:	ce 01       	movw	r24, r28
    23de:	81 5b       	subi	r24, 0xB1	; 177
    23e0:	9f 4f       	sbci	r25, 0xFF	; 255
    23e2:	ab 96       	adiw	r28, 0x2b	; 43
    23e4:	9f af       	std	Y+63, r25	; 0x3f
    23e6:	8e af       	std	Y+62, r24	; 0x3e
    23e8:	ab 97       	sbiw	r28, 0x2b	; 43
    23ea:	ed ea       	ldi	r30, 0xAD	; 173
    23ec:	f1 e0       	ldi	r31, 0x01	; 1
    23ee:	ad 96       	adiw	r28, 0x2d	; 45
    23f0:	ff af       	std	Y+63, r31	; 0x3f
    23f2:	ee af       	std	Y+62, r30	; 0x3e
    23f4:	ad 97       	sbiw	r28, 0x2d	; 45
    23f6:	f3 e0       	ldi	r31, 0x03	; 3
    23f8:	ae 96       	adiw	r28, 0x2e	; 46
    23fa:	ff af       	std	Y+63, r31	; 0x3f
    23fc:	ae 97       	sbiw	r28, 0x2e	; 46
    23fe:	ad 96       	adiw	r28, 0x2d	; 45
    2400:	ee ad       	ldd	r30, Y+62	; 0x3e
    2402:	ff ad       	ldd	r31, Y+63	; 0x3f
    2404:	ad 97       	sbiw	r28, 0x2d	; 45
    2406:	00 80       	ld	r0, Z
    2408:	ad 96       	adiw	r28, 0x2d	; 45
    240a:	4e ad       	ldd	r20, Y+62	; 0x3e
    240c:	5f ad       	ldd	r21, Y+63	; 0x3f
    240e:	ad 97       	sbiw	r28, 0x2d	; 45
    2410:	4f 5f       	subi	r20, 0xFF	; 255
    2412:	5f 4f       	sbci	r21, 0xFF	; 255
    2414:	ad 96       	adiw	r28, 0x2d	; 45
    2416:	5f af       	std	Y+63, r21	; 0x3f
    2418:	4e af       	std	Y+62, r20	; 0x3e
    241a:	ad 97       	sbiw	r28, 0x2d	; 45
    241c:	ab 96       	adiw	r28, 0x2b	; 43
    241e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2420:	ff ad       	ldd	r31, Y+63	; 0x3f
    2422:	ab 97       	sbiw	r28, 0x2b	; 43
    2424:	00 82       	st	Z, r0
    2426:	ab 96       	adiw	r28, 0x2b	; 43
    2428:	4e ad       	ldd	r20, Y+62	; 0x3e
    242a:	5f ad       	ldd	r21, Y+63	; 0x3f
    242c:	ab 97       	sbiw	r28, 0x2b	; 43
    242e:	4f 5f       	subi	r20, 0xFF	; 255
    2430:	5f 4f       	sbci	r21, 0xFF	; 255
    2432:	ab 96       	adiw	r28, 0x2b	; 43
    2434:	5f af       	std	Y+63, r21	; 0x3f
    2436:	4e af       	std	Y+62, r20	; 0x3e
    2438:	ab 97       	sbiw	r28, 0x2b	; 43
    243a:	ae 96       	adiw	r28, 0x2e	; 46
    243c:	5f ad       	ldd	r21, Y+63	; 0x3f
    243e:	ae 97       	sbiw	r28, 0x2e	; 46
    2440:	51 50       	subi	r21, 0x01	; 1
    2442:	ae 96       	adiw	r28, 0x2e	; 46
    2444:	5f af       	std	Y+63, r21	; 0x3f
    2446:	ae 97       	sbiw	r28, 0x2e	; 46
    2448:	ae 96       	adiw	r28, 0x2e	; 46
    244a:	8f ad       	ldd	r24, Y+63	; 0x3f
    244c:	ae 97       	sbiw	r28, 0x2e	; 46
    244e:	88 23       	and	r24, r24
    2450:	b1 f6       	brne	.-84     	; 0x23fe <main+0x17e>
	Switch_u8Init(Switch_1);
    2452:	fe 01       	movw	r30, r28
    2454:	e1 5b       	subi	r30, 0xB1	; 177
    2456:	ff 4f       	sbci	r31, 0xFF	; 255
    2458:	60 81       	ld	r22, Z
    245a:	71 81       	ldd	r23, Z+1	; 0x01
    245c:	82 81       	ldd	r24, Z+2	; 0x02
    245e:	0e 94 b3 10 	call	0x2166	; 0x2166 <Switch_u8Init>
	SW_t Switch_2 = {DIO_u8PORTA , DIO_u8PIN1 , DIO_u8HIGH};
    2462:	ce 01       	movw	r24, r28
    2464:	8e 5a       	subi	r24, 0xAE	; 174
    2466:	9f 4f       	sbci	r25, 0xFF	; 255
    2468:	e0 96       	adiw	r28, 0x30	; 48
    246a:	9f af       	std	Y+63, r25	; 0x3f
    246c:	8e af       	std	Y+62, r24	; 0x3e
    246e:	e0 97       	sbiw	r28, 0x30	; 48
    2470:	ea ea       	ldi	r30, 0xAA	; 170
    2472:	f1 e0       	ldi	r31, 0x01	; 1
    2474:	e2 96       	adiw	r28, 0x32	; 50
    2476:	ff af       	std	Y+63, r31	; 0x3f
    2478:	ee af       	std	Y+62, r30	; 0x3e
    247a:	e2 97       	sbiw	r28, 0x32	; 50
    247c:	f3 e0       	ldi	r31, 0x03	; 3
    247e:	e3 96       	adiw	r28, 0x33	; 51
    2480:	ff af       	std	Y+63, r31	; 0x3f
    2482:	e3 97       	sbiw	r28, 0x33	; 51
    2484:	e2 96       	adiw	r28, 0x32	; 50
    2486:	ee ad       	ldd	r30, Y+62	; 0x3e
    2488:	ff ad       	ldd	r31, Y+63	; 0x3f
    248a:	e2 97       	sbiw	r28, 0x32	; 50
    248c:	00 80       	ld	r0, Z
    248e:	e2 96       	adiw	r28, 0x32	; 50
    2490:	4e ad       	ldd	r20, Y+62	; 0x3e
    2492:	5f ad       	ldd	r21, Y+63	; 0x3f
    2494:	e2 97       	sbiw	r28, 0x32	; 50
    2496:	4f 5f       	subi	r20, 0xFF	; 255
    2498:	5f 4f       	sbci	r21, 0xFF	; 255
    249a:	e2 96       	adiw	r28, 0x32	; 50
    249c:	5f af       	std	Y+63, r21	; 0x3f
    249e:	4e af       	std	Y+62, r20	; 0x3e
    24a0:	e2 97       	sbiw	r28, 0x32	; 50
    24a2:	e0 96       	adiw	r28, 0x30	; 48
    24a4:	ee ad       	ldd	r30, Y+62	; 0x3e
    24a6:	ff ad       	ldd	r31, Y+63	; 0x3f
    24a8:	e0 97       	sbiw	r28, 0x30	; 48
    24aa:	00 82       	st	Z, r0
    24ac:	e0 96       	adiw	r28, 0x30	; 48
    24ae:	4e ad       	ldd	r20, Y+62	; 0x3e
    24b0:	5f ad       	ldd	r21, Y+63	; 0x3f
    24b2:	e0 97       	sbiw	r28, 0x30	; 48
    24b4:	4f 5f       	subi	r20, 0xFF	; 255
    24b6:	5f 4f       	sbci	r21, 0xFF	; 255
    24b8:	e0 96       	adiw	r28, 0x30	; 48
    24ba:	5f af       	std	Y+63, r21	; 0x3f
    24bc:	4e af       	std	Y+62, r20	; 0x3e
    24be:	e0 97       	sbiw	r28, 0x30	; 48
    24c0:	e3 96       	adiw	r28, 0x33	; 51
    24c2:	5f ad       	ldd	r21, Y+63	; 0x3f
    24c4:	e3 97       	sbiw	r28, 0x33	; 51
    24c6:	51 50       	subi	r21, 0x01	; 1
    24c8:	e3 96       	adiw	r28, 0x33	; 51
    24ca:	5f af       	std	Y+63, r21	; 0x3f
    24cc:	e3 97       	sbiw	r28, 0x33	; 51
    24ce:	e3 96       	adiw	r28, 0x33	; 51
    24d0:	8f ad       	ldd	r24, Y+63	; 0x3f
    24d2:	e3 97       	sbiw	r28, 0x33	; 51
    24d4:	88 23       	and	r24, r24
    24d6:	b1 f6       	brne	.-84     	; 0x2484 <main+0x204>
	Switch_u8Init(Switch_2);
    24d8:	fe 01       	movw	r30, r28
    24da:	ee 5a       	subi	r30, 0xAE	; 174
    24dc:	ff 4f       	sbci	r31, 0xFF	; 255
    24de:	60 81       	ld	r22, Z
    24e0:	71 81       	ldd	r23, Z+1	; 0x01
    24e2:	82 81       	ldd	r24, Z+2	; 0x02
    24e4:	0e 94 b3 10 	call	0x2166	; 0x2166 <Switch_u8Init>
	SW_t Switch_3 = {DIO_u8PORTA , DIO_u8PIN2 , DIO_u8HIGH};
    24e8:	ce 01       	movw	r24, r28
    24ea:	8b 5a       	subi	r24, 0xAB	; 171
    24ec:	9f 4f       	sbci	r25, 0xFF	; 255
    24ee:	e5 96       	adiw	r28, 0x35	; 53
    24f0:	9f af       	std	Y+63, r25	; 0x3f
    24f2:	8e af       	std	Y+62, r24	; 0x3e
    24f4:	e5 97       	sbiw	r28, 0x35	; 53
    24f6:	e7 ea       	ldi	r30, 0xA7	; 167
    24f8:	f1 e0       	ldi	r31, 0x01	; 1
    24fa:	e7 96       	adiw	r28, 0x37	; 55
    24fc:	ff af       	std	Y+63, r31	; 0x3f
    24fe:	ee af       	std	Y+62, r30	; 0x3e
    2500:	e7 97       	sbiw	r28, 0x37	; 55
    2502:	f3 e0       	ldi	r31, 0x03	; 3
    2504:	e8 96       	adiw	r28, 0x38	; 56
    2506:	ff af       	std	Y+63, r31	; 0x3f
    2508:	e8 97       	sbiw	r28, 0x38	; 56
    250a:	e7 96       	adiw	r28, 0x37	; 55
    250c:	ee ad       	ldd	r30, Y+62	; 0x3e
    250e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2510:	e7 97       	sbiw	r28, 0x37	; 55
    2512:	00 80       	ld	r0, Z
    2514:	e7 96       	adiw	r28, 0x37	; 55
    2516:	4e ad       	ldd	r20, Y+62	; 0x3e
    2518:	5f ad       	ldd	r21, Y+63	; 0x3f
    251a:	e7 97       	sbiw	r28, 0x37	; 55
    251c:	4f 5f       	subi	r20, 0xFF	; 255
    251e:	5f 4f       	sbci	r21, 0xFF	; 255
    2520:	e7 96       	adiw	r28, 0x37	; 55
    2522:	5f af       	std	Y+63, r21	; 0x3f
    2524:	4e af       	std	Y+62, r20	; 0x3e
    2526:	e7 97       	sbiw	r28, 0x37	; 55
    2528:	e5 96       	adiw	r28, 0x35	; 53
    252a:	ee ad       	ldd	r30, Y+62	; 0x3e
    252c:	ff ad       	ldd	r31, Y+63	; 0x3f
    252e:	e5 97       	sbiw	r28, 0x35	; 53
    2530:	00 82       	st	Z, r0
    2532:	e5 96       	adiw	r28, 0x35	; 53
    2534:	4e ad       	ldd	r20, Y+62	; 0x3e
    2536:	5f ad       	ldd	r21, Y+63	; 0x3f
    2538:	e5 97       	sbiw	r28, 0x35	; 53
    253a:	4f 5f       	subi	r20, 0xFF	; 255
    253c:	5f 4f       	sbci	r21, 0xFF	; 255
    253e:	e5 96       	adiw	r28, 0x35	; 53
    2540:	5f af       	std	Y+63, r21	; 0x3f
    2542:	4e af       	std	Y+62, r20	; 0x3e
    2544:	e5 97       	sbiw	r28, 0x35	; 53
    2546:	e8 96       	adiw	r28, 0x38	; 56
    2548:	5f ad       	ldd	r21, Y+63	; 0x3f
    254a:	e8 97       	sbiw	r28, 0x38	; 56
    254c:	51 50       	subi	r21, 0x01	; 1
    254e:	e8 96       	adiw	r28, 0x38	; 56
    2550:	5f af       	std	Y+63, r21	; 0x3f
    2552:	e8 97       	sbiw	r28, 0x38	; 56
    2554:	e8 96       	adiw	r28, 0x38	; 56
    2556:	8f ad       	ldd	r24, Y+63	; 0x3f
    2558:	e8 97       	sbiw	r28, 0x38	; 56
    255a:	88 23       	and	r24, r24
    255c:	b1 f6       	brne	.-84     	; 0x250a <main+0x28a>
	Switch_u8Init(Switch_3);
    255e:	fe 01       	movw	r30, r28
    2560:	eb 5a       	subi	r30, 0xAB	; 171
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	60 81       	ld	r22, Z
    2566:	71 81       	ldd	r23, Z+1	; 0x01
    2568:	82 81       	ldd	r24, Z+2	; 0x02
    256a:	0e 94 b3 10 	call	0x2166	; 0x2166 <Switch_u8Init>
	SW_t Switch_4 = {DIO_u8PORTA , DIO_u8PIN3 , DIO_u8HIGH};
    256e:	ce 01       	movw	r24, r28
    2570:	88 5a       	subi	r24, 0xA8	; 168
    2572:	9f 4f       	sbci	r25, 0xFF	; 255
    2574:	ea 96       	adiw	r28, 0x3a	; 58
    2576:	9f af       	std	Y+63, r25	; 0x3f
    2578:	8e af       	std	Y+62, r24	; 0x3e
    257a:	ea 97       	sbiw	r28, 0x3a	; 58
    257c:	e4 ea       	ldi	r30, 0xA4	; 164
    257e:	f1 e0       	ldi	r31, 0x01	; 1
    2580:	ec 96       	adiw	r28, 0x3c	; 60
    2582:	ff af       	std	Y+63, r31	; 0x3f
    2584:	ee af       	std	Y+62, r30	; 0x3e
    2586:	ec 97       	sbiw	r28, 0x3c	; 60
    2588:	f3 e0       	ldi	r31, 0x03	; 3
    258a:	ed 96       	adiw	r28, 0x3d	; 61
    258c:	ff af       	std	Y+63, r31	; 0x3f
    258e:	ed 97       	sbiw	r28, 0x3d	; 61
    2590:	ec 96       	adiw	r28, 0x3c	; 60
    2592:	ee ad       	ldd	r30, Y+62	; 0x3e
    2594:	ff ad       	ldd	r31, Y+63	; 0x3f
    2596:	ec 97       	sbiw	r28, 0x3c	; 60
    2598:	00 80       	ld	r0, Z
    259a:	ec 96       	adiw	r28, 0x3c	; 60
    259c:	4e ad       	ldd	r20, Y+62	; 0x3e
    259e:	5f ad       	ldd	r21, Y+63	; 0x3f
    25a0:	ec 97       	sbiw	r28, 0x3c	; 60
    25a2:	4f 5f       	subi	r20, 0xFF	; 255
    25a4:	5f 4f       	sbci	r21, 0xFF	; 255
    25a6:	ec 96       	adiw	r28, 0x3c	; 60
    25a8:	5f af       	std	Y+63, r21	; 0x3f
    25aa:	4e af       	std	Y+62, r20	; 0x3e
    25ac:	ec 97       	sbiw	r28, 0x3c	; 60
    25ae:	ea 96       	adiw	r28, 0x3a	; 58
    25b0:	ee ad       	ldd	r30, Y+62	; 0x3e
    25b2:	ff ad       	ldd	r31, Y+63	; 0x3f
    25b4:	ea 97       	sbiw	r28, 0x3a	; 58
    25b6:	00 82       	st	Z, r0
    25b8:	ea 96       	adiw	r28, 0x3a	; 58
    25ba:	4e ad       	ldd	r20, Y+62	; 0x3e
    25bc:	5f ad       	ldd	r21, Y+63	; 0x3f
    25be:	ea 97       	sbiw	r28, 0x3a	; 58
    25c0:	4f 5f       	subi	r20, 0xFF	; 255
    25c2:	5f 4f       	sbci	r21, 0xFF	; 255
    25c4:	ea 96       	adiw	r28, 0x3a	; 58
    25c6:	5f af       	std	Y+63, r21	; 0x3f
    25c8:	4e af       	std	Y+62, r20	; 0x3e
    25ca:	ea 97       	sbiw	r28, 0x3a	; 58
    25cc:	ed 96       	adiw	r28, 0x3d	; 61
    25ce:	5f ad       	ldd	r21, Y+63	; 0x3f
    25d0:	ed 97       	sbiw	r28, 0x3d	; 61
    25d2:	51 50       	subi	r21, 0x01	; 1
    25d4:	ed 96       	adiw	r28, 0x3d	; 61
    25d6:	5f af       	std	Y+63, r21	; 0x3f
    25d8:	ed 97       	sbiw	r28, 0x3d	; 61
    25da:	ed 96       	adiw	r28, 0x3d	; 61
    25dc:	8f ad       	ldd	r24, Y+63	; 0x3f
    25de:	ed 97       	sbiw	r28, 0x3d	; 61
    25e0:	88 23       	and	r24, r24
    25e2:	b1 f6       	brne	.-84     	; 0x2590 <main+0x310>
	Switch_u8Init(Switch_4);
    25e4:	fe 01       	movw	r30, r28
    25e6:	e8 5a       	subi	r30, 0xA8	; 168
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	60 81       	ld	r22, Z
    25ec:	71 81       	ldd	r23, Z+1	; 0x01
    25ee:	82 81       	ldd	r24, Z+2	; 0x02
    25f0:	0e 94 b3 10 	call	0x2166	; 0x2166 <Switch_u8Init>
	SW_t Switch_5 = {DIO_u8PORTA , DIO_u8PIN4 , DIO_u8HIGH};
    25f4:	ce 01       	movw	r24, r28
    25f6:	85 5a       	subi	r24, 0xA5	; 165
    25f8:	9f 4f       	sbci	r25, 0xFF	; 255
    25fa:	ef 96       	adiw	r28, 0x3f	; 63
    25fc:	9f af       	std	Y+63, r25	; 0x3f
    25fe:	8e af       	std	Y+62, r24	; 0x3e
    2600:	ef 97       	sbiw	r28, 0x3f	; 63
    2602:	e1 ea       	ldi	r30, 0xA1	; 161
    2604:	f1 e0       	ldi	r31, 0x01	; 1
    2606:	c1 58       	subi	r28, 0x81	; 129
    2608:	df 4f       	sbci	r29, 0xFF	; 255
    260a:	f9 83       	std	Y+1, r31	; 0x01
    260c:	e8 83       	st	Y, r30
    260e:	cf 57       	subi	r28, 0x7F	; 127
    2610:	d0 40       	sbci	r29, 0x00	; 0
    2612:	f3 e0       	ldi	r31, 0x03	; 3
    2614:	cf 57       	subi	r28, 0x7F	; 127
    2616:	df 4f       	sbci	r29, 0xFF	; 255
    2618:	f8 83       	st	Y, r31
    261a:	c1 58       	subi	r28, 0x81	; 129
    261c:	d0 40       	sbci	r29, 0x00	; 0
    261e:	c1 58       	subi	r28, 0x81	; 129
    2620:	df 4f       	sbci	r29, 0xFF	; 255
    2622:	e8 81       	ld	r30, Y
    2624:	f9 81       	ldd	r31, Y+1	; 0x01
    2626:	cf 57       	subi	r28, 0x7F	; 127
    2628:	d0 40       	sbci	r29, 0x00	; 0
    262a:	00 80       	ld	r0, Z
    262c:	c1 58       	subi	r28, 0x81	; 129
    262e:	df 4f       	sbci	r29, 0xFF	; 255
    2630:	48 81       	ld	r20, Y
    2632:	59 81       	ldd	r21, Y+1	; 0x01
    2634:	cf 57       	subi	r28, 0x7F	; 127
    2636:	d0 40       	sbci	r29, 0x00	; 0
    2638:	4f 5f       	subi	r20, 0xFF	; 255
    263a:	5f 4f       	sbci	r21, 0xFF	; 255
    263c:	c1 58       	subi	r28, 0x81	; 129
    263e:	df 4f       	sbci	r29, 0xFF	; 255
    2640:	59 83       	std	Y+1, r21	; 0x01
    2642:	48 83       	st	Y, r20
    2644:	cf 57       	subi	r28, 0x7F	; 127
    2646:	d0 40       	sbci	r29, 0x00	; 0
    2648:	ef 96       	adiw	r28, 0x3f	; 63
    264a:	ee ad       	ldd	r30, Y+62	; 0x3e
    264c:	ff ad       	ldd	r31, Y+63	; 0x3f
    264e:	ef 97       	sbiw	r28, 0x3f	; 63
    2650:	00 82       	st	Z, r0
    2652:	ef 96       	adiw	r28, 0x3f	; 63
    2654:	4e ad       	ldd	r20, Y+62	; 0x3e
    2656:	5f ad       	ldd	r21, Y+63	; 0x3f
    2658:	ef 97       	sbiw	r28, 0x3f	; 63
    265a:	4f 5f       	subi	r20, 0xFF	; 255
    265c:	5f 4f       	sbci	r21, 0xFF	; 255
    265e:	ef 96       	adiw	r28, 0x3f	; 63
    2660:	5f af       	std	Y+63, r21	; 0x3f
    2662:	4e af       	std	Y+62, r20	; 0x3e
    2664:	ef 97       	sbiw	r28, 0x3f	; 63
    2666:	cf 57       	subi	r28, 0x7F	; 127
    2668:	df 4f       	sbci	r29, 0xFF	; 255
    266a:	58 81       	ld	r21, Y
    266c:	c1 58       	subi	r28, 0x81	; 129
    266e:	d0 40       	sbci	r29, 0x00	; 0
    2670:	51 50       	subi	r21, 0x01	; 1
    2672:	cf 57       	subi	r28, 0x7F	; 127
    2674:	df 4f       	sbci	r29, 0xFF	; 255
    2676:	58 83       	st	Y, r21
    2678:	c1 58       	subi	r28, 0x81	; 129
    267a:	d0 40       	sbci	r29, 0x00	; 0
    267c:	cf 57       	subi	r28, 0x7F	; 127
    267e:	df 4f       	sbci	r29, 0xFF	; 255
    2680:	88 81       	ld	r24, Y
    2682:	c1 58       	subi	r28, 0x81	; 129
    2684:	d0 40       	sbci	r29, 0x00	; 0
    2686:	88 23       	and	r24, r24
    2688:	51 f6       	brne	.-108    	; 0x261e <main+0x39e>
	Switch_u8Init(Switch_5);
    268a:	fe 01       	movw	r30, r28
    268c:	e5 5a       	subi	r30, 0xA5	; 165
    268e:	ff 4f       	sbci	r31, 0xFF	; 255
    2690:	60 81       	ld	r22, Z
    2692:	71 81       	ldd	r23, Z+1	; 0x01
    2694:	82 81       	ldd	r24, Z+2	; 0x02
    2696:	0e 94 b3 10 	call	0x2166	; 0x2166 <Switch_u8Init>

	LCD_init_PortDirection();
    269a:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <LCD_init_PortDirection>
	LCD_voidInit();
    269e:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <LCD_voidInit>
    26a2:	0d c3       	rjmp	.+1562   	; 0x2cbe <main+0xa3e>

	while(Lives > 0)
	{
	    Flag = 0;
    26a4:	19 ae       	std	Y+57, r1	; 0x39
	    Time = 250 - (Time_Sstep * Time_Step);
    26a6:	8b ad       	ldd	r24, Y+59	; 0x3b
    26a8:	28 2f       	mov	r18, r24
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	8c ad       	ldd	r24, Y+60	; 0x3c
    26ae:	9d ad       	ldd	r25, Y+61	; 0x3d
    26b0:	f9 01       	movw	r30, r18
    26b2:	e8 9f       	mul	r30, r24
    26b4:	90 01       	movw	r18, r0
    26b6:	e9 9f       	mul	r30, r25
    26b8:	30 0d       	add	r19, r0
    26ba:	f8 9f       	mul	r31, r24
    26bc:	30 0d       	add	r19, r0
    26be:	11 24       	eor	r1, r1
    26c0:	8a ef       	ldi	r24, 0xFA	; 250
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	82 1b       	sub	r24, r18
    26c6:	93 0b       	sbc	r25, r19
    26c8:	9f af       	std	Y+63, r25	; 0x3f
    26ca:	8e af       	std	Y+62, r24	; 0x3e
	    State = 0;
    26cc:	1a ae       	std	Y+58, r1	; 0x3a

	    LCD_voidClearDisplay();
    26ce:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <LCD_voidClearDisplay>
	    LCD_u8GoToXY(Position , 0);
    26d2:	fe 01       	movw	r30, r28
    26d4:	ef 5b       	subi	r30, 0xBF	; 191
    26d6:	ff 4f       	sbci	r31, 0xFF	; 255
    26d8:	80 81       	ld	r24, Z
    26da:	60 e0       	ldi	r22, 0x00	; 0
    26dc:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_u8GoToXY>
	    LCD_voidSendData('*');
    26e0:	8a e2       	ldi	r24, 0x2A	; 42
    26e2:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCD_voidSendData>
	    LCD_u8GoToXY(0 , 1);
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	61 e0       	ldi	r22, 0x01	; 1
    26ea:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_u8GoToXY>
	    LCD_voidSendString("Score : ");
    26ee:	80 e6       	ldi	r24, 0x60	; 96
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <LCD_voidSendString>
	    LCD_voidSendNumber(Score);
    26f6:	fe 01       	movw	r30, r28
    26f8:	ee 5b       	subi	r30, 0xBE	; 190
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	80 81       	ld	r24, Z
    26fe:	88 2f       	mov	r24, r24
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	a0 e0       	ldi	r26, 0x00	; 0
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	bc 01       	movw	r22, r24
    2708:	cd 01       	movw	r24, r26
    270a:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <LCD_voidSendNumber>
    270e:	db c0       	rjmp	.+438    	; 0x28c6 <main+0x646>

	    while(Time--)
	    {
	        Switch_u8GetState(Switch_1 , &State_1);
    2710:	fe 01       	movw	r30, r28
    2712:	e1 5b       	subi	r30, 0xB1	; 177
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	9e 01       	movw	r18, r28
    2718:	2c 5b       	subi	r18, 0xBC	; 188
    271a:	3f 4f       	sbci	r19, 0xFF	; 255
    271c:	60 81       	ld	r22, Z
    271e:	71 81       	ldd	r23, Z+1	; 0x01
    2720:	82 81       	ldd	r24, Z+2	; 0x02
    2722:	a9 01       	movw	r20, r18
    2724:	0e 94 d5 10 	call	0x21aa	; 0x21aa <Switch_u8GetState>
	        Switch_u8GetState(Switch_2 , &State_2);
    2728:	fe 01       	movw	r30, r28
    272a:	ee 5a       	subi	r30, 0xAE	; 174
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	9e 01       	movw	r18, r28
    2730:	2b 5b       	subi	r18, 0xBB	; 187
    2732:	3f 4f       	sbci	r19, 0xFF	; 255
    2734:	60 81       	ld	r22, Z
    2736:	71 81       	ldd	r23, Z+1	; 0x01
    2738:	82 81       	ldd	r24, Z+2	; 0x02
    273a:	a9 01       	movw	r20, r18
    273c:	0e 94 d5 10 	call	0x21aa	; 0x21aa <Switch_u8GetState>
	        Switch_u8GetState(Switch_3 , &State_3);
    2740:	fe 01       	movw	r30, r28
    2742:	eb 5a       	subi	r30, 0xAB	; 171
    2744:	ff 4f       	sbci	r31, 0xFF	; 255
    2746:	9e 01       	movw	r18, r28
    2748:	2a 5b       	subi	r18, 0xBA	; 186
    274a:	3f 4f       	sbci	r19, 0xFF	; 255
    274c:	60 81       	ld	r22, Z
    274e:	71 81       	ldd	r23, Z+1	; 0x01
    2750:	82 81       	ldd	r24, Z+2	; 0x02
    2752:	a9 01       	movw	r20, r18
    2754:	0e 94 d5 10 	call	0x21aa	; 0x21aa <Switch_u8GetState>
	        Switch_u8GetState(Switch_4 , &State_4);
    2758:	fe 01       	movw	r30, r28
    275a:	e8 5a       	subi	r30, 0xA8	; 168
    275c:	ff 4f       	sbci	r31, 0xFF	; 255
    275e:	9e 01       	movw	r18, r28
    2760:	29 5b       	subi	r18, 0xB9	; 185
    2762:	3f 4f       	sbci	r19, 0xFF	; 255
    2764:	60 81       	ld	r22, Z
    2766:	71 81       	ldd	r23, Z+1	; 0x01
    2768:	82 81       	ldd	r24, Z+2	; 0x02
    276a:	a9 01       	movw	r20, r18
    276c:	0e 94 d5 10 	call	0x21aa	; 0x21aa <Switch_u8GetState>
	        Switch_u8GetState(Switch_5 , &State_5);
    2770:	fe 01       	movw	r30, r28
    2772:	e5 5a       	subi	r30, 0xA5	; 165
    2774:	ff 4f       	sbci	r31, 0xFF	; 255
    2776:	9e 01       	movw	r18, r28
    2778:	28 5b       	subi	r18, 0xB8	; 184
    277a:	3f 4f       	sbci	r19, 0xFF	; 255
    277c:	60 81       	ld	r22, Z
    277e:	71 81       	ldd	r23, Z+1	; 0x01
    2780:	82 81       	ldd	r24, Z+2	; 0x02
    2782:	a9 01       	movw	r20, r18
    2784:	0e 94 d5 10 	call	0x21aa	; 0x21aa <Switch_u8GetState>

	        if(State_1 == SW_PRESSED) { State = 1; break; }
    2788:	fe 01       	movw	r30, r28
    278a:	ec 5b       	subi	r30, 0xBC	; 188
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	80 81       	ld	r24, Z
    2790:	81 30       	cpi	r24, 0x01	; 1
    2792:	19 f4       	brne	.+6      	; 0x279a <main+0x51a>
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	8a af       	std	Y+58, r24	; 0x3a
    2798:	ac c0       	rjmp	.+344    	; 0x28f2 <main+0x672>
	        if(State_2 == SW_PRESSED) { State = 2; break; }
    279a:	fe 01       	movw	r30, r28
    279c:	eb 5b       	subi	r30, 0xBB	; 187
    279e:	ff 4f       	sbci	r31, 0xFF	; 255
    27a0:	80 81       	ld	r24, Z
    27a2:	81 30       	cpi	r24, 0x01	; 1
    27a4:	19 f4       	brne	.+6      	; 0x27ac <main+0x52c>
    27a6:	82 e0       	ldi	r24, 0x02	; 2
    27a8:	8a af       	std	Y+58, r24	; 0x3a
    27aa:	a3 c0       	rjmp	.+326    	; 0x28f2 <main+0x672>
	        if(State_3 == SW_PRESSED) { State = 3; break; }
    27ac:	fe 01       	movw	r30, r28
    27ae:	ea 5b       	subi	r30, 0xBA	; 186
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	80 81       	ld	r24, Z
    27b4:	81 30       	cpi	r24, 0x01	; 1
    27b6:	19 f4       	brne	.+6      	; 0x27be <main+0x53e>
    27b8:	83 e0       	ldi	r24, 0x03	; 3
    27ba:	8a af       	std	Y+58, r24	; 0x3a
    27bc:	9a c0       	rjmp	.+308    	; 0x28f2 <main+0x672>
	        if(State_4 == SW_PRESSED) { State = 4; break; }
    27be:	fe 01       	movw	r30, r28
    27c0:	e9 5b       	subi	r30, 0xB9	; 185
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	80 81       	ld	r24, Z
    27c6:	81 30       	cpi	r24, 0x01	; 1
    27c8:	19 f4       	brne	.+6      	; 0x27d0 <main+0x550>
    27ca:	84 e0       	ldi	r24, 0x04	; 4
    27cc:	8a af       	std	Y+58, r24	; 0x3a
    27ce:	91 c0       	rjmp	.+290    	; 0x28f2 <main+0x672>
	        if(State_5 == SW_PRESSED) { State = 5; break; }
    27d0:	fe 01       	movw	r30, r28
    27d2:	e8 5b       	subi	r30, 0xB8	; 184
    27d4:	ff 4f       	sbci	r31, 0xFF	; 255
    27d6:	80 81       	ld	r24, Z
    27d8:	81 30       	cpi	r24, 0x01	; 1
    27da:	19 f4       	brne	.+6      	; 0x27e2 <main+0x562>
    27dc:	85 e0       	ldi	r24, 0x05	; 5
    27de:	8a af       	std	Y+58, r24	; 0x3a
    27e0:	88 c0       	rjmp	.+272    	; 0x28f2 <main+0x672>
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	a0 e2       	ldi	r26, 0x20	; 32
    27e8:	b1 e4       	ldi	r27, 0x41	; 65
    27ea:	8d ab       	std	Y+53, r24	; 0x35
    27ec:	9e ab       	std	Y+54, r25	; 0x36
    27ee:	af ab       	std	Y+55, r26	; 0x37
    27f0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f2:	6d a9       	ldd	r22, Y+53	; 0x35
    27f4:	7e a9       	ldd	r23, Y+54	; 0x36
    27f6:	8f a9       	ldd	r24, Y+55	; 0x37
    27f8:	98 ad       	ldd	r25, Y+56	; 0x38
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	4a ef       	ldi	r20, 0xFA	; 250
    2800:	54 e4       	ldi	r21, 0x44	; 68
    2802:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	89 ab       	std	Y+49, r24	; 0x31
    280c:	9a ab       	std	Y+50, r25	; 0x32
    280e:	ab ab       	std	Y+51, r26	; 0x33
    2810:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2812:	69 a9       	ldd	r22, Y+49	; 0x31
    2814:	7a a9       	ldd	r23, Y+50	; 0x32
    2816:	8b a9       	ldd	r24, Y+51	; 0x33
    2818:	9c a9       	ldd	r25, Y+52	; 0x34
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	40 e8       	ldi	r20, 0x80	; 128
    2820:	5f e3       	ldi	r21, 0x3F	; 63
    2822:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2826:	88 23       	and	r24, r24
    2828:	2c f4       	brge	.+10     	; 0x2834 <main+0x5b4>
		__ticks = 1;
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	98 ab       	std	Y+48, r25	; 0x30
    2830:	8f a7       	std	Y+47, r24	; 0x2f
    2832:	3f c0       	rjmp	.+126    	; 0x28b2 <main+0x632>
	else if (__tmp > 65535)
    2834:	69 a9       	ldd	r22, Y+49	; 0x31
    2836:	7a a9       	ldd	r23, Y+50	; 0x32
    2838:	8b a9       	ldd	r24, Y+51	; 0x33
    283a:	9c a9       	ldd	r25, Y+52	; 0x34
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	3f ef       	ldi	r19, 0xFF	; 255
    2840:	4f e7       	ldi	r20, 0x7F	; 127
    2842:	57 e4       	ldi	r21, 0x47	; 71
    2844:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2848:	18 16       	cp	r1, r24
    284a:	4c f5       	brge	.+82     	; 0x289e <main+0x61e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284c:	6d a9       	ldd	r22, Y+53	; 0x35
    284e:	7e a9       	ldd	r23, Y+54	; 0x36
    2850:	8f a9       	ldd	r24, Y+55	; 0x37
    2852:	98 ad       	ldd	r25, Y+56	; 0x38
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	40 e2       	ldi	r20, 0x20	; 32
    285a:	51 e4       	ldi	r21, 0x41	; 65
    285c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	bc 01       	movw	r22, r24
    2866:	cd 01       	movw	r24, r26
    2868:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	98 ab       	std	Y+48, r25	; 0x30
    2872:	8f a7       	std	Y+47, r24	; 0x2f
    2874:	0f c0       	rjmp	.+30     	; 0x2894 <main+0x614>
    2876:	88 ec       	ldi	r24, 0xC8	; 200
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	9e a7       	std	Y+46, r25	; 0x2e
    287c:	8d a7       	std	Y+45, r24	; 0x2d
    287e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2880:	9e a5       	ldd	r25, Y+46	; 0x2e
    2882:	01 97       	sbiw	r24, 0x01	; 1
    2884:	f1 f7       	brne	.-4      	; 0x2882 <main+0x602>
    2886:	9e a7       	std	Y+46, r25	; 0x2e
    2888:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    288a:	8f a5       	ldd	r24, Y+47	; 0x2f
    288c:	98 a9       	ldd	r25, Y+48	; 0x30
    288e:	01 97       	sbiw	r24, 0x01	; 1
    2890:	98 ab       	std	Y+48, r25	; 0x30
    2892:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2894:	8f a5       	ldd	r24, Y+47	; 0x2f
    2896:	98 a9       	ldd	r25, Y+48	; 0x30
    2898:	00 97       	sbiw	r24, 0x00	; 0
    289a:	69 f7       	brne	.-38     	; 0x2876 <main+0x5f6>
    289c:	14 c0       	rjmp	.+40     	; 0x28c6 <main+0x646>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    289e:	69 a9       	ldd	r22, Y+49	; 0x31
    28a0:	7a a9       	ldd	r23, Y+50	; 0x32
    28a2:	8b a9       	ldd	r24, Y+51	; 0x33
    28a4:	9c a9       	ldd	r25, Y+52	; 0x34
    28a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	98 ab       	std	Y+48, r25	; 0x30
    28b0:	8f a7       	std	Y+47, r24	; 0x2f
    28b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    28b4:	98 a9       	ldd	r25, Y+48	; 0x30
    28b6:	9c a7       	std	Y+44, r25	; 0x2c
    28b8:	8b a7       	std	Y+43, r24	; 0x2b
    28ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    28bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    28be:	01 97       	sbiw	r24, 0x01	; 1
    28c0:	f1 f7       	brne	.-4      	; 0x28be <main+0x63e>
    28c2:	9c a7       	std	Y+44, r25	; 0x2c
    28c4:	8b a7       	std	Y+43, r24	; 0x2b
	    LCD_voidSendData('*');
	    LCD_u8GoToXY(0 , 1);
	    LCD_voidSendString("Score : ");
	    LCD_voidSendNumber(Score);

	    while(Time--)
    28c6:	6f 96       	adiw	r28, 0x1f	; 31
    28c8:	1f ae       	std	Y+63, r1	; 0x3f
    28ca:	6f 97       	sbiw	r28, 0x1f	; 31
    28cc:	8e ad       	ldd	r24, Y+62	; 0x3e
    28ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    28d0:	00 97       	sbiw	r24, 0x00	; 0
    28d2:	21 f0       	breq	.+8      	; 0x28dc <main+0x65c>
    28d4:	f1 e0       	ldi	r31, 0x01	; 1
    28d6:	6f 96       	adiw	r28, 0x1f	; 31
    28d8:	ff af       	std	Y+63, r31	; 0x3f
    28da:	6f 97       	sbiw	r28, 0x1f	; 31
    28dc:	8e ad       	ldd	r24, Y+62	; 0x3e
    28de:	9f ad       	ldd	r25, Y+63	; 0x3f
    28e0:	01 97       	sbiw	r24, 0x01	; 1
    28e2:	9f af       	std	Y+63, r25	; 0x3f
    28e4:	8e af       	std	Y+62, r24	; 0x3e
    28e6:	6f 96       	adiw	r28, 0x1f	; 31
    28e8:	4f ad       	ldd	r20, Y+63	; 0x3f
    28ea:	6f 97       	sbiw	r28, 0x1f	; 31
    28ec:	44 23       	and	r20, r20
    28ee:	09 f0       	breq	.+2      	; 0x28f2 <main+0x672>
    28f0:	0f cf       	rjmp	.-482    	; 0x2710 <main+0x490>
	        if(State_5 == SW_PRESSED) { State = 5; break; }

	        _delay_ms(10);
	    }

	    if(State == (Position+1))
    28f2:	8a ad       	ldd	r24, Y+58	; 0x3a
    28f4:	28 2f       	mov	r18, r24
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	fe 01       	movw	r30, r28
    28fa:	ef 5b       	subi	r30, 0xBF	; 191
    28fc:	ff 4f       	sbci	r31, 0xFF	; 255
    28fe:	80 81       	ld	r24, Z
    2900:	88 2f       	mov	r24, r24
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	01 96       	adiw	r24, 0x01	; 1
    2906:	28 17       	cp	r18, r24
    2908:	39 07       	cpc	r19, r25
    290a:	09 f0       	breq	.+2      	; 0x290e <main+0x68e>
    290c:	95 c0       	rjmp	.+298    	; 0x2a38 <main+0x7b8>
	    {
	        Score++;
    290e:	de 01       	movw	r26, r28
    2910:	ae 5b       	subi	r26, 0xBE	; 190
    2912:	bf 4f       	sbci	r27, 0xFF	; 255
    2914:	fe 01       	movw	r30, r28
    2916:	ee 5b       	subi	r30, 0xBE	; 190
    2918:	ff 4f       	sbci	r31, 0xFF	; 255
    291a:	80 81       	ld	r24, Z
    291c:	8f 5f       	subi	r24, 0xFF	; 255
    291e:	8c 93       	st	X, r24
	        LCD_voidClearDisplay();
    2920:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <LCD_voidClearDisplay>
	        LCD_voidSendString("Success!");
    2924:	89 e6       	ldi	r24, 0x69	; 105
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <LCD_voidSendString>
	        Time_Sstep++;
    292c:	8b ad       	ldd	r24, Y+59	; 0x3b
    292e:	8f 5f       	subi	r24, 0xFF	; 255
    2930:	8b af       	std	Y+59, r24	; 0x3b
	        LED_u8TurnON(LED_1);
    2932:	fe 01       	movw	r30, r28
    2934:	e7 5b       	subi	r30, 0xB7	; 183
    2936:	ff 4f       	sbci	r31, 0xFF	; 255
    2938:	60 81       	ld	r22, Z
    293a:	71 81       	ldd	r23, Z+1	; 0x01
    293c:	82 81       	ldd	r24, Z+2	; 0x02
    293e:	0e 94 4a 10 	call	0x2094	; 0x2094 <LED_u8TurnON>
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	a8 e4       	ldi	r26, 0x48	; 72
    2948:	b3 e4       	ldi	r27, 0x43	; 67
    294a:	8f a3       	std	Y+39, r24	; 0x27
    294c:	98 a7       	std	Y+40, r25	; 0x28
    294e:	a9 a7       	std	Y+41, r26	; 0x29
    2950:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2952:	6f a1       	ldd	r22, Y+39	; 0x27
    2954:	78 a5       	ldd	r23, Y+40	; 0x28
    2956:	89 a5       	ldd	r24, Y+41	; 0x29
    2958:	9a a5       	ldd	r25, Y+42	; 0x2a
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	4a ef       	ldi	r20, 0xFA	; 250
    2960:	54 e4       	ldi	r21, 0x44	; 68
    2962:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	8b a3       	std	Y+35, r24	; 0x23
    296c:	9c a3       	std	Y+36, r25	; 0x24
    296e:	ad a3       	std	Y+37, r26	; 0x25
    2970:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2972:	6b a1       	ldd	r22, Y+35	; 0x23
    2974:	7c a1       	ldd	r23, Y+36	; 0x24
    2976:	8d a1       	ldd	r24, Y+37	; 0x25
    2978:	9e a1       	ldd	r25, Y+38	; 0x26
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	40 e8       	ldi	r20, 0x80	; 128
    2980:	5f e3       	ldi	r21, 0x3F	; 63
    2982:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2986:	88 23       	and	r24, r24
    2988:	2c f4       	brge	.+10     	; 0x2994 <main+0x714>
		__ticks = 1;
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	9a a3       	std	Y+34, r25	; 0x22
    2990:	89 a3       	std	Y+33, r24	; 0x21
    2992:	3f c0       	rjmp	.+126    	; 0x2a12 <main+0x792>
	else if (__tmp > 65535)
    2994:	6b a1       	ldd	r22, Y+35	; 0x23
    2996:	7c a1       	ldd	r23, Y+36	; 0x24
    2998:	8d a1       	ldd	r24, Y+37	; 0x25
    299a:	9e a1       	ldd	r25, Y+38	; 0x26
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	3f ef       	ldi	r19, 0xFF	; 255
    29a0:	4f e7       	ldi	r20, 0x7F	; 127
    29a2:	57 e4       	ldi	r21, 0x47	; 71
    29a4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    29a8:	18 16       	cp	r1, r24
    29aa:	4c f5       	brge	.+82     	; 0x29fe <main+0x77e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ac:	6f a1       	ldd	r22, Y+39	; 0x27
    29ae:	78 a5       	ldd	r23, Y+40	; 0x28
    29b0:	89 a5       	ldd	r24, Y+41	; 0x29
    29b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	40 e2       	ldi	r20, 0x20	; 32
    29ba:	51 e4       	ldi	r21, 0x41	; 65
    29bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	bc 01       	movw	r22, r24
    29c6:	cd 01       	movw	r24, r26
    29c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	9a a3       	std	Y+34, r25	; 0x22
    29d2:	89 a3       	std	Y+33, r24	; 0x21
    29d4:	0f c0       	rjmp	.+30     	; 0x29f4 <main+0x774>
    29d6:	88 ec       	ldi	r24, 0xC8	; 200
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	98 a3       	std	Y+32, r25	; 0x20
    29dc:	8f 8f       	std	Y+31, r24	; 0x1f
    29de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29e0:	98 a1       	ldd	r25, Y+32	; 0x20
    29e2:	01 97       	sbiw	r24, 0x01	; 1
    29e4:	f1 f7       	brne	.-4      	; 0x29e2 <main+0x762>
    29e6:	98 a3       	std	Y+32, r25	; 0x20
    29e8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ea:	89 a1       	ldd	r24, Y+33	; 0x21
    29ec:	9a a1       	ldd	r25, Y+34	; 0x22
    29ee:	01 97       	sbiw	r24, 0x01	; 1
    29f0:	9a a3       	std	Y+34, r25	; 0x22
    29f2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f4:	89 a1       	ldd	r24, Y+33	; 0x21
    29f6:	9a a1       	ldd	r25, Y+34	; 0x22
    29f8:	00 97       	sbiw	r24, 0x00	; 0
    29fa:	69 f7       	brne	.-38     	; 0x29d6 <main+0x756>
    29fc:	14 c0       	rjmp	.+40     	; 0x2a26 <main+0x7a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29fe:	6b a1       	ldd	r22, Y+35	; 0x23
    2a00:	7c a1       	ldd	r23, Y+36	; 0x24
    2a02:	8d a1       	ldd	r24, Y+37	; 0x25
    2a04:	9e a1       	ldd	r25, Y+38	; 0x26
    2a06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	9a a3       	std	Y+34, r25	; 0x22
    2a10:	89 a3       	std	Y+33, r24	; 0x21
    2a12:	89 a1       	ldd	r24, Y+33	; 0x21
    2a14:	9a a1       	ldd	r25, Y+34	; 0x22
    2a16:	9e 8f       	std	Y+30, r25	; 0x1e
    2a18:	8d 8f       	std	Y+29, r24	; 0x1d
    2a1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a1c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a1e:	01 97       	sbiw	r24, 0x01	; 1
    2a20:	f1 f7       	brne	.-4      	; 0x2a1e <main+0x79e>
    2a22:	9e 8f       	std	Y+30, r25	; 0x1e
    2a24:	8d 8f       	std	Y+29, r24	; 0x1d
	        _delay_ms(200);
	        LED_u8TurnOFF(LED_1);
    2a26:	fe 01       	movw	r30, r28
    2a28:	e7 5b       	subi	r30, 0xB7	; 183
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	60 81       	ld	r22, Z
    2a2e:	71 81       	ldd	r23, Z+1	; 0x01
    2a30:	82 81       	ldd	r24, Z+2	; 0x02
    2a32:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LED_u8TurnOFF>
    2a36:	27 c1       	rjmp	.+590    	; 0x2c86 <main+0xa06>
	    }
	    else if(State != 0)
    2a38:	8a ad       	ldd	r24, Y+58	; 0x3a
    2a3a:	88 23       	and	r24, r24
    2a3c:	09 f4       	brne	.+2      	; 0x2a40 <main+0x7c0>
    2a3e:	92 c0       	rjmp	.+292    	; 0x2b64 <main+0x8e4>
	    {
	        Lives--;
    2a40:	de 01       	movw	r26, r28
    2a42:	ad 5b       	subi	r26, 0xBD	; 189
    2a44:	bf 4f       	sbci	r27, 0xFF	; 255
    2a46:	fe 01       	movw	r30, r28
    2a48:	ed 5b       	subi	r30, 0xBD	; 189
    2a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4c:	80 81       	ld	r24, Z
    2a4e:	81 50       	subi	r24, 0x01	; 1
    2a50:	8c 93       	st	X, r24
	        LCD_voidClearDisplay();
    2a52:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <LCD_voidClearDisplay>
	        LCD_voidSendString("Wrong!");
    2a56:	82 e7       	ldi	r24, 0x72	; 114
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <LCD_voidSendString>
	        LED_u8TurnON(LED_2);
    2a5e:	fe 01       	movw	r30, r28
    2a60:	e4 5b       	subi	r30, 0xB4	; 180
    2a62:	ff 4f       	sbci	r31, 0xFF	; 255
    2a64:	60 81       	ld	r22, Z
    2a66:	71 81       	ldd	r23, Z+1	; 0x01
    2a68:	82 81       	ldd	r24, Z+2	; 0x02
    2a6a:	0e 94 4a 10 	call	0x2094	; 0x2094 <LED_u8TurnON>
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	a8 e4       	ldi	r26, 0x48	; 72
    2a74:	b3 e4       	ldi	r27, 0x43	; 67
    2a76:	89 8f       	std	Y+25, r24	; 0x19
    2a78:	9a 8f       	std	Y+26, r25	; 0x1a
    2a7a:	ab 8f       	std	Y+27, r26	; 0x1b
    2a7c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a7e:	69 8d       	ldd	r22, Y+25	; 0x19
    2a80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	4a ef       	ldi	r20, 0xFA	; 250
    2a8c:	54 e4       	ldi	r21, 0x44	; 68
    2a8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	8d 8b       	std	Y+21, r24	; 0x15
    2a98:	9e 8b       	std	Y+22, r25	; 0x16
    2a9a:	af 8b       	std	Y+23, r26	; 0x17
    2a9c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a9e:	6d 89       	ldd	r22, Y+21	; 0x15
    2aa0:	7e 89       	ldd	r23, Y+22	; 0x16
    2aa2:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa4:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	40 e8       	ldi	r20, 0x80	; 128
    2aac:	5f e3       	ldi	r21, 0x3F	; 63
    2aae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ab2:	88 23       	and	r24, r24
    2ab4:	2c f4       	brge	.+10     	; 0x2ac0 <main+0x840>
		__ticks = 1;
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	9c 8b       	std	Y+20, r25	; 0x14
    2abc:	8b 8b       	std	Y+19, r24	; 0x13
    2abe:	3f c0       	rjmp	.+126    	; 0x2b3e <main+0x8be>
	else if (__tmp > 65535)
    2ac0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ac2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ac4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	3f ef       	ldi	r19, 0xFF	; 255
    2acc:	4f e7       	ldi	r20, 0x7F	; 127
    2ace:	57 e4       	ldi	r21, 0x47	; 71
    2ad0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2ad4:	18 16       	cp	r1, r24
    2ad6:	4c f5       	brge	.+82     	; 0x2b2a <main+0x8aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad8:	69 8d       	ldd	r22, Y+25	; 0x19
    2ada:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2adc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ade:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	40 e2       	ldi	r20, 0x20	; 32
    2ae6:	51 e4       	ldi	r21, 0x41	; 65
    2ae8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	bc 01       	movw	r22, r24
    2af2:	cd 01       	movw	r24, r26
    2af4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	9c 8b       	std	Y+20, r25	; 0x14
    2afe:	8b 8b       	std	Y+19, r24	; 0x13
    2b00:	0f c0       	rjmp	.+30     	; 0x2b20 <main+0x8a0>
    2b02:	88 ec       	ldi	r24, 0xC8	; 200
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	9a 8b       	std	Y+18, r25	; 0x12
    2b08:	89 8b       	std	Y+17, r24	; 0x11
    2b0a:	89 89       	ldd	r24, Y+17	; 0x11
    2b0c:	9a 89       	ldd	r25, Y+18	; 0x12
    2b0e:	01 97       	sbiw	r24, 0x01	; 1
    2b10:	f1 f7       	brne	.-4      	; 0x2b0e <main+0x88e>
    2b12:	9a 8b       	std	Y+18, r25	; 0x12
    2b14:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b16:	8b 89       	ldd	r24, Y+19	; 0x13
    2b18:	9c 89       	ldd	r25, Y+20	; 0x14
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	9c 8b       	std	Y+20, r25	; 0x14
    2b1e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b20:	8b 89       	ldd	r24, Y+19	; 0x13
    2b22:	9c 89       	ldd	r25, Y+20	; 0x14
    2b24:	00 97       	sbiw	r24, 0x00	; 0
    2b26:	69 f7       	brne	.-38     	; 0x2b02 <main+0x882>
    2b28:	14 c0       	rjmp	.+40     	; 0x2b52 <main+0x8d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b2a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b2c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b2e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b30:	98 8d       	ldd	r25, Y+24	; 0x18
    2b32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	9c 8b       	std	Y+20, r25	; 0x14
    2b3c:	8b 8b       	std	Y+19, r24	; 0x13
    2b3e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b40:	9c 89       	ldd	r25, Y+20	; 0x14
    2b42:	98 8b       	std	Y+16, r25	; 0x10
    2b44:	8f 87       	std	Y+15, r24	; 0x0f
    2b46:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b48:	98 89       	ldd	r25, Y+16	; 0x10
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	f1 f7       	brne	.-4      	; 0x2b4a <main+0x8ca>
    2b4e:	98 8b       	std	Y+16, r25	; 0x10
    2b50:	8f 87       	std	Y+15, r24	; 0x0f
	        _delay_ms(200);
	        LED_u8TurnOFF(LED_2);
    2b52:	fe 01       	movw	r30, r28
    2b54:	e4 5b       	subi	r30, 0xB4	; 180
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	60 81       	ld	r22, Z
    2b5a:	71 81       	ldd	r23, Z+1	; 0x01
    2b5c:	82 81       	ldd	r24, Z+2	; 0x02
    2b5e:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LED_u8TurnOFF>
    2b62:	91 c0       	rjmp	.+290    	; 0x2c86 <main+0xa06>
	    }
	    else
	    {
	        Lives--;
    2b64:	de 01       	movw	r26, r28
    2b66:	ad 5b       	subi	r26, 0xBD	; 189
    2b68:	bf 4f       	sbci	r27, 0xFF	; 255
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	ed 5b       	subi	r30, 0xBD	; 189
    2b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b70:	80 81       	ld	r24, Z
    2b72:	81 50       	subi	r24, 0x01	; 1
    2b74:	8c 93       	st	X, r24
	        LCD_voidClearDisplay();
    2b76:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <LCD_voidClearDisplay>
	        LCD_voidSendString("Missed!");
    2b7a:	89 e7       	ldi	r24, 0x79	; 121
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <LCD_voidSendString>
	        LED_u8TurnON(LED_2);
    2b82:	fe 01       	movw	r30, r28
    2b84:	e4 5b       	subi	r30, 0xB4	; 180
    2b86:	ff 4f       	sbci	r31, 0xFF	; 255
    2b88:	60 81       	ld	r22, Z
    2b8a:	71 81       	ldd	r23, Z+1	; 0x01
    2b8c:	82 81       	ldd	r24, Z+2	; 0x02
    2b8e:	0e 94 4a 10 	call	0x2094	; 0x2094 <LED_u8TurnON>
    2b92:	80 e0       	ldi	r24, 0x00	; 0
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	a8 e4       	ldi	r26, 0x48	; 72
    2b98:	b3 e4       	ldi	r27, 0x43	; 67
    2b9a:	8b 87       	std	Y+11, r24	; 0x0b
    2b9c:	9c 87       	std	Y+12, r25	; 0x0c
    2b9e:	ad 87       	std	Y+13, r26	; 0x0d
    2ba0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ba2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ba4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ba6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ba8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	4a ef       	ldi	r20, 0xFA	; 250
    2bb0:	54 e4       	ldi	r21, 0x44	; 68
    2bb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	8f 83       	std	Y+7, r24	; 0x07
    2bbc:	98 87       	std	Y+8, r25	; 0x08
    2bbe:	a9 87       	std	Y+9, r26	; 0x09
    2bc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bc2:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc4:	78 85       	ldd	r23, Y+8	; 0x08
    2bc6:	89 85       	ldd	r24, Y+9	; 0x09
    2bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	40 e8       	ldi	r20, 0x80	; 128
    2bd0:	5f e3       	ldi	r21, 0x3F	; 63
    2bd2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2bd6:	88 23       	and	r24, r24
    2bd8:	2c f4       	brge	.+10     	; 0x2be4 <main+0x964>
		__ticks = 1;
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	9e 83       	std	Y+6, r25	; 0x06
    2be0:	8d 83       	std	Y+5, r24	; 0x05
    2be2:	3f c0       	rjmp	.+126    	; 0x2c62 <main+0x9e2>
	else if (__tmp > 65535)
    2be4:	6f 81       	ldd	r22, Y+7	; 0x07
    2be6:	78 85       	ldd	r23, Y+8	; 0x08
    2be8:	89 85       	ldd	r24, Y+9	; 0x09
    2bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	3f ef       	ldi	r19, 0xFF	; 255
    2bf0:	4f e7       	ldi	r20, 0x7F	; 127
    2bf2:	57 e4       	ldi	r21, 0x47	; 71
    2bf4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2bf8:	18 16       	cp	r1, r24
    2bfa:	4c f5       	brge	.+82     	; 0x2c4e <main+0x9ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c02:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	40 e2       	ldi	r20, 0x20	; 32
    2c0a:	51 e4       	ldi	r21, 0x41	; 65
    2c0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c10:	dc 01       	movw	r26, r24
    2c12:	cb 01       	movw	r24, r22
    2c14:	bc 01       	movw	r22, r24
    2c16:	cd 01       	movw	r24, r26
    2c18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	9e 83       	std	Y+6, r25	; 0x06
    2c22:	8d 83       	std	Y+5, r24	; 0x05
    2c24:	0f c0       	rjmp	.+30     	; 0x2c44 <main+0x9c4>
    2c26:	88 ec       	ldi	r24, 0xC8	; 200
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	9c 83       	std	Y+4, r25	; 0x04
    2c2c:	8b 83       	std	Y+3, r24	; 0x03
    2c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c30:	9c 81       	ldd	r25, Y+4	; 0x04
    2c32:	01 97       	sbiw	r24, 0x01	; 1
    2c34:	f1 f7       	brne	.-4      	; 0x2c32 <main+0x9b2>
    2c36:	9c 83       	std	Y+4, r25	; 0x04
    2c38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c3e:	01 97       	sbiw	r24, 0x01	; 1
    2c40:	9e 83       	std	Y+6, r25	; 0x06
    2c42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c44:	8d 81       	ldd	r24, Y+5	; 0x05
    2c46:	9e 81       	ldd	r25, Y+6	; 0x06
    2c48:	00 97       	sbiw	r24, 0x00	; 0
    2c4a:	69 f7       	brne	.-38     	; 0x2c26 <main+0x9a6>
    2c4c:	14 c0       	rjmp	.+40     	; 0x2c76 <main+0x9f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c50:	78 85       	ldd	r23, Y+8	; 0x08
    2c52:	89 85       	ldd	r24, Y+9	; 0x09
    2c54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	cb 01       	movw	r24, r22
    2c5e:	9e 83       	std	Y+6, r25	; 0x06
    2c60:	8d 83       	std	Y+5, r24	; 0x05
    2c62:	8d 81       	ldd	r24, Y+5	; 0x05
    2c64:	9e 81       	ldd	r25, Y+6	; 0x06
    2c66:	9a 83       	std	Y+2, r25	; 0x02
    2c68:	89 83       	std	Y+1, r24	; 0x01
    2c6a:	89 81       	ldd	r24, Y+1	; 0x01
    2c6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c6e:	01 97       	sbiw	r24, 0x01	; 1
    2c70:	f1 f7       	brne	.-4      	; 0x2c6e <main+0x9ee>
    2c72:	9a 83       	std	Y+2, r25	; 0x02
    2c74:	89 83       	std	Y+1, r24	; 0x01
	        _delay_ms(200);
	        LED_u8TurnOFF(LED_2);
    2c76:	fe 01       	movw	r30, r28
    2c78:	e4 5b       	subi	r30, 0xB4	; 180
    2c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7c:	60 81       	ld	r22, Z
    2c7e:	71 81       	ldd	r23, Z+1	; 0x01
    2c80:	82 81       	ldd	r24, Z+2	; 0x02
    2c82:	0e 94 72 10 	call	0x20e4	; 0x20e4 <LED_u8TurnOFF>
	    }

	    Position = (Step % 5);
    2c86:	de 01       	movw	r26, r28
    2c88:	af 5b       	subi	r26, 0xBF	; 191
    2c8a:	bf 4f       	sbci	r27, 0xFF	; 255
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	e0 5c       	subi	r30, 0xC0	; 192
    2c90:	ff 4f       	sbci	r31, 0xFF	; 255
    2c92:	80 81       	ld	r24, Z
    2c94:	95 e0       	ldi	r25, 0x05	; 5
    2c96:	69 2f       	mov	r22, r25
    2c98:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__udivmodqi4>
    2c9c:	89 2f       	mov	r24, r25
    2c9e:	8c 93       	st	X, r24
	    Step *= 3;
    2ca0:	fe 01       	movw	r30, r28
    2ca2:	e0 5c       	subi	r30, 0xC0	; 192
    2ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca6:	80 81       	ld	r24, Z
    2ca8:	28 2f       	mov	r18, r24
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	c9 01       	movw	r24, r18
    2cae:	88 0f       	add	r24, r24
    2cb0:	99 1f       	adc	r25, r25
    2cb2:	82 0f       	add	r24, r18
    2cb4:	93 1f       	adc	r25, r19
    2cb6:	fe 01       	movw	r30, r28
    2cb8:	e0 5c       	subi	r30, 0xC0	; 192
    2cba:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbc:	80 83       	st	Z, r24
	Switch_u8Init(Switch_5);

	LCD_init_PortDirection();
	LCD_voidInit();

	while(Lives > 0)
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	ed 5b       	subi	r30, 0xBD	; 189
    2cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc4:	80 81       	ld	r24, Z
    2cc6:	88 23       	and	r24, r24
    2cc8:	09 f0       	breq	.+2      	; 0x2ccc <main+0xa4c>
    2cca:	ec cc       	rjmp	.-1576   	; 0x26a4 <main+0x424>

	    Position = (Step % 5);
	    Step *= 3;
	}

	LCD_voidClearDisplay();
    2ccc:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <LCD_voidClearDisplay>
	LCD_voidSendString("Game Over!");
    2cd0:	81 e8       	ldi	r24, 0x81	; 129
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <LCD_voidSendString>
	LCD_u8GoToXY(0,1);
    2cd8:	80 e0       	ldi	r24, 0x00	; 0
    2cda:	61 e0       	ldi	r22, 0x01	; 1
    2cdc:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_u8GoToXY>
	LCD_voidSendString("Final Score:");
    2ce0:	8c e8       	ldi	r24, 0x8C	; 140
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <LCD_voidSendString>
	LCD_voidSendNumber(Score);
    2ce8:	fe 01       	movw	r30, r28
    2cea:	ee 5b       	subi	r30, 0xBE	; 190
    2cec:	ff 4f       	sbci	r31, 0xFF	; 255
    2cee:	80 81       	ld	r24, Z
    2cf0:	88 2f       	mov	r24, r24
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	a0 e0       	ldi	r26, 0x00	; 0
    2cf6:	b0 e0       	ldi	r27, 0x00	; 0
    2cf8:	bc 01       	movw	r22, r24
    2cfa:	cd 01       	movw	r24, r26
    2cfc:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <LCD_voidSendNumber>
}
    2d00:	cf 57       	subi	r28, 0x7F	; 127
    2d02:	df 4f       	sbci	r29, 0xFF	; 255
    2d04:	0f b6       	in	r0, 0x3f	; 63
    2d06:	f8 94       	cli
    2d08:	de bf       	out	0x3e, r29	; 62
    2d0a:	0f be       	out	0x3f, r0	; 63
    2d0c:	cd bf       	out	0x3d, r28	; 61
    2d0e:	cf 91       	pop	r28
    2d10:	df 91       	pop	r29
    2d12:	08 95       	ret

00002d14 <__udivmodqi4>:
    2d14:	99 1b       	sub	r25, r25
    2d16:	79 e0       	ldi	r23, 0x09	; 9
    2d18:	04 c0       	rjmp	.+8      	; 0x2d22 <__udivmodqi4_ep>

00002d1a <__udivmodqi4_loop>:
    2d1a:	99 1f       	adc	r25, r25
    2d1c:	96 17       	cp	r25, r22
    2d1e:	08 f0       	brcs	.+2      	; 0x2d22 <__udivmodqi4_ep>
    2d20:	96 1b       	sub	r25, r22

00002d22 <__udivmodqi4_ep>:
    2d22:	88 1f       	adc	r24, r24
    2d24:	7a 95       	dec	r23
    2d26:	c9 f7       	brne	.-14     	; 0x2d1a <__udivmodqi4_loop>
    2d28:	80 95       	com	r24
    2d2a:	08 95       	ret

00002d2c <__udivmodsi4>:
    2d2c:	a1 e2       	ldi	r26, 0x21	; 33
    2d2e:	1a 2e       	mov	r1, r26
    2d30:	aa 1b       	sub	r26, r26
    2d32:	bb 1b       	sub	r27, r27
    2d34:	fd 01       	movw	r30, r26
    2d36:	0d c0       	rjmp	.+26     	; 0x2d52 <__udivmodsi4_ep>

00002d38 <__udivmodsi4_loop>:
    2d38:	aa 1f       	adc	r26, r26
    2d3a:	bb 1f       	adc	r27, r27
    2d3c:	ee 1f       	adc	r30, r30
    2d3e:	ff 1f       	adc	r31, r31
    2d40:	a2 17       	cp	r26, r18
    2d42:	b3 07       	cpc	r27, r19
    2d44:	e4 07       	cpc	r30, r20
    2d46:	f5 07       	cpc	r31, r21
    2d48:	20 f0       	brcs	.+8      	; 0x2d52 <__udivmodsi4_ep>
    2d4a:	a2 1b       	sub	r26, r18
    2d4c:	b3 0b       	sbc	r27, r19
    2d4e:	e4 0b       	sbc	r30, r20
    2d50:	f5 0b       	sbc	r31, r21

00002d52 <__udivmodsi4_ep>:
    2d52:	66 1f       	adc	r22, r22
    2d54:	77 1f       	adc	r23, r23
    2d56:	88 1f       	adc	r24, r24
    2d58:	99 1f       	adc	r25, r25
    2d5a:	1a 94       	dec	r1
    2d5c:	69 f7       	brne	.-38     	; 0x2d38 <__udivmodsi4_loop>
    2d5e:	60 95       	com	r22
    2d60:	70 95       	com	r23
    2d62:	80 95       	com	r24
    2d64:	90 95       	com	r25
    2d66:	9b 01       	movw	r18, r22
    2d68:	ac 01       	movw	r20, r24
    2d6a:	bd 01       	movw	r22, r26
    2d6c:	cf 01       	movw	r24, r30
    2d6e:	08 95       	ret

00002d70 <__prologue_saves__>:
    2d70:	2f 92       	push	r2
    2d72:	3f 92       	push	r3
    2d74:	4f 92       	push	r4
    2d76:	5f 92       	push	r5
    2d78:	6f 92       	push	r6
    2d7a:	7f 92       	push	r7
    2d7c:	8f 92       	push	r8
    2d7e:	9f 92       	push	r9
    2d80:	af 92       	push	r10
    2d82:	bf 92       	push	r11
    2d84:	cf 92       	push	r12
    2d86:	df 92       	push	r13
    2d88:	ef 92       	push	r14
    2d8a:	ff 92       	push	r15
    2d8c:	0f 93       	push	r16
    2d8e:	1f 93       	push	r17
    2d90:	cf 93       	push	r28
    2d92:	df 93       	push	r29
    2d94:	cd b7       	in	r28, 0x3d	; 61
    2d96:	de b7       	in	r29, 0x3e	; 62
    2d98:	ca 1b       	sub	r28, r26
    2d9a:	db 0b       	sbc	r29, r27
    2d9c:	0f b6       	in	r0, 0x3f	; 63
    2d9e:	f8 94       	cli
    2da0:	de bf       	out	0x3e, r29	; 62
    2da2:	0f be       	out	0x3f, r0	; 63
    2da4:	cd bf       	out	0x3d, r28	; 61
    2da6:	09 94       	ijmp

00002da8 <__epilogue_restores__>:
    2da8:	2a 88       	ldd	r2, Y+18	; 0x12
    2daa:	39 88       	ldd	r3, Y+17	; 0x11
    2dac:	48 88       	ldd	r4, Y+16	; 0x10
    2dae:	5f 84       	ldd	r5, Y+15	; 0x0f
    2db0:	6e 84       	ldd	r6, Y+14	; 0x0e
    2db2:	7d 84       	ldd	r7, Y+13	; 0x0d
    2db4:	8c 84       	ldd	r8, Y+12	; 0x0c
    2db6:	9b 84       	ldd	r9, Y+11	; 0x0b
    2db8:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dba:	b9 84       	ldd	r11, Y+9	; 0x09
    2dbc:	c8 84       	ldd	r12, Y+8	; 0x08
    2dbe:	df 80       	ldd	r13, Y+7	; 0x07
    2dc0:	ee 80       	ldd	r14, Y+6	; 0x06
    2dc2:	fd 80       	ldd	r15, Y+5	; 0x05
    2dc4:	0c 81       	ldd	r16, Y+4	; 0x04
    2dc6:	1b 81       	ldd	r17, Y+3	; 0x03
    2dc8:	aa 81       	ldd	r26, Y+2	; 0x02
    2dca:	b9 81       	ldd	r27, Y+1	; 0x01
    2dcc:	ce 0f       	add	r28, r30
    2dce:	d1 1d       	adc	r29, r1
    2dd0:	0f b6       	in	r0, 0x3f	; 63
    2dd2:	f8 94       	cli
    2dd4:	de bf       	out	0x3e, r29	; 62
    2dd6:	0f be       	out	0x3f, r0	; 63
    2dd8:	cd bf       	out	0x3d, r28	; 61
    2dda:	ed 01       	movw	r28, r26
    2ddc:	08 95       	ret

00002dde <_exit>:
    2dde:	f8 94       	cli

00002de0 <__stop_program>:
    2de0:	ff cf       	rjmp	.-2      	; 0x2de0 <__stop_program>
